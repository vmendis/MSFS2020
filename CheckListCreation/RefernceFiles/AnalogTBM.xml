<?xml version="1.0" encoding="utf-8" ?>
<ModelInfo>
	<LODS>
		<!-- <LOD minSize="250" ModelFile="AnalogTBM_SteveoMode.gltf"/> -->
		<LOD minSize="250" ModelFile="AnalogTBM.gltf"/>
		<LOD minSize="75" ModelFile="AnalogTBM_LOD.gltf"/>
	</LODS>

	<Behaviors>
	<Include ModelBehaviorFile="Asobo\Common.xml"/>
	<Include ModelBehaviorFile="Asobo\NAVCOM\ADF.xml"/>
	<Include ModelBehaviorFile="Asobo\NAVCOM\NavComSystem.xml"/>
	<Include ModelBehaviorFile="Asobo\GPS\AS530.xml"/>
	<Include ModelBehaviorFile="Asobo\GPS\AS430.xml"/>
	<Include ModelBehaviorFile="Asobo\Transponder\AS330.xml"/>
	<Include RelativeFile="Dual530_Inputs.xml"/>
	<Include File="AnalogTBM_Templates.xml"/>




	<!-- >>>>>>>>>>>>>>>>>>> ATTENTION COCKPIT BUILDERS <<<<<<<<<<<<<<<<<<< -->
	<!-- Several adjusted values used by the instrumentation in this aircraft have been provided for your convenience
	when building home cockpits or external instrumentation interfaces.
	With a healthy understanding of the code below, anything should be possible, but these are just some important
	values to get you started.
  
	Inputs:

	Crashbar/Battery Switch 			"L:var_crashbar, bool"
	Source Switch 						"L:BKSQ_SourceSwitch, number"
	Generator Switch 					"L:BKSQ_GeneratorSwitch, number"
	Main Generator Reset Button 		"L:var_MainGeneratorResetButton, bool"
	Standby Generator Reset Button 		"L:var_StandbyGeneratorResetButton, bool"
	Starter Switch 						"L:BKSQ_StarterSwitch, bool"
	Ignition Switch 					"L:BKSQ_IgnitionSwitch, number"
	850 Mode 							"L:var_850Mode, bool" (Requires flaps to be up)
	Propeller Overspeed Gov. Test 		"L:var_propOverspeedTestButton, bool"

	L Landing Light Switch 				Use Native Binding
	R Landing Light Switch 				Use Native Binding
	Taxi Light Switch 					Use Native Binding
	Nav Light Switch 					Use Native Binding
	Stobe Light Switch 					Use Native Binding
	Pulse Light Switch 					Use Native Binding for Recognition Lights
	Remote Compass (Gyro) Switch		"A:CIRCUIT SWITCH ON:@57, bool"
	RMI Switch							"A:CIRCUIT SWITCH ON:@58, bool"
	ADI 2 Switch						"A:CIRCUIT SWITCH ON:@59, bool"
	HSI 2 Switch						"A:CIRCUIT SWITCH ON:@60, bool"

	Annunciator Panel Dimming 			"L:var_AnnunciatorDim, bool"
	Annunciator Panel Test Circuit 1 	"L:var_AnnunciatorTest1, bool"
	Annunciator Panel Test Circuit 2 	"L:var_AnnunciatorTest2, bool"

	Fuel Boost Pump Switch				"L:BKSQ_fuelPumpSwitch, bool"
	Auto Fuel Selector Switch  			"L:var_AutoFuelSelectorSwitch, bool"

	var_airframeDeice
	Ice/Wing Light Switch 				Use Native Binding
	Propeller Deice Switch 				Use Native Binding
	L Windshield Heat Switch			"L:var_windshieldHeatSwitch_L, bool"
	R Windshield Heat Switch			"L:var_windshieldHeatSwitch_R, bool"
	Pitot Heat 1 Switch 				Use Native Binding
	Pitot Heat 2 Switch 				Use Native Binding
	Inertial Separator 					"L:var_InertialSeparatorSwitch, bool"
	
	Bleed Air Switch 					"L:var_bleedState, number"
	Air Conditioning Switch 			"L:var_airconState, number"
	Fan Speed Switch 					"L:var_FanSwitch, bool"
	Cabin Pressurization Goal 			"L:var_pressurizationGoal, number"
	Cabin Pressurization Climb Rate 	"L:var_pressurizationClimbRate, number"
	Air Flow Selector (Defrost) 		"L:var_AirFlowSelectorKnob, number"
	Environmental System Test Button	"L:var_EnvironmentalLightTestButton, bool"

	EFIS Power Switch					"L:var_EFIS_PowerSwitch, bool"
	Autopilot Master Switch				"L:BKSQ_AutopilotMasterSwitch, number"
	Radio Master Switch 				"L:var_RadioMasterSwitch, bool"

	Crew Oxygen Supply Switch 			"L:var_oxygenMaster, bool"
	Passenger Oxygen Supply Switch 		"L:var_passengerOxygen, bool"
	Pilot Oxygen Mask 					"L:var_pilotOxygen, bool"
	Copilot Oxygen Mask 				"L:var_coPilotOxygen, bool"
	Warning Horn Test 					"L:var_HornTest, bool"

	Instrument Lighting Knob 			"L:var_InstrumentLightingKnob, number"
	Panel Lighting Knob 				"L:var_PanelLightingKnob, number"
	L Yoke Light Knob 					"L:var_YokeLightKnob_L, number"
	R Yoke Light Knob 					"L:var_YokeLightKnob_R, number"
	Emergency Lighting Knob				"L:var_EmergencyLightsKnob, number"
	L Reading Light Switch 				"L:var_ReadingLightSwitch_L, bool"
	R Reading Light Switch 				"L:var_ReadingLightSwitch_R, bool"
	Cabin Lights Middle L Button 		"L:var_CabinLights_Middle_L_Button, bool"
	Cabin Lights Middle R Button 		"L:var_CabinLights_Middle_R_Button, bool"
	Cabin Lights Aft L Button 			"L:var_CabinLights_Aft_L_Button, bool"
	Cabin Lights Aft R Button 			"L:var_CabinLights_Aft_R_Button, bool"
	Baggage Lights Button 				"L:var_BaggageLights_Button, bool"
	Access Lights Button 				"L:var_AccessLights_Button, bool"

	Outputs:

	Engine Torque 						"L:BKSQ_TBM_TQ, number"
	Propeller RPM 						"A:PROP RPM:1, rpm"
	Vertical Speed 						"L:BKSQ_TBM_VerticalSpeed_1, number"
	Interstage Turbine Temperature 		"L:BKSQ_TBM_ITT, number"
	Gas Generator Percent 				"L:BKSQ_TBM_NG, number"
	Fuel Flow (GPH) 					"L:BKSQ_TBM_FuelFlow, number"
	Oil Temperature 					"L:BKSQ_TBM_OILTEMPERATURE, celsius"
	Oxygen Pressure:    				"L:var_oxygenPressure, number"
	Cabin Temperature:    				"L:var_cabinTemperature, number"
	Cabin Pressure Differential			"L:var_cabinPressureDifferential, number"
	Cabin Climb Rate 					"L:var_cabinClimbRate, number"
	Cabin Pressure Altitude 			"L:var_cabinPressurizationAltitude, number"
	Bus Volts 							"L:var_correctedBusVolts, number"
	Battery Charge/Discharge Amps 		"L:var_correctedBatteryLoad, number"
	Pilot's Secondary Localizer CDI		"L:BKSQ_TBM_LOC_2, number"
	Pilot's Secondary Localizer GS 		"L:BKSQ_TBM_GLIDE_2, number"
	Copilot's HSI CDI 					"L:BKSQ_TBM_HSI_LOC, number"
	Copilot's HSI GS 					"L:BKSQ_TBM_HSI_GLIDE, number"

	-->


	<!-- Constants -->

	<Macro Name="EmergencyPowerGate">15.0</Macro> <!-- Point at which emergency power lever overrides main throttle -->
	<Macro Name="CabinTempTimeConstant">250</Macro> <!-- This is the fraction of the difference between cabin vent temp and cabin temp that will be added each second. (Default 250) -->
	<Macro Name="RamAirCoolingSpeed">120</Macro> <!-- Airspeed at which the cabin can be fully cooled to the ambient temperature by ram air alone. -->
	<Macro Name="TorqueBloomSpeed">80</Macro> <!-- Airspeed at which ITT is on full ram pressure curve and no longer reduced by low ram pressures. -->
	<Macro Name="TorqueBloomPercent">0.05</Macro> <!-- Percent torque is reduced when at zero airspeed -->

	<!-- Busses -->
	<Macro Name="HOT_BATTERY">1</Macro>
	<Macro Name="BATTERY">2</Macro>
	<Macro Name="MAIN_DISTRIBUTION">3</Macro>
	<Macro Name="BUS1">4</Macro>
	<Macro Name="BUS2">5</Macro>
	<Macro Name="BUS3">6</Macro>
	<Macro Name="ESS1">7</Macro>
	<Macro Name="ESS2">8</Macro>
	<Macro Name="EFIS">9</Macro>
	<Macro Name="RADIOBUS1">10</Macro>
	<Macro Name="RADIOBUS2">11</Macro>
	<Macro Name="RADIOBUS3">12</Macro>
	<Macro Name="RADIOESS1">13</Macro>
	<Macro Name="RADIOESS2">14</Macro>
	<Macro Name="CABINLIGHTS">15</Macro>
	<Macro Name="CABINLIGHTS_INTERMEDIATE">16</Macro>
	<Macro Name="LANDINGLIGHTS_INTERMEDIATE_L">17</Macro>
	<Macro Name="LANDINGLIGHTS_INTERMEDIATE_R">18</Macro>
	<Macro Name="TAXILIGHT_INTERMEDIATE">19</Macro>


	<!--//Necessary-->
	<Macro Name="StarterMotorCircuit">1</Macro>
	<Macro Name="GeneralPanelCircuit">2</Macro>
	<!--//TopRow-->
	<Macro Name="GearMotorCircuit">3</Macro>
	<Macro Name="FlapMotorCircuit">4</Macro>
	<Macro Name="PitchTrimsCircuit">5</Macro>
	<Macro Name="AileronTrimsCircuit">6</Macro>
	<Macro Name="RudderTrimsCircuit">7</Macro>
	<Macro Name="AutopilotCircuit">8</Macro>
	<!--//Row1-->
	<Macro Name="FlapSignalCircuit">9</Macro>
	<Macro Name="LandingGearControllerCircuit">10</Macro>
	<Macro Name="LandingGearSignalCircuit">11</Macro>
	<Macro Name="CabinAudioPlayerCircuit">12</Macro>
	<Macro Name="PitotHeat1Circuit">13</Macro>
	<Macro Name="PitotHeat2Circuit">14</Macro>
	<Macro Name="InertialSeparatorCircuit">15</Macro>
	<!--//Row2-->
	<Macro Name="Annunciators1Circuit">16</Macro>
	<Macro Name="Annunciators2Circuit">17</Macro>
	<Macro Name="AudioWarningsCircuit">18</Macro>
	<Macro Name="AutopilotDisconnectCircuit">19</Macro>
	<Macro Name="AutopilotWarningsCircuit">20</Macro>
	<Macro Name="AltitudeSelectorCircuit">21</Macro>
	<Macro Name="WindshieldHeat_LCircuit">22</Macro>
	<Macro Name="WindshieldHeat_RCircuit">23</Macro>
	<Macro Name="PropDeiceCircuit">24</Macro>
	<Macro Name="AirframeDeiceCircuit">25</Macro>
	<!--//Row3-->
	<Macro Name="EngineIndications1Circuit">26</Macro>
	<Macro Name="EngineIndications2Circuit">27</Macro>
	<Macro Name="IgnitionCircuit">28</Macro>
	<Macro Name="PulseLightsCircuit">29</Macro>
	<Macro Name="IceLightCircuit">30</Macro>
	<Macro Name="StrobeLightCircuit">31</Macro>
	<Macro Name="LandingLight_LCircuit">32</Macro>
	<Macro Name="TaxiLightCircuit">33</Macro>
	<Macro Name="LandingLight_RCircuit">34</Macro>
	<Macro Name="NavLightsCircuit">35</Macro>
	<!--//Row4-->
	<Macro Name="BleedAirCircuit">36</Macro>
	<Macro Name="AirConditionerCircuit">37</Macro>
	<Macro Name="FuelSender1Circuit">38</Macro>
	<Macro Name="FuelSender2Circuit">39</Macro>
	<Macro Name="FuelSelectorCircuit">40</Macro>
	<Macro Name="BoostPumpCircuit">41</Macro>
	<Macro Name="InstrumentLightsCircuit">42</Macro>
	<Macro Name="PanelLightsCircuit">43</Macro>
	<Macro Name="EmergencyLightsCircuit">44</Macro>
	<Macro Name="ReadingLight_LCircuit">45</Macro>
	<Macro Name="ReadingLight_RCircuit">46</Macro>
	<Macro Name="YokeLight_LCircuit">47</Macro>
	<Macro Name="YokeLight_RCircuit">48</Macro>
	<Macro Name="CabinLight_FLCircuit">49</Macro>
	<Macro Name="CabinLight_FRCircuit">50</Macro>
	<Macro Name="CabinLight_RLCircuit">51</Macro>
	<Macro Name="CabinLight_RRCircuit">52</Macro>
	<Macro Name="BaggageLightCircuit">53</Macro>
	<!--//Row5-->
	<Macro Name="ELTCircuit">54</Macro>
	<Macro Name="EHSICircuit">55</Macro>
	<Macro Name="EADICircuit">56</Macro>
	<Macro Name="RemoteCompassCircuit">57</Macro>
	<Macro Name="RMICircuit">58</Macro>
	<Macro Name="ADI2Circuit">59</Macro>
	<Macro Name="HSI2Circuit">60</Macro>
	<Macro Name="RadioAltimeter2Circuit">61</Macro>
	<Macro Name="AccessLightingCircuit">62</Macro>
	<Macro Name="MemoryChronoCircuit">63</Macro>
	<!--//Row6-->
	<Macro Name="RadioAltimeter1Circuit">64</Macro>
	<Macro Name="DcCabinAccessoriesCircuit">65</Macro>
	<Macro Name="MarkerBeaconCircuit">66</Macro>
	<Macro Name="Com1Circuit">67</Macro>
	<Macro Name="GroundClearanceCircuit">68</Macro>
	<Macro Name="Com2Circuit">69</Macro>
	<Macro Name="AltitudeEncoderCircuit">70</Macro>
	<Macro Name="TransponderCircuit">71</Macro>
	<!--//Row7-->
	<Macro Name="Com3Circuit">72</Macro>
	<Macro Name="Com4Circuit">73</Macro>
	<Macro Name="Nav1Circuit">74</Macro>
	<Macro Name="Nav2Circuit">75</Macro>
	<Macro Name="RNAVCircuit">76</Macro>
	<Macro Name="Nav4_NeededForDmeHoldCircuit">77</Macro>
	<Macro Name="ADFCircuit">78</Macro>
	<Macro Name="DMECircuit">79</Macro>
	<Macro Name="TerrainTrafficCircuit">80</Macro>
	<Macro Name="WeatherRadarControllerCircuit">81</Macro>
	<Macro Name="WeatherRadarAntennaCircuit">82</Macro>
	<Macro Name="RadioFansCircuit">83</Macro>
	<!--//Other-->
	<Macro Name="GeneralAvionicsCircuit">84</Macro>
	<Macro Name="AudioControllerCircuit">85</Macro>
	<Macro Name="StallWarningCircuit">86</Macro>
	<Macro Name="GyroSlavingCircuit">87</Macro>


	<!-- Macros -->

	<!--
		Frame 0:	KX155 & KX155
		Frame 1:	GNS530 & KX155
		Frame 2:	GTN750 & KX155
		Frame 3:    KX155 & GNS530
		Frame 4:	GNS530 & GNS530
		Frame 5:	GTN750 & GNS530
	 -->

	<Macro Name="RadioBuilderAnimationFrame">
		(L:var_radio1Mode, number) 2 == if{
    		(L:var_radio2Mode, number) 1 == if{
    			0
    		}
    		els{
    			3
    		}
    	}
    	els{
    		(L:var_radio1Mode, number) 1 == if{
    			(L:var_radio2Mode, number) 1 == if{
    				1
    			}
    			els{
    				4
    			}
    		}
    		els{
    			(L:var_radio1Mode, number) 0 == if{
    				(L:var_radio2Mode, number) 1 == if{
    					2
    				}
    				els{
    					5
    				}
    			}
    		}
    	}
    </Macro>

	<Macro Name="PilotWeight">
    	(A:PAYLOAD STATION WEIGHT:0, pounds)
    </Macro>
    <Macro Name="CopilotWeight">
    	(A:PAYLOAD STATION WEIGHT:1, pounds)
    </Macro>
    <Macro Name="PassengerPayloadWeight">
    	(A:PAYLOAD STATION WEIGHT:1, pounds)
    	(A:PAYLOAD STATION WEIGHT:2, pounds) +
    	(A:PAYLOAD STATION WEIGHT:3, pounds) +
    	(A:PAYLOAD STATION WEIGHT:4, pounds) +
    	(A:PAYLOAD STATION WEIGHT:5, pounds) +
    	(A:PAYLOAD STATION WEIGHT:6, pounds) +
    </Macro>

    <Macro Name="BatteryDimmingAnnunciatorBrightness">
    	3.0 (L:var_AnnunciatorDim, bool) 2.25 * -

    	200 (A:ELECTRICAL BATTERY LOAD:1, amps) - 200 / 0.3 max 1.0 min *
    </Macro>

    <Macro Name="DensityAltitude">
    	(A:PRESSURE ALTITUDE, FEET) 1.2376 * (A:AMBIENT TEMPERATURE, CELSIUS) 118.8 * + 1782 -
    </Macro>

     <Macro Name="SurfaceFodAmount">
    	(A:SURFACE TYPE, ENUM) 1  &gt;= (A:SURFACE TYPE, ENUM) 3  &lt;= and 
    	(A:SURFACE TYPE, ENUM) 5  &gt;= (A:SURFACE TYPE, ENUM) 16 &lt;= and 2 *
    	(A:SURFACE TYPE, ENUM) 20 == 5 *
    	+ +
    	(A:SIM ON GROUND, bool) *
    </Macro>

    <!-- Torque Limiter -->
    <Macro Name="MaxTorqueLimit">1900 1 @TorqueBloomSpeed (A:RELATIVE WIND VELOCITY BODY Z, feet per second) 0.592484 * - @TorqueBloomSpeed / @TorqueBloomPercent * + 1 max *   235 (L:var_inertSepWindup, number) * + </Macro>
    <Macro Name="MaxPropRpm">2000</Macro>
	<Macro Name="EfficiencyConstant">0.64</Macro>
	<Macro Name="PropTorqueAdjustment">1.25</Macro>
	<Macro Name="ThrottleToFuelFlow">
		(L:var_fuelControlFailure, bool) ! if{
			0.929467 (A:GENERAL ENG THROTTLE LEVER POSITION:1, percent) abs * 1.31531 pow 195.914 +		
		}
		els{
			(L:var_lastFuelFlowBeforeFailure, number)
		}

		(L:var_emergencyPowerLeverPosition, number) @EmergencyPowerGate - 0 max  4 * 150 + 
		max

		1.0 (A:TURB ENG CONDITION LEVER POSITION:1, enum) 1 == 0.35 * - *
		0.9 @DensityAltitude 31000 / 0.22 * +
    	*

    	(L:var_engineSurgeFailure, bool) if{
    		20 (E:LOCAL TIME, seconds) 1.5 * sin *    12 (E:LOCAL TIME, seconds) 0.8 * cos *   +    (L:BKSQ_TBM_TQ, number) 500 / *       +
    	}
	</Macro>
	<Macro Name="MaxTorqueToFuelFlow">
		(L:var_fuelControlFailure, bool) ! if{
			@EfficiencyConstant (A:PROP RPM:1, RPM) @MaxTorqueLimit (A:PROP RPM:1, RPM) @MaxPropRpm - @PropTorqueAdjustment * - * *   5252 /
			0.9 @DensityAltitude 31000 / 0.22 * +
	    	*
	    }
	    els{
	    	(L:var_lastFuelFlowBeforeFailure, number)
	    }

	    (L:var_engineSurgeFailure, bool) if{
	    	15 (E:LOCAL TIME, seconds) 1.5 * sin *    5 (E:LOCAL TIME, seconds) 0.8 * cos *   +    (L:BKSQ_TBM_TQ, number) 500 / *       +
	    }
	</Macro>

	<!-- 	
	
    <Macro Name="MaxTorqueLimit">1900 1 @TorqueBloomSpeed (A:RELATIVE WIND VELOCITY BODY Z, feet per second) 0.592484 * - @TorqueBloomSpeed / @TorqueBloomPercent * + 1 max * </Macro>
    <Macro Name="MaxPropRpm">2000</Macro>
	<Macro Name="EfficiencyConstant">0.64</Macro>
	<Macro Name="PropTorqueAdjustment">1.25</Macro>
	<Macro Name="ThrottleToFuelFlow">
		(L:var_emergencyPowerLeverPosition, number) @EmergencyPowerGate &lt; if{
			0.929467 (A:GENERAL ENG THROTTLE LEVER POSITION:1, percent) abs * 1.31531 pow 195.914 +
		}
		els{
			(L:var_emergencyPowerLeverPosition, number) 7 * 150 +
		}
		1.0 (A:TURB ENG CONDITION LEVER POSITION:1, enum) 1 == 0.35 * - *
		0.9 @DensityAltitude 31000 / 0.22 * +
    	*
	</Macro>
	<Macro Name="CurrentTorqueToFuelFlow">
		@EfficiencyConstant (A:PROP RPM:1, RPM) (A:TURB ENG FREE TURBINE TORQUE:1, ft-lbs) (A:PROP RPM:1, RPM) @MaxPropRpm - @PropTorqueAdjustment * - * *   5252 /
		0.9 @DensityAltitude 31000 / 0.22 * +
    	*
	</Macro>
	<Macro Name="MaxTorqueToFuelFlow">
		@EfficiencyConstant (A:PROP RPM:1, RPM) @MaxTorqueLimit (A:PROP RPM:1, RPM) @MaxPropRpm - @PropTorqueAdjustment * - * *   5252 /
		0.9 @DensityAltitude 31000 / 0.22 * +
    	*
	</Macro>

	<Macro Name="FuelController_P">2.0</Macro>
	<Macro Name="FuelController_I">5.0</Macro>
	<Macro Name="FuelController_D">0.0</Macro>
	<Macro Name="FuelFlowController">
		@ThrottleToFuelFlow @CurrentTorqueToFuelFlow - (&gt;L:var_FuelController_Error, Pounds per hour)
		(L:var_FuelController_Integral, Pounds per hour) (L:var_FuelController_Error, Pounds per hour) 0.0166 * + (&gt;L:var_FuelController_Integral, Pounds per hour)
		(L:var_FuelController_Error, Pounds per hour) (L:var_FuelController_ErrorPrevious, Pounds per hour) - 0.0166 / (&gt;L:var_FuelController_Derivative, Pounds per hour)
		(L:var_FuelController_Error, Pounds per hour) (&gt;L:var_FuelController_ErrorPrevious, Pounds per hour)

		@FuelController_P (L:var_FuelController_Error, Pounds per hour) *
		@FuelController_I (L:var_FuelController_Integral, Pounds per hour) * 
		@FuelController_D (L:var_FuelController_Derivative, Pounds per hour) *
		+ +
		50 max
	</Macro>
	<Macro Name="MaxTorqueFuelFlowController">
		@MaxTorqueToFuelFlow @CurrentTorqueToFuelFlow - (&gt;L:var_FuelController_Error, Pounds per hour)
		(L:var_FuelController_Integral, Pounds per hour) (L:var_FuelController_Error, Pounds per hour) 0.0166 * + (&gt;L:var_FuelController_Integral, Pounds per hour)
		(L:var_FuelController_Error, Pounds per hour) (L:var_FuelController_ErrorPrevious, Pounds per hour) - 0.0166 / (&gt;L:var_FuelController_Derivative, Pounds per hour)
		(L:var_FuelController_Error, Pounds per hour) (&gt;L:var_FuelController_ErrorPrevious, Pounds per hour)

		@FuelController_P (L:var_FuelController_Error, Pounds per hour) *
		@FuelController_I (L:var_FuelController_Integral, Pounds per hour) * 
		@FuelController_D (L:var_FuelController_Derivative, Pounds per hour) *
		+ +
		50 max
	</Macro>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>60</FREQUENCY>
			<UPDATE_CODE>
					@ThrottleToFuelFlow
					@EfficiencyConstant /
					5252 *
					(A:PROP RPM:1, RPM) /
					@MaxPropRpm (A:PROP RPM:1, RPM) - @PropTorqueAdjustment * -

					0.9 @DensityAltitude 31000 / 0.22 * -
    				*

					@MaxTorqueLimit &gt; (A:PROP RPM:1, RPM) 1500 &gt; (L:var_850Mode, bool) ! and and if{
						@MaxTorqueFuelFlowController (&gt;A:TURB ENG CORRECTED FF:1, Pounds per hour)
					}
					els{
						@FuelFlowController  (&gt;A:TURB ENG CORRECTED FF:1, Pounds per hour)
					}
			</UPDATE_CODE>
		</UseTemplate>

 	-->

 	<Macro Name="SaveState">
    	(A:FUEL TANK LEFT MAIN LEVEL, percent)  (&gt;L:SAVED_FUEL_QTY_L_pct, number)
		(A:FUEL TANK RIGHT MAIN LEVEL, percent) (&gt;L:SAVED_FUEL_QTY_R_pct, number)

		(A:PAYLOAD STATION WEIGHT:1, pounds) (&gt;L:SAVED_PAYLOAD_NOSE_BAGGAGE_lbs, number)
		(A:PAYLOAD STATION WEIGHT:2, pounds) (&gt;L:SAVED_PAYLOAD_PILOT_lbs, number)
		(A:PAYLOAD STATION WEIGHT:3, pounds) (&gt;L:SAVED_PAYLOAD_COPILOT_lbs, number)
		(A:PAYLOAD STATION WEIGHT:4, pounds) (&gt;L:SAVED_PAYLOAD_FL_PAX_lbs, number)
		(A:PAYLOAD STATION WEIGHT:5, pounds) (&gt;L:SAVED_PAYLOAD_FR_PAX_lbs, number)
		(A:PAYLOAD STATION WEIGHT:6, pounds) (&gt;L:SAVED_PAYLOAD_RL_PAX_lbs, number)
		(A:PAYLOAD STATION WEIGHT:7, pounds) (&gt;L:SAVED_PAYLOAD_RR_PAX_lbs, number)
		(A:PAYLOAD STATION WEIGHT:8, pounds) (&gt;L:SAVED_PAYLOAD_REAR_BAGGAGE_lbs, number)
    </Macro>

    <Macro Name="LoadState">
    	(A:FUEL TANK LEFT MAIN LEVEL, percent)  50 - abs 1.0 &lt; if{
			(L:SAVED_FUEL_QTY_L_pct, number) 0.1 &gt; if{
				(L:SAVED_FUEL_QTY_L_pct, number) (&gt;A:FUEL TANK LEFT MAIN LEVEL, percent)
			}
		}
		(A:FUEL TANK RIGHT MAIN LEVEL, percent) 50 - abs 1.0 &lt; if{
			(L:SAVED_FUEL_QTY_R_pct, number) 0.1 &gt; if{
				(L:SAVED_FUEL_QTY_R_pct, number) (&gt;A:FUEL TANK RIGHT MAIN LEVEL, percent)
			}
		}

		(A:PAYLOAD STATION WEIGHT:1, pounds) 20 == if{
			(L:SAVED_PAYLOAD_NOSE_BAGGAGE_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:1, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:2, pounds) 175 == if{
			(L:SAVED_PAYLOAD_PILOT_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:2, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:3, pounds) 175 == if{
			(L:SAVED_PAYLOAD_COPILOT_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:3, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:4, pounds) 0 == if{
			(L:SAVED_PAYLOAD_FL_PAX_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:4, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:5, pounds) 0 == if{
			(L:SAVED_PAYLOAD_FR_PAX_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:5, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:6, pounds) 0 == if{
			(L:SAVED_PAYLOAD_RL_PAX_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:6, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:7, pounds) 0 == if{
			(L:SAVED_PAYLOAD_RR_PAX_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:7, pounds)
		}
		(A:PAYLOAD STATION WEIGHT:8, pounds) 10 == if{
			(L:SAVED_PAYLOAD_REAR_BAGGAGE_lbs, number) (&gt;A:PAYLOAD STATION WEIGHT:8, pounds)
		}
    </Macro>

    <!-- UPDATER -->
	<Component ID="UPDATER">

		<!-- Lvar Initialization -->
		<UseTemplate Name="ASOBO_GT_Update">
			<UPDATE_ONCE>TRUE</UPDATE_ONCE>
			<UPDATE_CODE>
				1 (&gt;L:BKSQ_SOUND_IDENTIFIER, bool)
				(&gt;K:FUEL_SELECTOR_LEFT_MAIN)
				0 (&gt;L:var_GearWarningHorn, bool)
				0 (&gt;L:var_altitudeAlert, number)
				(* 1850 (&gt;L:var_oxygenPressure, number) *)
				(* 1 (&gt;L:var_dmeMode, number) (&gt;H:dmeMode1) *)
				(* 1 (&gt;L:var_radarMode, number) (&gt;H:radarMode1) *)
				(* 40 (&gt;L:var_RadarTilt, number) *)
				(* 100 (&gt;L:var_RadarBrightness, number) *)
				(* 100 (&gt;L:var_RadarGain, number) *)
				50 (&gt;L:BKSQ_TurnCoordinatorBall, number)
				0 (&gt;L:BKSQ_OXYGEN_FLOW_SOUND, bool)
				0 (&gt;L:BKSQ_PILOT_MASK_SOUND, bool)
				0 (&gt;L:BKSQ_COPILOT_MASK_SOUND, bool)
				0 (&gt;L:var_BleedAirOvertemp, bool)
				0 (&gt;L:var_passengerOxygen, bool)
				0 (&gt;L:var_oxygenMaster, bool)
				0 (&gt;L:var_pilotOxygen, bool)
				0 (&gt;L:var_coPilotOxygen, bool)
				0 (&gt;L:var_oxygenIsolationValve, bool)
				0 (&gt;L:BKSQ_fuelPumpSwitch, Number)
				0 (&gt;L:var_airframeDeiceFailure, bool)
				0 (&gt;L:var_propGovernorFailure, bool)
				0 (&gt;L:var_fuelControlFailure, bool)
				0 (&gt;L:var_engineSurgeFailure, bool)
				0 (&gt;L:var_TorqueLimitingFailure, bool)
				0 (&gt;L:var_EtmMode, number)
				0 (&gt;L:var_NgAtFuelIntroduction, number)
				(A:ENG N2 RPM:1, PERCENT) (&gt;L:BKSQ_TBM_NG, number)
				0 (&gt;L:var_lastFuelAvailable, number)
				100 (&gt;L:var_EADI_Brightness, number)
				100 (&gt;L:var_EHSI_Brightness, number)
				0 (&gt;L:var_MainGeneratorFailure, bool)
				0 (&gt;L:var_StandbyGeneratorFailure, bool)
				0 (&gt;L:var_TerrainInhibited, bool)
				0 (&gt;L:var_TerrainTest, number)
				0 (&gt;L:var_TerrainCaution, bool)
				0 (&gt;L:var_TerrainWarning, bool)
				0 (&gt;L:var_emergencyPowerLeverPosition, number)
				0 (&gt;L:var_FlightIdleGateSoundLatching, number)
				(A:AMBIENT TEMPERATURE, Fahrenheit) (&gt;L:var_cabinTemperature, number)
				(A:AMBIENT TEMPERATURE, Fahrenheit) (&gt;L:var_cabinVentTemperature, number)
				100 (&gt;L:var_EADI_BrightnessWarmup, number)
				100 (&gt;L:var_EHSI_BrightnessWarmup, number)
				72 (&gt;L:var_cabinTemperatureKnob, number)
				2 (&gt;L:var_PilotDoorLockedLatching, number)
				2 (&gt;L:var_AftDoorLockedLatching, number)
				0 (&gt;L:var_EmergencyGearDoor, bool)
				75 (&gt;L:var_fuelSelectTimer, number)
				0 (&gt;L:var_EfisCompositeMode, bool)
				20 (&gt;L:var_Visor_L, number)
				20 (&gt;L:var_Visor_R, number)
				0 (&gt;L:var_PilotLadder, bool)
				0 (&gt;L:var_AftLadder, bool)
				0 (&gt;L:var_pilotDoorLatchingFailure, bool)
				0 (&gt;L:var_aftDoorLatchingFailure, bool)
				800 (&gt;L:var_pressurizationClimbRate, number)
				0 (&gt;L:var_propOverspeedTestButton, bool)
				0 (&gt;L:var_EssentialBusTieSwitch, bool)
				0 (&gt;L:var_efisDecisionHeightTest, bool)
				0 (&gt;L:var_efisDecisionHeightSet, bool)
				0 (&gt;L:var_adfKnobPulled, bool)
				0 (&gt;L:var_VsAdjustMode, bool)
				0 (&gt;L:var_startupComplete, bool)
				0 (&gt;L:var_startupCount, number)
				0 (&gt;L:var_ecsFault, bool)
				0 (&gt;L:var_airconState, number)
				0 (&gt;L:var_FanSwitch, bool)
				1 (&gt;L:var_stormScopeSwitch, bool)
				0 (&gt;L:var_EfisDecisionHeight, bool)
				100 (&gt;L:var_AirFlowSelectorKnob, number)
				10 (A:SIM ON GROUND, bool) 35 * + (&gt;L:var_AutopilotStartupCounter, number) 
				0 (&gt;L:var_windshieldHeatSwitch_L, bool)
				0 (&gt;L:var_windshieldHeatSwitch_R, bool)
				0 (&gt;L:var_InertialSeparatorSwitch, bool)
				0 (&gt;L:var_inertSepWindup, number)
				(* 500 (&gt;L:var_copilotDecisionHeight, number) *)
				0 (&gt;L:var_autopilotSoftRideMode, bool)
				(* 0 (&gt;L:var_GyroSlaveModeSwitch, bool) *)
				0 (&gt;L:var_starterInUseSeconds, number)
				0 (&gt;L:var_batteryTempCounter, number)
				(* 0 (&gt;L:var_engineDamage, number) *)
				0 (&gt;L:var_850Mode, bool)
				0 (&gt;L:var_pressurizationGoal, FT)
				0 (&gt;L:var_pressurizationPress, bool)		
				800 (&gt;L:var_pressurizationClimbRate, number)
				0 (&gt;L:var_pressurizationSafetyValveFailure, bool)
				0 (&gt;L:var_pressurizationOutflowValveFailure, bool)
				0 (&gt;L:var_pressurizationInflowFailure, bool)		
				0 (&gt;L:var_PressurizationDump, bool)		
				0 (&gt;L:var_cabinClimbRate, ft/min)
				0 (&gt;L:var_cabinPressureDifferential, psi)
				0 (&gt;L:var_cabinOutflowValve, bool)
				0 (&gt;L:var_cabinSafetyValve, bool)
				0 (&gt;L:BKSQ_TBM_OILTEMPERATURE, CELSIUS)
				0 (&gt;L:var_AnnunciatorDim, bool)
				0 (&gt;L:var_AnnunciatorTest1, bool)
				0 (&gt;L:var_AnnunciatorTest2, bool)
				4 (&gt;K:COPILOT_TRANSMITTER_SET)
				0 (&gt;L:var_rnavDrivesHsi, bool)
				0 (&gt;L:var_rnavCourseLinearFlag, bool)
				0 (&gt;L:var_RNAV_DME, number)
				0 (&gt;L:var_RNAV_DMESPEED, number)
				0 (&gt;L:var_RNAV_CDI, Number)
				0 (&gt;L:var_RNAV_TOFROM, number)
				0 (&gt;L:var_RNAV_BEARING, number)
				0 (&gt;L:var_RNAV_DMEHOLD, bool)
				20 (&gt;L:var_RNAV_OBS, number)
				0 (&gt;L:var_rnavKnobPulled, bool)
				0 (&gt;L:COM_1_KNOB_PULLED, bool)
				0 (&gt;L:COM_2_KNOB_PULLED, bool)
				0 (&gt;L:NAV_1_KNOB_PULLED, bool)
				0 (&gt;L:NAV_2_KNOB_PULLED, bool)
				80 (&gt;L:var_RNAV_VOLUME, number)
				(E:LOCAL TIME, seconds) (&gt;L:var_propDeiceStartTime, number)
				@Com1Circuit (&gt;L:TDSGTNXI750U1_ElectricalCircuit, number)
				120 (&gt;L:TDSGTNXI_VGlide, number)
				13.7 (&gt;L:TDSGTNXI_GlideRatio, number)

				0 (&gt;A:CIRCUIT SWITCH ON:@FuelPumpCircuit, bool)
				1 (&gt;A:CIRCUIT SWITCH ON:@GyroSlavingCircuit, bool)
				0 (&gt;A:CIRCUIT SWITCH ON:@AirConditionerCircuit, bool)

				0 (&gt;L:GTN750_INT_HIDDEN,bool) 0 (&gt;L:XMLVAR_GPS_DISABLED_GTN750, bool) 1 (&gt;L:AS530_1_HIDDEN,bool) 1 (&gt;L:KX155B_1_HIDDEN,bool)
				0 (&gt;L:AS530_2_HIDDEN,bool) 1 (&gt;L:KX155B_2_HIDDEN,bool)
				(A:GPS DRIVES NAV1, Bool) if{ (&gt;K:TOGGLE_GPS_DRIVES_NAV1) }
			</UPDATE_CODE>
		</UseTemplate>


		<!-- Startup Code -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>

				(L:var_startupComplete, bool) 0 == if{ 
					(L:var_startupCount, number) 3 &gt; if{
						1 (&gt;L:var_startupComplete, bool)

						(A:PRESSURE ALTITUDE, FEET) (&gt;L:var_cabinPressurizationAltitude, ft)
						
						(&gt;K:FUEL_SELECTOR_LEFT_MAIN)

						7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
							3 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
							3 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
							3 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}

						7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
							2 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
							2 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
							2 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}


						0 (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@AileronTrimsCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@WindshieldHeat_LCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@WindshieldHeat_RCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@PropDeiceCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@AirframeDeiceCircuit, bool)
						0 (&gt;A:CIRCUIT SWITCH ON:@PulseLightsCircuit, bool)

						1 (&gt;A:CIRCUIT SWITCH ON:@Com3Circuit, bool)
						1 (&gt;A:CIRCUIT SWITCH ON:@Com4Circuit, bool)
						1 (&gt;A:CIRCUIT SWITCH ON:@Nav4_NeededForDmeHoldCircuit, bool)


						(A:SIM ON GROUND, bool) ! (A:ENG COMBUSTION:1, bool) or if{

							(&gt;B:FUEL_1_Condition_Lever_High_Idle)
							2 (&gt;L:var_lastFuelAvailable, number)
							20 (&gt;L:var_NgAtFuelIntroduction, number)
							(A:ENG N2 RPM:1, PERCENT) (&gt;L:BKSQ_TBM_NG, number)

							1 (&gt;L:var_crashbar, bool)
							1 (&gt;L:BKSQ_SourceSwitch, number)
							1 (&gt;L:BKSQ_GeneratorSwitch, number)

							1 (&gt;L:var_EFIS_PowerSwitch, bool)
    						1 (&gt;A:CIRCUIT SWITCH ON:@EADICircuit, bool)
    						1 (&gt;A:CIRCUIT SWITCH ON:@EHSICircuit, bool)
    						1 (&gt;A:CIRCUIT SWITCH ON:@RemoteCompassCircuit, bool)
							1 (&gt;A:CIRCUIT SWITCH ON:@RMICircuit, bool)
							1 (&gt;A:CIRCUIT SWITCH ON:@ADI2Circuit, bool)
							1 (&gt;A:CIRCUIT SWITCH ON:@HSI2Circuit, bool)

							1 (&gt;L:var_AutoFuelSelectorSwitch, bool)
							2 (&gt;L:BKSQ_fuelPumpSwitch, Number)
							1 (&gt;A:CIRCUIT SWITCH ON:@FuelSelectorCircuit, bool)
							1 (&gt;L:var_oxygenMaster, bool)

    						2 (&gt;L:BKSQ_AutopilotMasterSwitch, number)
							1 (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
							0 (&gt;L:var_trimsDisabled, bool)

							1 1 (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET) 1 (&gt;L:var_bleedState, number)

							1 (&gt;L:BKSQ_IgnitionSwitch, number)
							0 (&gt;K:TURBINE_IGNITION_SWITCH_SET1)
							0 (&gt;A:CIRCUIT SWITCH ON:@IgnitionCircuit, bool)
							2 (&gt;L:var_airconState, number)

							1 (&gt;L:var_RadioMasterSwitch, bool)
							4 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:10, Bool) (L:var_RadioMasterSwitch, bool) != if{
								10 4 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							5 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:11, Bool) (L:var_RadioMasterSwitch, bool) != if{
								11 5 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							6 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:12, Bool) (L:var_RadioMasterSwitch, bool) != if{
								12 6 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:13, Bool) (L:var_RadioMasterSwitch, bool) != if{
								13 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:14, Bool) (L:var_RadioMasterSwitch, bool) != if{
								14 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}

							(E:TIME OF DAY, enum) 1 &gt; if{
								100 (&gt;L:var_InstrumentLightingKnob, number)
								100 (&gt;L:var_PanelLightingKnob, number)
							}
							els{
								0 (&gt;L:var_InstrumentLightingKnob, number)
								0 (&gt;L:var_PanelLightingKnob, number)
							}

							0 (&gt;L:var_YokeLightKnob_L, number)
							0 (&gt;L:var_YokeLightKnob_R, number)
							0 (&gt;L:var_EmergencyLightsKnob, number)
							0 (&gt;L:var_ReadingLightSwitch_L, bool)
							0 (&gt;L:var_ReadingLightSwitch_R, bool)
							0 (&gt;L:var_CabinLights_Middle_L_Button, bool)
							0 (&gt;L:var_CabinLights_Middle_R_Button, bool)
							0 (&gt;L:var_CabinLights_Aft_L_Button, bool)
							0 (&gt;L:var_CabinLights_Aft_R_Button, bool)
							0 (&gt;L:var_BaggageLights_Button, bool)
							0 (&gt;L:var_AccessLights_Button, bool)

						}
						els{

							(&gt;B:FUEL_1_Condition_lever_Cut_Off)
							0 (&gt;L:var_lastFuelAvailable, number)
							0 (&gt;L:var_NgAtFuelIntroduction, number)
							(A:ENG N2 RPM:1, PERCENT) (&gt;L:BKSQ_TBM_NG, number)

							0 (&gt;L:var_crashbar, bool)
							0 (&gt;L:BKSQ_SourceSwitch, number)
							0 (&gt;L:BKSQ_GeneratorSwitch, number)

							0 (&gt;L:var_EFIS_PowerSwitch, bool)
    						0 (&gt;A:CIRCUIT SWITCH ON:@EADICircuit, bool)
    						0 (&gt;A:CIRCUIT SWITCH ON:@EHSICircuit, bool)
    						0 (&gt;A:CIRCUIT SWITCH ON:@RemoteCompassCircuit, bool)
							0 (&gt;A:CIRCUIT SWITCH ON:@RMICircuit, bool)
							0 (&gt;A:CIRCUIT SWITCH ON:@ADI2Circuit, bool)
							0 (&gt;A:CIRCUIT SWITCH ON:@HSI2Circuit, bool)

							0 (&gt;L:var_AutoFuelSelectorSwitch, bool)
							0 (&gt;L:BKSQ_fuelPumpSwitch, Number)
							0 (&gt;A:CIRCUIT SWITCH ON:@FuelSelectorCircuit, bool)
							0 (&gt;L:var_oxygenMaster, bool)

    						0 (&gt;L:BKSQ_AutopilotMasterSwitch, number)
							0 (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
							1 (&gt;L:var_trimsDisabled, bool)

							0 1 (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET) 0 (&gt;L:var_bleedState, number)

							0 (&gt;L:BKSQ_IgnitionSwitch, number)
							0 (&gt;K:TURBINE_IGNITION_SWITCH_SET1)
							0 (&gt;A:CIRCUIT SWITCH ON:@IgnitionCircuit, bool)
							0 (&gt;L:var_airconState, number)

							0 (&gt;L:var_RadioMasterSwitch, bool)
							4 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:10, Bool) (L:var_RadioMasterSwitch, bool) != if{
								10 4 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							5 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:11, Bool) (L:var_RadioMasterSwitch, bool) != if{
								11 5 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							6 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:12, Bool) (L:var_RadioMasterSwitch, bool) != if{
								12 6 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:13, Bool) (L:var_RadioMasterSwitch, bool) != if{
								13 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:14, Bool) (L:var_RadioMasterSwitch, bool) != if{
								14 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}

							0 (&gt;L:var_InstrumentLightingKnob, number)
							0 (&gt;L:var_PanelLightingKnob, number)
							0 (&gt;L:var_YokeLightKnob_L, number)
							0 (&gt;L:var_YokeLightKnob_R, number)
							0 (&gt;L:var_EmergencyLightsKnob, number)
							0 (&gt;L:var_ReadingLightSwitch_L, bool)
							0 (&gt;L:var_ReadingLightSwitch_R, bool)
							0 (&gt;L:var_CabinLights_Middle_L_Button, bool)
							0 (&gt;L:var_CabinLights_Middle_R_Button, bool)
							0 (&gt;L:var_CabinLights_Aft_L_Button, bool)
							0 (&gt;L:var_CabinLights_Aft_R_Button, bool)
							0 (&gt;L:var_BaggageLights_Button, bool)
							0 (&gt;L:var_AccessLights_Button, bool)

						}

						@LoadState

					}
					els{ 
						(L:var_startupCount, Number) 1 + (&gt;L:var_startupCount, Number)
					}
				} 
				els{
					
					@SaveState

				}
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Engine Exceedancs and RNAV OBS consistency-->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(A:GENERAL ENG STARTER ACTIVE:1,bool) if{
					(L:var_starterInUseSeconds, number) 1 (A:ENG COMBUSTION:1, bool) 0.95 * - + (&gt;L:var_starterInUseSeconds, number)

					(L:var_starterInUseSeconds, number) 120 &gt; if{
						@HOT_BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@StarterMotorCircuit, Bool) if{ @StarterMotorCircuit @HOT_BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE) }
					}
				}
				els{
					(L:var_starterInUseSeconds, number) 1 - 0 max (&gt;L:var_starterInUseSeconds, number)
				}


				(A:ENG ON FIRE:1, bool) (A:ENG COMBUSTION:1, bool) and (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)

				(L:BKSQ_TBM_TQ, number) 2400 / 1 - 0 max 5.0 * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)
				(A:PROP RPM:1, rpm) 2100 / 1 - 0 max 0.5 * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)
				(L:BKSQ_TBM_ITT, number) 860 / 1 - 0 max 5.0 * (A:GENERAL ENG STARTER ACTIVE:1,bool) ! * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)
				(L:BKSQ_TBM_ITT, number) 1090 &gt; 20 * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)
				(L:BKSQ_TBM_NG, number) 105 / 1 - 0 max 2.5 * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)
				(A:ENG OIL TEMPERATURE:1, CELSIUS) 115 / 1 - 0 max 0.5 * (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)

				@SurfaceFodAmount   (A:PROP RPM:1, rpm) 1000 / 3.5 pow *    1 (L:var_inertSepWindup, number) - *    0.0025 *    (L:var_engineDamage, number) + (&gt;L:var_engineDamage, number)


				(L:var_engineDamage, number) 100 &gt;= (A:ENG FAILED:1,bool) ! and if{ 
					(&gt;K:TOGGLE_ENGINE1_FAILURE)
				}

			</UPDATE_CODE>
		</UseTemplate>

		<!-- Oxygen & GPS assurances -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(L:var_oxygenIsolationValve, bool) ! (L:var_oxygenMaster, bool) and if{
					(L:var_passengerOxygen, bool) (L:var_cabinPressurizationAltitude, ft) 14150 &gt; or if{
						(L:var_oxygenPressure,number) (A:PRESSURE ALTITUDE,feet) 175000 / @PassengerPayloadWeight 170 / * - (&gt;L:var_oxygenPressure,number)
						(L:var_oxygenPressure,number) 230 &gt; (&gt;L:BKSQ_OXYGEN_FLOW_SOUND, bool)
					}
					els{
						0 (&gt;L:BKSQ_OXYGEN_FLOW_SOUND, bool)
					}

					(L:var_pilotOxygen, bool) if{
						(L:var_oxygenPressure,number) (A:PRESSURE ALTITUDE,feet) 175000 / @PilotWeight 170 / * - (&gt;L:var_oxygenPressure,number)
						(L:var_oxygenPressure,number) 230 &gt; (&gt;L:BKSQ_PILOT_MASK_SOUND, bool)
					}
					els{
						0 (&gt;L:BKSQ_PILOT_MASK_SOUND, bool)
					}

					(L:var_coPilotOxygen, bool) if{
						(L:var_oxygenPressure,number) (A:PRESSURE ALTITUDE,feet) 175000 / @CopilotWeight 170 / * - (&gt;L:var_oxygenPressure,number)
						(L:var_oxygenPressure,number) 230 &gt; (&gt;L:BKSQ_COPILOT_MASK_SOUND, bool)
					}
					els{
						0 (&gt;L:BKSQ_COPILOT_MASK_SOUND, bool)
					}
				}
				els{
					0 (&gt;L:BKSQ_OXYGEN_FLOW_SOUND, bool)
					0 (&gt;L:BKSQ_PILOT_MASK_SOUND, bool)
					0 (&gt;L:BKSQ_COPILOT_MASK_SOUND, bool)
				}


				(* TDS Automatic Integration *)
				(L:TDSGTNXI_INSTALLED, bool) if{
					1 (&gt;L:GTN750_INT_HIDDEN, bool)
				}
				els{
					0 (&gt;L:GTN750_INT_HIDDEN, bool)
				}
			</UPDATE_CODE>
		</UseTemplate>



		<!-- Pressurization Controller -->

		<!-- A:CIRCUIT ON:@BleedAirCircuit, bool -->		
		<!-- L:var_pressurizationTestMode, bool -->
		<!-- L:var_pressurizationClimbRate, number -->
		<!-- L:var_cabinClimbRate, ft/min -->
		<!-- L:var_cabinPressurizationAltitude, ft -->
		<!-- L:var_cabinPressureDifferential, psi -->
		<!-- A:PRESSURIZATION CABIN ALTITUDE GOAL, FT -->
		<!-- A:PRESSURIZATION DUMP SWITCH, bool -->

		<!-- P = P₀ exp(-gM(h-h₀)/(RT)) -->
		<!-- Pressure Differential (PSI) = 1013.2*e^((-9.806*0.02896*0.3048*(ALTITUDE - CABIN_ALTITUDE)) / (8.314*273.15))  -->
		<!-- (L:var_cabinPressurizationAltitude, ft) -9.806 * 0.02896 * 0.3048 *   8.314 273.15 * / exp 1013.2 * (A:AMBIENT_PRES_MBAR, Float) - 0.0145 * -->


		<!-- Bleed Air Setting -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(L:var_bleedState, number) 0 == (L:var_BleedAirOvertemp, bool) or if{
					0 1 (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET)
					0 (&gt;A:CIRCUIT SWITCH ON:@BleedAirCircuit, bool)
				}
				els{
					(L:var_bleedState, number) 1 == if{
						1 1 (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET)
						1 (&gt;A:CIRCUIT SWITCH ON:@BleedAirCircuit, bool)
					}
					els{
						1 1 (&gt;K:2:ENGINE_BLEED_AIR_SOURCE_SET)
						1 (&gt;A:CIRCUIT SWITCH ON:@BleedAirCircuit, bool)
					}
				}
			</UPDATE_CODE>
		</UseTemplate>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>10</FREQUENCY>
			<UPDATE_CODE>

				(A:EXIT OPEN:0, Percent) 1 &gt; (A:EXIT OPEN:1, Percent) 1 &gt; or if{
					(A:PRESSURE ALTITUDE, FEET) (L:var_cabinPressurizationAltitude, ft) - 5 *
					(&gt;L:var_cabinClimbRate, ft/min)
				}
				els{
					(A:SIM ON GROUND, bool) (A:CIRCUIT ON:@BleedAirCircuit, bool) and
					(L:var_PressurizationDump, bool)
					or
					(L:var_cabinPressureDifferential, psi) 6.55 &gt; (L:var_cabinSafetyValve, bool) ! and
					(L:var_cabinPressureDifferential, psi) 6.20 &gt; (L:var_cabinSafetyValve, bool) and or
					or
					(L:var_cabinPressureDifferential, psi) -0.3 &lt; (L:var_cabinSafetyValve, bool) ! and
					(L:var_cabinPressureDifferential, psi) -0.1 &lt; (L:var_cabinSafetyValve, bool) and or
					or
					(L:var_pressurizationSafetyValveFailure, bool) !
					and
					if{
						1 (&gt;L:var_cabinSafetyValve, bool)
						(A:PRESSURE ALTITUDE, FEET) (L:var_cabinPressurizationAltitude, ft) - 1.5 *
						(&gt;L:var_cabinClimbRate, ft/min)
					}
					els{
						0 (&gt;L:var_cabinSafetyValve, bool)

						(L:var_pressurizationGoal, FT) (A:PRESSURE ALTITUDE,feet) min (L:var_cabinPressurizationAltitude, ft) &gt;
						(A:CIRCUIT ON:@BleedAirCircuit, bool) ! (L:var_bleedState, number) 0 == (L:BKSQ_TBM_NG, number) 30 &lt; or or
						or 
						(L:var_cabinPressureDifferential, psi) 6.20 &gt;
						or
						if{
							1 (&gt;L:var_cabinOutflowValve, bool)

							(L:var_pressurizationOutflowValveFailure, bool) ! if{
								(L:var_cabinPressureDifferential, psi) 6.70 &gt;
								(A:CIRCUIT ON:@BleedAirCircuit, bool) ! (L:var_bleedState, number) 0 == (L:BKSQ_TBM_NG, number) 30 &lt; or or
								or
								if{
									(A:PRESSURE ALTITUDE,feet) (L:var_cabinPressurizationAltitude, ft) - 0.5 *
									(L:var_pressurizationClimbRate, number) 2 * min (L:var_pressurizationClimbRate, number) -2 * max
									(&gt;L:var_cabinClimbRate, ft/min)
								}
								els{
									(L:var_pressurizationGoal, FT) (A:PRESSURE ALTITUDE,feet) min (L:var_cabinPressurizationAltitude, ft) - 0.5 *
									(L:var_pressurizationClimbRate, number) min (L:var_pressurizationClimbRate, number) -1 * max
									(&gt;L:var_cabinClimbRate, ft/min)
								}
							}
							els{
								-100 (&gt;L:var_cabinClimbRate, ft/min)
							}
						}
						els{
							0 (&gt;L:var_cabinOutflowValve, bool)

							(L:var_pressurizationInflowFailure, bool) ! (L:var_ecsFault, bool) ! (L:var_pilotDoorLatchingFailure, bool) ! (L:var_aftDoorLatchingFailure, bool) ! and and and if{
								(L:var_pressurizationGoal, FT) (A:PRESSURE ALTITUDE,feet) min (L:var_cabinPressurizationAltitude, ft) -
								(L:var_bleedState, number) 1 == 8.0 *
								(L:var_bleedState, number) 2 == 12.0 *
								+
								100 (L:XMLVAR_Cabin_Air_3_Position, number) - 100 / *
								(A:CIRCUIT ON:@BleedAirCircuit, bool) (L:BKSQ_TBM_NG, number) 30 &gt; and
								*
								*

								(L:var_pressurizationClimbRate, number) min (L:var_pressurizationClimbRate, number) -1 * max
								(&gt;L:var_cabinClimbRate, ft/min)
							}
							els{
								(A:PRESSURE ALTITUDE, FEET) (L:var_cabinPressurizationAltitude, ft) - 0.025 *
								(&gt;L:var_cabinClimbRate, ft/min)
							}
						}
					}
				}

				(L:var_cabinPressurizationAltitude, ft) (L:var_cabinClimbRate, ft/min) 600 / + (&gt;L:var_cabinPressurizationAltitude, ft)

				(L:var_cabinPressurizationAltitude, ft) -9.806 * 0.02896 * 0.3048 *   8.314 273.15 * / exp 1013.2 * (A:BAROMETER PRESSURE, Millibars) - 0.0145 * (&gt;L:var_cabinPressureDifferential, psi)

			</UPDATE_CODE>
		</UseTemplate>
		<!-- Divide Cabin Rate by 600 for realtime -->



		<!-- Cabin Temperature System -->
		<!-- 
			Heating
				Active Heating
				Passive Heating
			Cooling
				Active Cooling
				Passive Cooling
		 -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(L:var_airconState, number) 2 ==   (L:var_CabinTemperatureKnob, number) (L:var_cabinTemperature, number) 3 + &lt;   and
				(L:BKSQ_StarterSwitch, bool) ! (L:BKSQ_GeneratorSwitch, number) 1 == (L:BKSQ_SourceSwitch, number) 2 == or  (L:var_airframeDeice, bool) !  (A:PROP DEICE SWITCH:1, bool) !  and and and and
				(&gt;A:CIRCUIT SWITCH ON:@AirConditionerCircuit, bool)

				(L:var_cabinTemperatureKnob, number) (L:var_cabinTemperature, number) &gt;= if{
					(A:CIRCUIT ON:@BleedAirCircuit, bool) (L:var_airconState, number) 0 &gt; (L:var_ecsFault, bool) ! (L:BKSQ_TBM_NG, number) 30 &gt; and and and if{

						(A:AMBIENT TEMPERATURE, Fahrenheit)
						98 +   (L:var_bleedState, number) 2 == 79 * +
						(L:var_CabinTemperatureKnob, number) min

						(&gt;L:var_cabinVentTemperature, number)
					}
					els{
						(A:AMBIENT TEMPERATURE, Fahrenheit)
						3 (E:TIME OF DAY, enum) - 2 / (A:AMBIENT TEMPERATURE, Fahrenheit) 60 - * 0 max
						@RamAirCoolingSpeed (A:RELATIVE WIND VELOCITY BODY Z, feet per second) 0.592484 * - @RamAirCoolingSpeed / 0 max   1 (A:EXIT OPEN:0, bool) 0.5 * - *      1 (A:EXIT OPEN:1, bool) 0.7 * - *     1 (L:var_airconState, number) 0 &gt; 0.9 * - *    *
						+

						(&gt;L:var_cabinVentTemperature, number)
					}
				}
				(L:var_cabinTemperatureKnob, number) (L:var_cabinTemperature, number) &lt; if{
					(A:CIRCUIT ON:@BleedAirCircuit, bool) (A:CIRCUIT ON:@AirConditionerCircuit, bool) (L:var_airconState, number) 2 == (L:var_ecsFault, bool) ! (L:BKSQ_TBM_NG, number) 55 &gt; and and and and 
					if{

						(A:AMBIENT TEMPERATURE, Fahrenheit)
						23 -
						(L:var_CabinTemperatureKnob, number) max

						(&gt;L:var_cabinVentTemperature, number)
					}
					els{
						(A:AMBIENT TEMPERATURE, Fahrenheit)
						3 (E:TIME OF DAY, enum) - 2 / (A:AMBIENT TEMPERATURE, Fahrenheit) 60 - * 0 max
						@RamAirCoolingSpeed (A:RELATIVE WIND VELOCITY BODY Z, feet per second) 0.592484 * - @RamAirCoolingSpeed / 0 max   1 (A:EXIT OPEN:0, bool) 0.5 * - *      1 (A:EXIT OPEN:1, bool) 0.7 * - *     1 (L:var_airconState, number) 0 &gt; 0.9 * - *    *
						+
						
						(&gt;L:var_cabinVentTemperature, number)
					}
				}

				(L:var_cabinVentTemperature, number) (L:var_cabinTemperature, number) - @CabinTempTimeConstant (A:CIRCUIT ON:@BleedAirCircuit, bool) (L:var_airconState, number) 0 &gt; and @CabinTempTimeConstant 0.3 * *  -  /   (L:var_cabinTemperature, number) +
				(&gt;L:var_cabinTemperature, number)

			</UPDATE_CODE>
		</UseTemplate>

		<!-- Torque Limiter

			Needs: Table of Throttle Position to Fuel Flow
			Efficiency Constant ~= 0.64
			Sets FF via throttle position until...

			(FuelFlow(Throttle Pos) / EfficiencyConstant * 5252 / RPM) - ((2000 - RPM) * 1.22)   >    1900

			Then...

			FuelFlow = (EfficiencyConstant * RPM * (1900 - (1.22 * (RPM - 2000)) / 5252

			Throttle  PHH
			0			22.25 = 176.59
			10			28.85 = 228.97
			20			32.15 = 255.16
			30			35.80 = 284.13
			40			39.85 = 316.27
			50			44.35 = 351.99
			60			49.44 = 392.39
			70			55.01 = 436.59
			80			61.30 = 486.52
			90			67.47 = 535.48
			100			76.60 = 607.95

			FuelFlow(ThrottlePos) = 0.929467 * ThrottlePos^1.31531 + 195.914

		 -->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>60</FREQUENCY>
			<UPDATE_CODE>
				@ThrottleToFuelFlow
				@EfficiencyConstant /
				5252 *
				(A:PROP RPM:1, RPM) /
				@MaxPropRpm (A:PROP RPM:1, RPM) - @PropTorqueAdjustment * -

				1.1 @DensityAltitude 31000 / 0.22 * -
    			*

				@MaxTorqueLimit &gt; (A:PROP RPM:1, RPM) 1500 &gt; (L:var_850Mode, bool) ! (L:var_TorqueLimitingFailure, bool) or   and and  if{
					@MaxTorqueToFuelFlow 100 (L:var_engineDamage, number) - 10 / 1.0 min * (&gt;A:TURB ENG CORRECTED FF:1, Pounds per hour)
				}
				els{
					@ThrottleToFuelFlow  100 (L:var_engineDamage, number) - 10 / 1.0 min * (&gt;A:TURB ENG CORRECTED FF:1, Pounds per hour)
				}
			</UPDATE_CODE>
		</UseTemplate>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>5</FREQUENCY>
			<UPDATE_CODE>
				(L:var_fuelControlFailure, bool) ! if{
					(A:TURB ENG CORRECTED FF:1, Pounds per hour) (&gt;L:var_lastFuelFlowBeforeFailure, number)
				}
			</UPDATE_CODE>
		</UseTemplate>




		<!-- Terrain Warning -->

		<!-- Warning Function:  1360.16 * VERTICALSPEED^0.219264 - 6384.17   >  ALT -->
		<!-- Caution Function:  2662.23 * VERTICALSPEED^0.184989 - 9787.37   >  ALT -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(L:var_AutopilotStartupCounter, number) 0 == if{
					(L:var_TerrainTest, number)	0 &gt; if{
						(L:var_TerrainTest, number) 1 - (&gt;L:var_TerrainTest, number)

						(L:var_TerrainTest, number) 21 &gt; (L:var_TerrainTest, number) 27 &lt; and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and (&gt;L:var_TerrainCaution, bool)
						(L:var_TerrainTest, number) 14 &gt; (L:var_TerrainTest, number) 18 &lt; and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and (&gt;L:var_TerrainWarning, bool)
						(L:var_TerrainTest, number) 9 &gt; (L:var_TerrainTest, number) 12 &lt; and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and 2 * (&gt;L:var_Terrain500, bool)
					}
					els{
						(A:VERTICAL SPEED, feet per minute) -1 *  0.219264 pow 1360.16 * 6384.17 -   (A:PLANE ALT ABOVE GROUND, feet)  &gt;    (A:SIM ON GROUND, bool) !  (L:var_TerrainInhibited, bool) ! and and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and (&gt;L:var_TerrainWarning, bool)

						(A:VERTICAL SPEED, feet per minute) -1 *  0.184989 pow 2662.23 * 9787.37 -   (A:PLANE ALT ABOVE GROUND, feet)  &gt;    (A:SIM ON GROUND, bool) !  (L:var_TerrainInhibited, bool) ! and and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and  (L:var_TerrainWarning, bool) ! and (&gt;L:var_TerrainCaution, bool)

						
						(A:VERTICAL SPEED,ft/min) 100 &lt;  (A:PLANE ALT ABOVE GROUND, feet) 470 - abs 50 &lt; and    (A:SIM ON GROUND, bool) !  (L:var_TerrainInhibited, bool) ! and and (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) and (L:var_Terrain500, number) 0 == and if{
							2 (&gt;L:var_Terrain500, number)
						}
						els{
							(A:PLANE ALT ABOVE GROUND, feet) 470 - abs 50 &gt; if{
								0 (&gt;L:var_Terrain500, number)
							}
							els{
								1 (&gt;L:var_Terrain500, number)
							}

						}
					}
				}
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Disconnect Taxilight when gear up -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(A:GEAR LEFT POSITION, percent) 99 &gt; @BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@TAXILIGHT_INTERMEDIATE, Bool) != if{
					@BUS3 @TAXILIGHT_INTERMEDIATE (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Gear Warning -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(A:GENERAL ENG THROTTLE LEVER POSITION:1, percent) 17 &lt;
				(A:FLAPS HANDLE INDEX, number) 1 &gt;
				or
				(A:GEAR LEFT POSITION, percent) 99 &lt;
				and

				(L:var_HornTest, bool) or
				(&gt;L:var_GearWarningHorn, bool)
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Altitude Alerter & Autopilot Startup Timer & Analog Pull Handle Updater-->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>

				(A:INDICATED ALTITUDE:1, FEET) (A:AUTOPILOT ALTITUDE LOCK VAR, FEET) - abs 200 &gt;
				(A:INDICATED ALTITUDE:1, FEET) (A:AUTOPILOT ALTITUDE LOCK VAR, FEET) - abs 1000 &lt;
				and

				(A:AUTOPILOT ALTITUDE LOCK VAR, FEET) (A:INDICATED ALTITUDE:1, FEET) - sign
				(A:VERTICAL SPEED, feet per second) sign
				==
				and

				(A:VERTICAL SPEED, feet per second) abs 60 * 75 &gt;
				and

				(&gt;L:var_altitudeAlert, number)



				(A:CIRCUIT ON:@AutopilotCircuit, bool) if{
					(L:var_AutopilotStartupCounter, number) -- 0 max (&gt;L:var_AutopilotStartupCounter, number) 
				}
				els{
					(A:CIRCUIT ON:@AutopilotCircuit, bool) ! (L:var_AutopilotStartupCounter, number) 15 != if{
						10 (A:SIM ON GROUND, bool) 35 * + (&gt;L:var_AutopilotStartupCounter, number)
						0 (&gt;K:AP_MAX_BANK_SET)
						0 (&gt;L:var_autopilotSoftRideMode, bool)
						0 (&gt;L:var_TerrainInhibited, bool)
					}
				}


				(A:FLAPS HANDLE INDEX:1, number) 0 != (L:var_850Mode, bool) and if{
					0 (&gt;L:var_850Mode, number)
				}


				(L:XMLVAR_Cabin_Air_2_Position, number) 70 &gt; (A:ALTERNATE STATIC SOURCE OPEN, Bool) ! if{
					(&gt;K:TOGGLE_ALTERNATE_STATIC)
				}


				(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (&gt;K:TOGGLE_MASTER_BATTERY) }
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Starting and Ignition Controller and Avionics -->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>4</FREQUENCY>
			<UPDATE_CODE>
				(L:BKSQ_StarterSwitch, bool) (L:BKSQ_GeneratorSwitch, number) 2 != and (&gt;K:STARTER1_SET)

				(L:BKSQ_IgnitionSwitch, number) 2 == (L:BKSQ_IgnitionSwitch, number) 1 == (A:GENERAL ENG STARTER ACTIVE:1, bool) and or d
				(&gt;K:TURBINE_IGNITION_SWITCH_SET1)
				(&gt;A:CIRCUIT SWITCH ON:@IgnitionCircuit, bool)


				(L:BKSQ_AutopilotMasterSwitch, number) 0 &gt; (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
				(L:BKSQ_AutopilotMasterSwitch, number) 2 &lt; (&gt;L:var_trimsDisabled, bool)

				4 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:10, Bool) (L:var_RadioMasterSwitch, bool) != if{
					10 4 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
				5 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:11, Bool) (L:var_RadioMasterSwitch, bool) != if{
					11 5 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
				6 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:12, Bool) (L:var_RadioMasterSwitch, bool) != if{
					12 6 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
				7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:13, Bool) (L:var_RadioMasterSwitch, bool) != if{
					13 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
				8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:14, Bool) (L:var_RadioMasterSwitch, bool) != if{
					14 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Windshield Heat Controller -->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(L:var_windshieldHeatSwitch_L, bool) (&gt;A:CIRCUIT SWITCH ON:@WindshieldHeat_LCircuit, bool)
				(L:var_windshieldHeatSwitch_R, bool) (&gt;A:CIRCUIT SWITCH ON:@WindshieldHeat_RCircuit, bool)
				or

				(A:CIRCUIT ON:@WindshieldHeat_LCircuit, bool)
				(A:CIRCUIT ON:@WindshieldHeat_RCircuit, bool)
				(L:var_AirFlowSelectorKnob, number) 40 &lt;
				or or 

				or

				(&gt;K:WINDSHIELD_DEICE_SET)
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Aux Fuel Pump Controller-->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(L:var_fuelPumpNormCycle, bool) ! (&gt;L:var_fuelPumpNormCycle, bool)

				(L:BKSQ_fuelPumpSwitch, Number) 2 == (A:GENERAL ENG FUEL PRESSURE:1, psi) 4.75 &lt; and (L:var_fuelPumpNormCycle, bool) and
				(L:BKSQ_fuelPumpSwitch, Number) 1 == or
				(&gt;A:CIRCUIT SWITCH ON:@BoostPumpCircuit, bool)
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Structural, Propeller, and Windshield Deice Controller -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(L:var_airframeDeice, bool) (E:LOCAL TIME, seconds) 67 % 30 &lt; and
				(L:var_airframeDeiceFailure, bool) ! and
				if{
					(A:STRUCTURAL DEICE SWITCH, Bool) ! if{ (&gt;K:TOGGLE_STRUCTURAL_DEICE) }
				}
				els{
					(A:STRUCTURAL DEICE SWITCH, Bool) if{ (&gt;K:TOGGLE_STRUCTURAL_DEICE) }
				}

				(A:PROP DEICE SWITCH:1, bool) (E:LOCAL TIME, seconds) 90 % 30 &lt; and (&gt;A:CIRCUIT SWITCH ON:@PropDeiceCircuit, bool)

				(A:CIRCUIT ON:@WindshieldHeat_LCircuit, bool) (A:CIRCUIT ON:@WindshieldHeat_RCircuit, bool) or
				(&gt;K:WINDSHIELD_DEICE_SET)
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Inertial Separator -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>6</FREQUENCY>
			<UPDATE_CODE>
				(L:var_InertialSeparatorSwitch, bool) (L:var_inertSepWindup, number) 1 &lt; and (L:var_InertialSeparatorSwitch, bool) ! (L:var_inertSepWindup, number) 0 &gt; and or
				(&gt;A:CIRCUIT SWITCH ON:@InertialSeparatorCircuit, bool)

				(A:CIRCUIT ON:@InertialSeparatorCircuit, bool) if{
					(L:var_InertialSeparatorSwitch, bool) if{
						(L:var_inertSepWindup, number) 0.008 + 1 min (&gt;L:var_inertSepWindup, number)
					}
					els{
						(L:var_inertSepWindup, number) 0.008 - 0 max (&gt;L:var_inertSepWindup, number)
					}
				}
				
				(L:var_inertSepWindup, number) 16384 * (&gt;K:ANTI_ICE_GRADUAL_SET_ENG1)
			</UPDATE_CODE>
		</UseTemplate>

		<!-- Auto Fuel Selector -->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(A:CIRCUIT ON:@FuelSelectorCircuit, bool) (A:FUEL TANK SELECTOR:1, enum) 0 != and if{

					(A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; (A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) 9.1 &lt; ! and (A:FUEL TANK SELECTOR:1, enum) 19 == and
					(A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) 9.1 &lt; (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; ! and (A:FUEL TANK SELECTOR:1, enum) 20 == and
					(L:var_fuelSelectTimer, number) 0 &lt;=
					or or
					if{

						(A:FUEL TANK SELECTOR:1, enum) 19 == if{
							(A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) 9.1 &gt; if{
								(&gt;K:FUEL_SELECTOR_RIGHT_MAIN)
							}
						}
						els{
							(A:FUEL TANK SELECTOR:1, enum) 20 == if{
								(A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &gt; if{
									(&gt;K:FUEL_SELECTOR_LEFT_MAIN)
								}
							}
						}


						(A:SIM ON GROUND, bool) (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; and or if{
							75 (&gt;L:var_fuelSelectTimer, number)
						}
						els{
							600 (&gt;L:var_fuelSelectTimer, number)
						}

					}
					els{
						(L:var_fuelSelectTimer, number) 1 - (&gt;L:var_fuelSelectTimer, number)
					}
				}
			</UPDATE_CODE>
		</UseTemplate>


		<!-- Pulse Lights -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(A:CIRCUIT ON:@PulseLightsCircuit, bool) if{
					(L:var_PulseLightState, number) 1 &gt;= if{
						0 (&gt;L:var_PulseLightState, number)
					}
					els{
						1 (&gt;L:var_PulseLightState, number)
					}
				}
				els{
					2 (&gt;L:var_PulseLightState, number)
				}

				(L:var_PulseLightState, number) 2 != if{
					@BUS2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@LANDINGLIGHTS_INTERMEDIATE_L, Bool) (L:var_PulseLightState, number) !=  if{
						@LANDINGLIGHTS_INTERMEDIATE_L @BUS2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}

					@BUS2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@LANDINGLIGHTS_INTERMEDIATE_R, Bool) (L:var_PulseLightState, number) ==  if{
						@LANDINGLIGHTS_INTERMEDIATE_R @BUS2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				}
				els{
					@BUS2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@LANDINGLIGHTS_INTERMEDIATE_L, Bool) ! if{
						@LANDINGLIGHTS_INTERMEDIATE_L @BUS2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}

					@BUS2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@LANDINGLIGHTS_INTERMEDIATE_R, Bool) ! if{
						@LANDINGLIGHTS_INTERMEDIATE_R @BUS2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				}
			</UPDATE_CODE>
		</UseTemplate>

		

		<!-- Source and Generator Controller -->

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>5</FREQUENCY>
			<UPDATE_CODE>

				@HOT_BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@BATTERY, Bool) (L:var_crashbar, bool) != if{
					@BATTERY @HOT_BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}

				@BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@MAIN_DISTRIBUTION, Bool) (L:BKSQ_SourceSwitch, number) 1 == != (L:var_EssentialBusTieSwitch, bool) ! and if{
					@MAIN_DISTRIBUTION @BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
				}

				(L:BKSQ_SourceSwitch, number) 2 == 1 (&gt;K:2:SET_EXTERNAL_POWER)



				(L:BKSQ_GeneratorSwitch, number) 1 == (L:var_MainGeneratorResetButton, bool) ! and   (L:var_MainGeneratorFailure, bool) ! (L:var_var_MainGeneratorResetTimer, number) 0 &gt; or and (A:GENERAL ENG MASTER ALTERNATOR:1, bool) != if{ (&gt;K:TOGGLE_ALTERNATOR1) }
				(L:BKSQ_GeneratorSwitch, number) 2 == (L:var_StandbyGeneratorResetButton, bool) ! and   (L:var_StandbyGeneratorFailure, bool) ! (L:var_var_StandbyGeneratorResetTimer, number) 0 &gt; or and (A:GENERAL ENG MASTER ALTERNATOR:2, bool) != if{ (&gt;K:TOGGLE_ALTERNATOR2) }


				(L:var_RadioMasterSwitch, bool) (A:CIRCUIT ON:@GroundClearanceCircuit, bool) and
				@RADIOESS1 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@Com1Circuit, bool) and
				@BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@Com1Circuit, Bool)
				!= if{
					@Com1Circuit @BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE)
				}
					

				(L:var_radarMode, number) 3 &gt; if{
					@HOT_BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@WeatherRadarControllerCircuit, Bool) ! if{ @WeatherRadarControllerCircuit @HOT_BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE) }
				}
				els{
					@HOT_BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@WeatherRadarControllerCircuit, Bool) if{ @WeatherRadarControllerCircuit @HOT_BATTERY (&gt;K:2:ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE) }
				}

				(L:var_var_MainGeneratorResetTimer, number) 1 - 0 max (&gt;L:var_var_MainGeneratorResetTimer, number)
				(L:var_var_StandbyGeneratorResetTimer, number) 1 - 0 max (&gt;L:var_var_StandbyGeneratorResetTimer, number)

			</UPDATE_CODE>
		</UseTemplate>


		<!-- Custom Starter Motor Circuit Power Setting -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>20</FREQUENCY>
			<UPDATE_CODE>
				18 (L:BKSQ_TBM_NG, number) - 0.18 / 0 max 100 min @StarterMotorCircuit (&gt;K:2:ELECTRICAL_CIRCUIT_POWER_SETTING_SET)
			</UPDATE_CODE>
		</UseTemplate>


		<!-- GPS & EFIS Source Consistency -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(L:var_radio1Mode, Number) 2 == (A:GPS DRIVES NAV1, Bool) and if{ (&gt;K:TOGGLE_GPS_DRIVES_NAV1) }

				(L:EFIS_NavigationSource, Number) 2 != (L:XMLVAR_GPS_DISABLED_AS530_1, bool) and if{
					(L:EFIS_NavigationSource, Number) 1 + (&gt;K:AP_NAV_SELECT_SET)
				}
			</UPDATE_CODE>
		</UseTemplate>
			<!-- 
				(L:XMLVAR_GPS_DISABLED_AS530_1, bool) if{
					(A:GPS DRIVES NAV1, Bool) (L:EFIS_NavigationSource, Number) 2 == (L:var_radio1Mode, Number) 2 != and != if{ (&gt;K:TOGGLE_GPS_DRIVES_NAV1) }
				}
				els{
					(L:AS530_CDI_Source_1, Bool) (L:EFIS_NavigationSource, Number) 2 == (L:var_radio1Mode, Number) 2 != and != if{ (&gt;H:AS530_1_CDI_Push) }
				}
		 	-->




	    <!-- Persistent Indicated Airspeed -->
		<!-- Persistent Indicated Airspeed Seasoned To Taste for New Wind Sounds -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>60</FREQUENCY>
			<UPDATE_CODE>
				(A:AIRSPEED TRUE, knots) 0.0023769 (A:AMBIENT DENSITY, slug per cubic foot) / sqrt /
				d (&gt;L:BKSQ_PersistentIndicatedAirspeed, knots)
				1.075 * 
				(&gt;L:BKSQ_PersistentIndicatedAirspeedSound, knots)
			</UPDATE_CODE>
		</UseTemplate>

 		<!-- WT GNS Disable Consistency -->
 		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(L:var_radio1Mode, number) 0 != (&gt;L:TDSGTNXI_INACTIVEVAR, bool)
				(L:var_radio1Mode, number) 1 != (&gt;L:XMLVAR_GPS_DISABLED_AS530_1, bool)
				(L:var_radio2Mode, number) 0 != (&gt;L:XMLVAR_GPS_DISABLED_AS530_2, bool)
			</UPDATE_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_FAILURE_DATABUS">
		</UseTemplate>

	</Component>








	<Component ID="RUDDERPEDALS">

		<UseTemplate Name="ASOBO_HANDLING_RudderPedals_Template">
			<RUDDERPEDALS_TYPE>MIXED</RUDDERPEDALS_TYPE>
			<NODE_ID_L_BRAKE_1>HANDLING_RudderPedals_Brake_1_1</NODE_ID_L_BRAKE_1>
			<NODE_ID_L_BRAKE_2>HANDLING_RudderPeddals_Brake_2_1</NODE_ID_L_BRAKE_2>
			<NODE_ID_R_BRAKE_1>HANDLING_RudderPedals_Brake_1_2</NODE_ID_R_BRAKE_1>
			<NODE_ID_R_BRAKE_2>HANDLING_RudderPeddals_Brake_2_2</NODE_ID_R_BRAKE_2>
		</UseTemplate>
	
	</Component>


	<Component ID="TrimIndiactors">

		<Component ID="HANDLING_Wheel_ElevatorTrim" NODE="HANDLING_Wheel_ElevatorTrim">
			<UseTemplate Name="ASOBO_HANDLING_Wheel_ElevatorTrim_Template">
				<PART_ID>HANDLING_Wheel_ElevatorTrim</PART_ID>
				<HIGHLIGHT_NODE_ID>HANDLING_Wheel_ElevatorTrim_Visual</HIGHLIGHT_NODE_ID>
				<WWISE_EVENT_1>elevator_trim_lever_01</WWISE_EVENT_1>
				<WWISE_EVENT_2>elevator_trim_lever_02</WWISE_EVENT_2>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Wheel_ElevatorTrim_Indicator" NODE="HANDLING_Wheel_ElevatorTrim_Indicator">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HANDLING_Wheel_ElevatorTrim_Indicator</NODE_ID>
				<ANIM_NAME>HANDLING_Wheel_ElevatorTrim_Indicator</ANIM_NAME>
				<PART_ID>HANDLING_Wheel_ElevatorTrim_Indicator</PART_ID>
				<ANIM_CODE>
					(A:ELEVATOR TRIM PCT, PERCENT OVER 100) -50 * 50 +
				</ANIM_CODE>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Switch_RudderTrim_Indicator" NODE="HANDLING_Switch_RudderTrim_Indicator">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HANDLING_Switch_RudderTrim_Indicator</NODE_ID>
				<ANIM_NAME>HANDLING_Switch_RudderTrim_Indicator</ANIM_NAME>
				<PART_ID>HANDLING_Switch_RudderTrim_Indicator</PART_ID>
				<ANIM_CODE>
					(A:RUDDER TRIM PCT, PERCENT OVER 100) 50 * 50 +
				</ANIM_CODE>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Switch_AileronTrim_Indicator_L" NODE="HANDLING_Switch_AileronTrim_Indicator_L">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HANDLING_Switch_AileronTrim_Indicator_L</NODE_ID>
				<ANIM_NAME>HANDLING_Switch_AileronTrim_Indicator</ANIM_NAME>
				<PART_ID>HANDLING_Switch_AileronTrim_Indicator_L</PART_ID>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<ANIM_CODE>
					(A:AILERON TRIM PCT, PERCENT OVER 100) 50 * 50 +
				</ANIM_CODE>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Indicator_Flaps" NODE="HANDLING_Indicator_Flaps">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE">
				<NODE_ID>HANDLING_Indicator_Flaps</NODE_ID>
				<PART_ID>HANDLING_Indicator_Flaps</PART_ID>
				<SIMVAR>TRAILING EDGE FLAPS LEFT PERCENT</SIMVAR>
				<UNITS>percent</UNITS>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>100</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>90</END_DEG>
				<TOTAL_DEG>90</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@FlapSignalCircuit, Bool)</POWER_CODE>
				<USE_VARIABILITY>FALSE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
				<LOWPASSCONSTANT>0.175</LOWPASSCONSTANT>
			</UseTemplate>
		</Component>

	</Component>


	<Component ID="YOKES">

		<UseTemplate Name="ASOBO_HANDLING_Yoke_Hideable_Template">
			<NODE_ID>YokePitch_L</NODE_ID>
			<YOKE_HIDER_NODE_ID>YOKE_LEFT_VISIBILITY</YOKE_HIDER_NODE_ID>
			<YOKE_NODE_ID>YokePitch_L</YOKE_NODE_ID>
			<ANIM_NAME_YOKE_X>YokeRoll</ANIM_NAME_YOKE_X>
			<ANIM_NAME_YOKE_Y>YokePitch</ANIM_NAME_YOKE_Y>
			<AP_CAN_DRIVE_ANIMATION>True</AP_CAN_DRIVE_ANIMATION>
			<ID>1</ID>
		</UseTemplate>
		
		<UseTemplate Name="ASOBO_HANDLING_Yoke_Hideable_Template">
			<NODE_ID>YokePitch_R</NODE_ID>
			<YOKE_HIDER_NODE_ID>YOKE_RIGHT_VISIBILITY</YOKE_HIDER_NODE_ID>
			<YOKE_NODE_ID>YokePitch_R</YOKE_NODE_ID>
			<ID>2</ID>
			<ONLY_HIDEABLE/>
		</UseTemplate>

		<Component ID="HANDLING_Yoke_Push_AP_Disconect_1" NODE="HANDLING_Yoke_Push_AP_Disconect_1">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>HANDLING_Yoke_Push_AP_Disconect_1</ANIM_NAME>
				<LEFT_SINGLE_CODE>
					(A:AUTOPILOT MASTER, bool) if{ 
						(&gt;K:AP_MASTER)
						2 (&gt;L:BKSQ_AUTOPILOT_DISCONNECT_SOUND, bool)
					}
					els{
						(A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) if{ (&gt;K:TOGGLE_FLIGHT_DIRECTOR) }
					}
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>button_push</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>pressurization_micromask_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>

				<PART_ID>HANDLING_Yoke_Push_AP_Disconect_1</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>AP DISC (FD OFF)</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="HANDLING_Yoke_Push_AP_Disconect_2" NODE="HANDLING_Yoke_Push_AP_Disconect_2">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>HANDLING_Yoke_Push_AP_Disconect_2</ANIM_NAME>
				<LEFT_SINGLE_CODE>
					(A:AUTOPILOT MASTER, bool) if{ 
						(&gt;K:AP_MASTER)
						2 (&gt;L:BKSQ_AUTOPILOT_DISCONNECT_SOUND, bool)
					}
					els{
						(A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) if{ (&gt;K:TOGGLE_FLIGHT_DIRECTOR) }
					}
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>button_push</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>pressurization_micromask_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>

				<PART_ID>HANDLING_Yoke_Push_AP_Disconect_2</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>AP DISC (FD OFF)</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="CwsButton_L" Node="CwsButton_L">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>CwsButton_L</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_PilotCws</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>button_switch_metal</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>push_light_top_switch_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>CWS</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="CwsButton_R" Node="CwsButton_R">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>CwsButton_R</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_CoPilotCws</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>button_switch_metal</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>push_light_top_switch_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>CWS</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="PttButton_L" Node="PttButton_L">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>PttButton_L</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_PilotPtt</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>PTT</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="PttButton_R" Node="PttButton_R">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>PttButton_R</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_CoPilotPtt</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>PTT</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Yoke_Switch_ElevatorTrim_1" NODE="HANDLING_Yoke_Switch_ElevatorTrim_1">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>HANDLING_Yoke_Switch_ElevatorTrim_1</NODE_ID>
				<ANIM_NAME>HANDLING_Yoke_Switch_ElevatorTrim_1</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@PitchTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 21 &gt; and if{
						(A:ELEVATOR TRIM PCT, percent) 0.2 + 163.83 * 16383 min -16383 max (&gt;K:ELEVATOR_TRIM_SET)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)
				</CODE_POS_2>
				<CODE_POS_1>0 (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)</CODE_POS_1>
				<CODE_POS_0>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@PitchTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 21 &gt; and if{
						(A:ELEVATOR TRIM PCT, percent) 0.2 - 163.83 * 16383 min -16383 max (&gt;K:ELEVATOR_TRIM_SET)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)
				</CODE_POS_0>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<WWISE_EVENT>pressurization_dump_cover_open</WWISE_EVENT>

				<PART_ID>HANDLING_Yoke_Switch_ElevatorTrim_1</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Electric Trim</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="HANDLING_Yoke_Switch_ElevatorTrim_2" NODE="HANDLING_Yoke_Switch_ElevatorTrim_2">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>HANDLING_Yoke_Switch_ElevatorTrim_2</NODE_ID>
				<ANIM_NAME>HANDLING_Yoke_Switch_ElevatorTrim_2</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@PitchTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 21 &gt; and if{
						(A:ELEVATOR TRIM PCT, percent) 0.2 + 163.83 * 16383 min -16383 max (&gt;K:ELEVATOR_TRIM_SET)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)
				</CODE_POS_2>
				<CODE_POS_1>0 (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)</CODE_POS_1>
				<CODE_POS_0>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@PitchTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 21 &gt; and if{
						(A:ELEVATOR TRIM PCT, percent) 0.2 - 163.83 * 16383 min -16383 max (&gt;K:ELEVATOR_TRIM_SET)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@PitchTrimsCircuit, bool)
				</CODE_POS_0>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<WWISE_EVENT>pressurization_dump_cover_open</WWISE_EVENT>

				<PART_ID>HANDLING_Yoke_Switch_ElevatorTrim_2</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Electric Trim</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="RudderTrimSwitch_L" NODE="RudderTrimSwitch_L">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>RudderTrimSwitch_L</NODE_ID>
				<ANIM_NAME>RudderTrimSwitch_L</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@RudderTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 22 &gt; and if{
						(A:RUDDER TRIM PCT, percent) 0.2 + 163.83 * 16383 min -16383 max (&gt;K:RUDDER_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)
				</CODE_POS_2>
				<CODE_POS_1>0 (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)</CODE_POS_1>
				<CODE_POS_0>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@RudderTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 22 &gt; and if{
						(A:RUDDER TRIM PCT, percent) 0.2 - 163.83 * 16383 min -16383 max (&gt;K:RUDDER_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)
				</CODE_POS_0>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<ANIM_LAG>800</ANIM_LAG>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<WWISE_EVENT>aileron_trim_switch</WWISE_EVENT>

				<PART_ID>RudderTrimSwitch_L</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Rudder Trim</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="RudderTrimSwitch_R" NODE="RudderTrimSwitch_R">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>RudderTrimSwitch_R</NODE_ID>
				<ANIM_NAME>RudderTrimSwitch_R</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
				<CODE_POS_2>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@RudderTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 12 &gt; and if{
						(A:RUDDER TRIM PCT, percent) 0.2 + 163.83 * 16383 min -16383 max (&gt;K:RUDDER_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)
				</CODE_POS_2>
				<CODE_POS_1>0 (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)</CODE_POS_1>
				<CODE_POS_0>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@RudderTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 12 &gt; and if{
						(A:RUDDER TRIM PCT, percent) 0.2 - 163.83 * 16383 min -16383 max (&gt;K:RUDDER_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RudderTrimsCircuit, bool)
				</CODE_POS_0>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<ANIM_LAG>800</ANIM_LAG>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<WWISE_EVENT>aileron_trim_switch</WWISE_EVENT>

				<PART_ID>RudderTrimSwitch_R</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Rudder Trim</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="AileronTrimSwitch" NODE="AileronTrimSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>AileronTrimSwitch</NODE_ID>
				<ANIM_NAME>AileronTrimSwitch</ANIM_NAME>
				<PART_ID>AileronTrimSwitch</PART_ID>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@AileronTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 12 &gt; and if{
						(A:AILERON TRIM PCT, percent) 0.2 + 163.83 * 16383 min -16383 max (&gt;K:AILERON_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@AileronTrimsCircuit, bool)
				</CODE_POS_2>
				<CODE_POS_1>0 (&gt;A:CIRCUIT SWITCH ON:@AileronTrimsCircuit, bool)</CODE_POS_1>
				<CODE_POS_0>
					@BUS3 (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@AileronTrimsCircuit, Bool) (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 12 &gt; and if{
						(A:AILERON TRIM PCT, percent) 0.2 - 163.83 * 16383 min -16383 max (&gt;K:AILERON_TRIM_SET_EX1)
					}
					(L:var_trimsDisabled, bool) ! (&gt;A:CIRCUIT SWITCH ON:@AileronTrimsCircuit, bool)
				</CODE_POS_0>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
				<ANIM_LAG>800</ANIM_LAG>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<WWISE_EVENT>aileron_trim_switch</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Aileron Trim</TOOLTIPID>
			</UseTemplate>
		</Component>

	</Component>






	<Component ID="THROTTLES">

		<Component ID="Engine_Lever_Throttle_1" NODE="Engine_Lever_Throttle_1">
			<UseTemplate Name="ASOBO_ENGINE_Lever_Throttle_Template">
				<ID>1</ID>
				<HAS_IDLE_GATE/>
				<IDLE_GATE_ANIM_POS>0.2</IDLE_GATE_ANIM_POS>
				<!-- Thottle Lift Gate -->
				<DOWN_CODE>1 (&gt;L:var_Interacting_With_Lever_Throttle_1, bool)</DOWN_CODE>
  				<RELEASE_CODE>0 (&gt;L:var_Interacting_With_Lever_Throttle_1, bool)</RELEASE_CODE>

  				<OVERRIDE_ANIM_CODE>
  					(B:ENGINE_Throttle_1, percent over 100) 1000 * int 1000 / sp0
					0 (A:THROTTLE LOWER LIMIT, percent) - 100 (A:THROTTLE LOWER LIMIT, percent) - / 1000 * int 1000 / sp1
					l0 l1 - 1 0 (A:THROTTLE LOWER LIMIT, percent) - 100 (A:THROTTLE LOWER LIMIT, percent) - / - / 1 0.2 - * 0.2 +
					
					l0 l1 / 0.2 *
					l0 l1 &gt;= ? 100 *

					(A:SIM ON GROUND, bool) ! (L:BKSQ_UnrestrictedBeta, bool) ! and if{ 31.96 max }

					(&gt;L:var_PowerLeverAnimationPostion, number)



					(* Flight Idle Detent Sound *)

					(L:var_PowerLeverAnimationPostion, number) 29.9 &gt; (L:var_PowerLeverAnimationPostion, number) 35.0 &lt; and 
					if{
						(L:var_PowerLeverAnimationPostion, number) 31.9 &gt; (L:var_PowerLeverAnimationPostion, number) 33.0 &lt; and
						(L:var_FlightIdleGateSoundLatching, number) 1 == and
						if{
							2 (&gt;L:var_FlightIdleGateSoundLatching, number)
						}
						els{
							(L:var_FlightIdleGateSoundLatching, number) 0 == if{
								1 (&gt;L:var_FlightIdleGateSoundLatching, number)
							}
						}
					}
					els{
						0 (&gt;L:var_FlightIdleGateSoundLatching, number)
					}

					(L:var_FlightIdleGateSoundLatching, number) 2 !=
					(L:var_lastPowerLeverAnimationPostion, number) 31.9 &lt; (L:var_PowerLeverAnimationPostion, number) 33.0 &gt; and
					(L:var_lastPowerLeverAnimationPostion, number) 33.0 &gt; (L:var_PowerLeverAnimationPostion, number) 31.9 &lt; and
					or and if{
						2 (&gt;L:var_FlightIdleGateSoundLatching, number)
					}



					(L:var_PowerLeverAnimationPostion, number) d
					(&gt;L:var_lastPowerLeverAnimationPostion, number)
  				</OVERRIDE_ANIM_CODE>
  				<!-- 31.96 corresponds to the 15% throttle position -->
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>800</ANIM_LAG>
				<ANIM_NAME>ENGINE_Lever_Throttle_Gate</ANIM_NAME>
				<ANIM_CODE>
					(L:var_Interacting_With_Lever_Throttle_1, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>ENGINE_Lever_Throttle_Gate</ANIM_NAME>
				<WWISE_EVENT_1>pressurization_dump_cover_open</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>pressurization_dump_cover_close</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.9</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>

			<!-- For Throttle Detent -->
			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>ENGINE_Lever_Throttle_1</ANIM_NAME>
				<WWISE_EVENT_1>button_push</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.13</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>button_switch_metal</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.14</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>

			<!-- For Flight Idle Detent -->
			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>ENGINE_Lever_Throttle_1</ANIM_NAME>
				<WWISE_EVENT_1>button_switch_metal</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.3196</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>button_switch_metal</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.3196</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>

			<!-- Beta Range -->
			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>60</FREQUENCY>
				<UPDATE_CODE>
					(A:SIM ON GROUND, bool) (L:BKSQ_UnrestrictedBeta, bool) or (A:GENERAL ENG THROTTLE LEVER POSITION:1, Percent) 15 &lt; (A:GENERAL ENG PROPELLER LEVER POSITION:1, Percent) 0 &gt; (A:PROP RPM:1, rpm) 1450 &lt; and and and if{
						1 (&gt;A:PROP BETA FORCED ACTIVE:1, Bool)

						15 (A:GENERAL ENG THROTTLE LEVER POSITION:1, Percent) 15 - 30 / 30 * +
						(&gt;A:PROP BETA FORCED POSITION:1, Degrees)
					}
					els{
						0 (&gt;A:PROP BETA FORCED ACTIVE:1, Bool)

						(A:SIM ON GROUND, bool) ! (A:GENERAL ENG THROTTLE LEVER POSITION:1, Percent) 15 &lt; and if{
							15 (&gt;A:GENERAL ENG THROTTLE LEVER POSITION:1, Percent)
						}
					}
				</UPDATE_CODE>
			</UseTemplate>

		</Component>


		<UseTemplate Name="ASOBO_ENGINE_Lever_Propeller_Template">
			<IDLE_GATE_ANIM_POS>0.15</IDLE_GATE_ANIM_POS>
			<LEVER_TYPE>REVERSE_IDLE_FULL</LEVER_TYPE>
		</UseTemplate>



		<UseTemplate Name="ASOBO_FUEL_Condition_Lever_Template">
			<ID>1</ID>
			<HIDE_NODE>True</HIDE_NODE>
			<NODE_ID>FUEL_LEVER_MIXTURE_1</NODE_ID>
			<ANIM_NAME>FUEL_LEVER_MIXTURE_1</ANIM_NAME>
			<PART_ID>FUEL_LEVER_MIXTURE_1</PART_ID>
			<WWISE_EVENT>lever_flaps</WWISE_EVENT>
		</UseTemplate>

			



		<Component ID="ENGINE_Lever_Emeregency" Node="ENGINE_Lever_Emeregency">
			<PART_ID>ENGINE_Lever_Emeregency</PART_ID>
	
			<UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
	
				<ANIM_NAME>ENGINE_Lever_EmeregencyPower</ANIM_NAME>
				<NODE_ID>ENGINE_Lever_Emeregency</NODE_ID>
				<PART_ID>ENGINE_Lever_Emeregency</PART_ID>
	
				<USE_TRAJECTORY_DRAG_MODE>true</USE_TRAJECTORY_DRAG_MODE>
				<DRAG_AXIS_SCALE>-140</DRAG_AXIS_SCALE>
				<CURSOR>Grab</CURSOR>
				<NO_ARROWS/>
				<DRAG_ANIM_NAME>ENGINE_Lever_EmeregencyPower</DRAG_ANIM_NAME>
	
				<ANIM_CODE>(L:var_emergencyPowerLeverPosition, number)</ANIM_CODE>
				<DRAG_CODE>(M:DragPercent) 100 * (&gt;L:var_emergencyPowerLeverPosition, number)</DRAG_CODE>
				<POSITIVE_AXIS_CODE>(L:var_emergencyPowerLeverPosition, number) 1 + (&gt;L:var_emergencyPowerLeverPosition, number)</POSITIVE_AXIS_CODE>
				<NEGATIVE_AXIS_CODE>(L:var_emergencyPowerLeverPosition, number) 1 - (&gt;L:var_emergencyPowerLeverPosition, number)</NEGATIVE_AXIS_CODE>


				<WWISE_EVENT_1>autopilot_verticalspeed_knob</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.15</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_verticalspeed_knob</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.15</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Emergency Power</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>ENGINE_Lever_EmeregencyPower</ANIM_NAME>
				<WWISE_EVENT_1>deice_inertsep_switch_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.15</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>deice_inertsep_switch_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.15</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
		</Component>

		<Component ID="FrictionLock" Node="FrictionLock">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
    			<WRAP>False</WRAP>
    			<ANIM_CODE>(L:var_FrictionLock, number)</ANIM_CODE>
    			<ANIM_NAME>FrictionLock</ANIM_NAME>
    			<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
    			<ANTICLOCKWISE_CODE>
    				(L:var_FrictionLock, number) 0 &gt; if{ (L:var_FrictionLock, number) 1 - (&gt;L:var_FrictionLock, number) }
    			</ANTICLOCKWISE_CODE>
    			<CLOCKWISE_CODE>
    				(L:var_FrictionLock, number) 100 &lt; if{ (L:var_FrictionLock, number) 1 + (&gt;L:var_FrictionLock, number) }
    			</CLOCKWISE_CODE>
    			<!-- <WWISE_EVENT>intlights_knob</WWISE_EVENT> -->
    			<COUNT>100</COUNT>

    			<PART_ID>FrictionLock</PART_ID>
    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Friction Lock</TOOLTIPID>
    		</UseTemplate>

    		<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>FrictionLock</ANIM_NAME>
				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
    	</Component>



    	<Component ID="PropOverspeedTest" NODE="PropOverspeedTest">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>PropOverspeedTest</NODE_ID>
				<ANIM_NAME>PropOverspeedTest</ANIM_NAME>
				<PART_ID>PropOverspeedTest</PART_ID>
				<LEFT_SINGLE_CODE>
					1 (&gt;L:var_propOverspeedTestButton, bool)
				</LEFT_SINGLE_CODE>
					<!-- (A:GENERAL ENG PCT MAX RPM:1, percent) (&gt;L:var_tempEngineRpm, percent) -->
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_propOverspeedTestButton, bool)
				</LEFT_LEAVE_CODE>
					<!-- (L:var_tempEngineRpm, percent) (&gt;A:GENERAL ENG PCT MAX RPM:1, percent) -->
				<ANIM_CODE>(L:var_propOverspeedTestButton, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<ANIM_LAG>1000</ANIM_LAG>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT>light_cabin_switch_off</WWISE_EVENT>
				<WWISE_EVENT_1>light_cabin_switch_off</WWISE_EVENT_1>
				<WWISE_EVENT_2>button_switch_metal</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Propeller Overspeed Test</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>15</FREQUENCY>
				<UPDATE_CODE>
					(L:var_propGovernorFailure, bool) if{
						(A:GENERAL ENG PCT MAX RPM:1, percent) 88 &gt; if{
							88 (&gt;A:GENERAL ENG PCT MAX RPM:1, percent)
						}
					}
					els{
						(L:var_propOverspeedTestButton, bool) (A:GENERAL ENG PCT MAX RPM:1, percent) 92 &gt; and if{
							92 (&gt;A:GENERAL ENG PCT MAX RPM:1, percent)
						}
					}
				</UPDATE_CODE>
			</UseTemplate>

		</Component>



		<!-- Flap Selector & 850 Mode -->

		<Component ID="HANDLING_Lever_Flaps" NODE="HANDLING_Lever_Flaps">
			<UseTemplate Name="ASOBO_GT_Switch_4States">
				<NODE_ID>HANDLING_Lever_Flaps</NODE_ID>
				<PART_ID>HANDLING_Lever_Flaps</PART_ID>
				<ANIM_NAME>HANDLING_Lever_Flaps</ANIM_NAME>
				<SWITCH_DIRECTION>Vertical</SWITCH_DIRECTION>
				<CODE_POS_3>
					2 (&gt;A:FLAPS HANDLE INDEX:1, number)
					0 (&gt;L:var_850Mode, number)
				</CODE_POS_3>
				<CODE_POS_2>
					1 (&gt;A:FLAPS HANDLE INDEX:1, number)
					0 (&gt;L:var_850Mode, number)
				</CODE_POS_2>
				<CODE_POS_1>
					0 (&gt;A:FLAPS HANDLE INDEX:1, number)
					0 (&gt;L:var_850Mode, number)
				</CODE_POS_1>
				<CODE_POS_0>
					1 (&gt;L:var_850Mode, number)
				</CODE_POS_0>
				<OVERRIDE_ANIM_CODE>
					(L:var_850Mode, bool) if{
						300
						0 (&gt;O:switchstate)
					}
					els{
						(A:FLAPS HANDLE INDEX:1, number) 0 == if{
							240
							1 (&gt;O:switchstate)
						}
						els{
							(A:FLAPS HANDLE INDEX:1, number) 1 == if{
								132
								2 (&gt;O:switchstate)
							}
							els{
								0
								3 (&gt;O:switchstate)
							}
						}
					}
				</OVERRIDE_ANIM_CODE>
				<ANIM_LAG>1000</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>

				<WWISE_EVENT>lever_flaps</WWISE_EVENT>
				<WWISE_EVENT_1>lever_flaps</WWISE_EVENT_1>
				<WWISE_EVENT_1>lever_flaps</WWISE_EVENT_1>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Flaps</TOOLTIPID>
			</UseTemplate>

			<!-- For Condition Lever -->
			<AnimationTriggers Animation="FUEL_Lever_Mixture_1">
				<EventTrigger NormalizedTime="0.66" Direction="Both">
					<SoundEvent WwiseEvent="lever_flaps" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.33" Direction="Backward">
					<SoundEvent WwiseEvent="lever_flaps" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>
		</Component>









    	<!-- Fuel Selector -->

    	<Component ID="FUEL_Knob_Selector_1" NODE="FUEL_Knob_Selector_1">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<ANIM_NAME>FUEL_Knob_Selector_1</ANIM_NAME>
				<PART_ID>FUEL_Knob_Selector_1</PART_ID>
				<NODE_ID>FUEL_Knob_Selector_1</NODE_ID>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<EXTRA_INTERACTION>_LeftSingle</EXTRA_INTERACTION>
				<ANIM_CODE>
	        		(A:FUEL TANK SELECTOR:1, enum) 19 == if{
	        			0
	        		}
	        		els{
	        			(A:FUEL TANK SELECTOR:1, enum) 20 == if{
	        				50
	        			}
	        			els{
	        				100
	        			}
	        		}
	        	</ANIM_CODE>
	        	<CLOCKWISE_CODE>
	        		(A:FUEL TANK SELECTOR:1, enum) 19 == if{
	        			(&gt;K:FUEL_SELECTOR_RIGHT_MAIN)
					}
					els{
						(A:FUEL TANK SELECTOR:1, enum) 20 == (L:var_FuelStopDown, bool) and if{
	        				(&gt;K:FUEL_SELECTOR_OFF)
						}
					}
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
					(A:FUEL TANK SELECTOR:1, enum) 0 == if{
	        			(&gt;K:FUEL_SELECTOR_RIGHT_MAIN)
	        			0 (&gt;L:var_FuelStopDown, bool)
					}
					els{
						(A:FUEL TANK SELECTOR:1, enum) 20 == if{
	        				(&gt;K:FUEL_SELECTOR_LEFT_MAIN)
						}
					}
	        	</ANTICLOCKWISE_CODE>
	        	<LEFT_SINGLE_CODE>1 (&gt;L:var_FuelStopDown, bool)</LEFT_SINGLE_CODE>

	        	<WWISE_EVENT>fuel_selector_knob</WWISE_EVENT>
	        	<COUNT>3</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Fuel Selector (Pull Off)</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>FUEL_Knob_Selector_1_Pull</NODE_ID>
				<ANIM_NAME>FUEL_Knob_Selector_1_Pull</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_CODE>(L:var_FuelStopDown, bool) 20 *</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>



	<Component ID="LANDING_GEAR_Lever_Gear">

		<UseTemplate Name="ASOBO_LANDING_GEAR_Switch_ParkingBrake_Template">
    	    <NODE_ID>ParkingBrakeKnob</NODE_ID>
	        <ANIM_NAME>ParkingBrakeKnob</ANIM_NAME>
	        <PART_ID>ParkingBrakeKnob</PART_ID>
        	<ANIM_SIMVAR_SCALE>100</ANIM_SIMVAR_SCALE>
        	<TT_ICON>ROTATE</TT_ICON>
      	</UseTemplate>

		<UseTemplate Name="ASOBO_LANDING_GEAR_Lever_Gear_Template">
			<NODE_ID>LANDING_GEAR_LEVER</NODE_ID>
			<ANIM_NAME>LANDING_GEAR_LEVER</ANIM_NAME>
			<INVERT_ANIM>TRUE</INVERT_ANIM>
			<TOOLTIPID>%((A:GEAR HANDLE POSITION, percent) 50 &gt;)%{if}TT:COCKPIT.TOOLTIPS.LANDING_GEAR_DN %{else}TT:COCKPIT.TOOLTIPS.LANDING_GEAR_UP %{end}</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>GearLight_N</NODE_ID>
			<ON_CONDITION_CODE>
				(A:GEAR CENTER POSITION, percent) 99.5 &gt;
				(L:var_landingGearDownCheck, bool) !
				(E:SIMULATION TIME, second) 15 * 2 % 1 &lt; or
				and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness 0.5 *</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_landingGearLightTestIlluminate</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@LandingGearSignalCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>GearLight_L</NODE_ID>
			<ON_CONDITION_CODE>
				(A:GEAR LEFT POSITION, percent) 99.5 &gt;
				(L:var_landingGearDownCheck, bool) !
				(E:SIMULATION TIME, second) 15 * 2 % 1 &lt; or
				and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness 0.5 *</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_landingGearLightTestIlluminate</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@LandingGearSignalCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>GearLight_R</NODE_ID>
			<ON_CONDITION_CODE>
				(A:GEAR RIGHT POSITION, percent) 99.5 &gt;
				(L:var_landingGearDownCheck, bool) !
				(E:SIMULATION TIME, second) 15 * 2 % 1 &lt; or
				and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness 0.5 *</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_landingGearLightTestIlluminate</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@LandingGearSignalCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>GearInTransitLight</NODE_ID>
			<ON_CONDITION_CODE>
				(E:SIMULATION TIME, second) 2 * 2 % 1 &lt; 

				(A:CIRCUIT ON:@GearMotorCircuit, bool) !
				(A:CIRCUIT ON:@LandingGearControllerCircuit, bool) !
				or
				or

				(A:GEAR HANDLE POSITION, bool) ! if{
					(A:GEAR CENTER POSITION, percent) 1 &gt;
					(A:GEAR RIGHT POSITION, percent) 1 &gt;
					(A:GEAR LEFT POSITION, percent) 1 &gt;
					or
					or
				}
				els{
					(A:GEAR CENTER POSITION, percent) 99 &lt;
					(A:GEAR RIGHT POSITION, percent) 99 &lt;
					(A:GEAR LEFT POSITION, percent) 99 &lt;
					or
					or
				}
				(A:CIRCUIT ON:@LandingGearSignalCircuit, bool)
				and
				and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness 0.5 *</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_landingGearLightTestIlluminate</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@LandingGearSignalCircuit</CIRCUIT>
		</UseTemplate>

		<!-- Gear Light Tests -->

		<Component ID="GearDownTest" NODE="GearDownTest">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>GearDownTest</NODE_ID>
				<ANIM_NAME>GearDownTest</ANIM_NAME>
				<PART_ID>GearDownTest</PART_ID>
				<LEFT_SINGLE_CODE>
					1 (&gt;L:var_landingGearDownCheck, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_landingGearDownCheck, bool)
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>landing_gear_checkdown_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>landing_gear_checkdown_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Gear Down Check</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GearLightTest1" NODE="GearLightTest1">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>GearLightTest1</NODE_ID>
				<ANIM_NAME>GearLightTest1</ANIM_NAME>
				<PART_ID>GearLightTest1</PART_ID>
				<LEFT_SINGLE_CODE>
					1 (&gt;L:var_landingGearLightTestIlluminate, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_landingGearLightTestIlluminate, bool)
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>landing_gear_light_test_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>landing_gear_light_test_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Gear Test 1</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GearLightTest2" NODE="GearLightTest2">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>GearLightTest2</NODE_ID>
				<ANIM_NAME>GearLightTest2</ANIM_NAME>
				<PART_ID>GearLightTest2</PART_ID>
				<LEFT_SINGLE_CODE>
					1 (&gt;L:var_landingGearLightTestIlluminate, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_landingGearLightTestIlluminate, bool)
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>landing_gear_light_test_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>landing_gear_light_test_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Gear Test 2</TOOLTIPID>
			</UseTemplate>
		</Component>



		<Component ID="MaskMicCover" NODE="MaskMicCover">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>MaskMicCover</ANIM_NAME>
				<NODE_ID>MaskMicCover</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_MaskMicCover, bool) ! (&gt;L:var_MaskMicCover, bool)
					0 (&gt;L:var_MaskMicSwitch, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_MaskMicCover, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>pressurization_dump_cover_open</WWISE_EVENT>
				<WWISE_EVENT_1>pressurization_dump_cover_open</WWISE_EVENT_1>
				<WWISE_EVENT_2>pressurization_dump_cover_close</WWISE_EVENT_2>

				<PART_ID>MaskMicCover</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Mask Microphone Switch Cover</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="MaskMicSwitch" NODE="MaskMicSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>MaskMicSwitch</ANIM_NAME>
				<NODE_ID>MaskMicSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_MaskMicCover, bool) if{
						(L:var_MaskMicSwitch, bool) ! (&gt;L:var_MaskMicSwitch, bool)
					}
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_MaskMicSwitch, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>cabin_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>cabin_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>cabin_light_switch_off</WWISE_EVENT_2>

				<PART_ID>MaskMicSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Mask Microphone Switch</TOOLTIPID>
			</UseTemplate>
		</Component>


	</Component>



	<!-- Bottom Center Panel -->

	<Component ID="BOTTOM_CENTER_PANEL">


		<Component ID="AutopilotServoMasterSwitch" NODE="AutopilotServoMasterSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>AutopilotServoMasterSwitch</NODE_ID>
				<ANIM_NAME>AutopilotServoMasterSwitch</ANIM_NAME>
				<PART_ID>AutopilotServoMasterSwitch</PART_ID>				
				<CODE_POS_0>
					2 (&gt;L:BKSQ_AutopilotMasterSwitch, number)
					1 (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
					0 (&gt;L:var_trimsDisabled, bool)
				</CODE_POS_0>
				<CODE_POS_1>
					1 (&gt;L:BKSQ_AutopilotMasterSwitch, number)
					1 (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
					1 (&gt;L:var_trimsDisabled, bool)
				</CODE_POS_1>
				<CODE_POS_2>
					0 (&gt;L:BKSQ_AutopilotMasterSwitch, number)
					0 (&gt;A:CIRCUIT SWITCH ON:@AutopilotCircuit, bool)
					1 (&gt;L:var_trimsDisabled, bool)
				</CODE_POS_2>
				<OVERRIDE_ANIM_CODE>
					(L:BKSQ_AutopilotMasterSwitch, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:BKSQ_AutopilotMasterSwitch, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:BKSQ_AutopilotMasterSwitch, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>cabin_light_switch_off</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>AP Master</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>GroundClearanceLight</NODE_ID>
			<ON_CONDITION_CODE>
				@BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@Com1Circuit, Bool)
				(L:BKSQ_SourceSwitch, number) 0 == and
			</ON_CONDITION_CODE>
			<CIRCUIT>@GroundClearanceCircuit</CIRCUIT>
		</UseTemplate>

		<Component ID="RadioMasterSwitch" NODE="RadioMasterSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>RadioMasterSwitch</ANIM_NAME>
				<NODE_ID>RadioMasterSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_RadioMasterSwitch, bool) ! (&gt;L:var_RadioMasterSwitch, bool)

						4 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:10, Bool) (L:var_RadioMasterSwitch, bool) != if{
							10 4 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						5 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:11, Bool) (L:var_RadioMasterSwitch, bool) != if{
							11 5 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						6 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:12, Bool) (L:var_RadioMasterSwitch, bool) != if{
							12 6 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:13, Bool) (L:var_RadioMasterSwitch, bool) != if{
							13 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
						8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:14, Bool) (L:var_RadioMasterSwitch, bool) != if{
							14 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_RadioMasterSwitch, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

				<PART_ID>RadioMasterSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Avionics Master</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="CabinLightSwitch" NODE="CabinLightSwitch" >
			<UseTemplate Name="BKSQ_SWITCH_BUS_TEMPLATE">
				<NODE_ID>CabinLightSwitch</NODE_ID>
				<PART_ID>CabinLightSwitch</PART_ID>
				<SOURCE_BUS>@CABINLIGHTS_INTERMEDIATE</SOURCE_BUS>
				<DESTINATION_BUS>@CABINLIGHTS</DESTINATION_BUS>
				<INVERT_ANIM>FALSE</INVERT_ANIM>
				
				<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Lights</TOOLTIPID>
			</UseTemplate>
		</Component>

	</Component>





	<!-- ANNUNCIATOR PANEL -->

	<Component ID="ANNUNCIATOR_PANEL">

		<Component ID="AnnunciatorBrightnessSwitch" Node="AnnunciatorBrightnessSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
	    		<ANIM_NAME>AnnunciatorBrightnessSwitch</ANIM_NAME>
	    		<NODE_ID>AnnunciatorBrightnessSwitch</NODE_ID>
	    		<LEFT_SINGLE_CODE>
	    			(L:var_AnnunciatorDim, bool) ! (&gt;L:var_AnnunciatorDim, bool)		
	    		</LEFT_SINGLE_CODE>
	    		<ANIM_CODE>(L:var_AnnunciatorDim, bool) 100 *</ANIM_CODE>
	    		<ANIM_LENGTH>100</ANIM_LENGTH>
	    		<INVERT_ANIM>TRUE</INVERT_ANIM>
	    		<ANIM_LAG>800</ANIM_LAG>

	    		<PART_ID>AnnunciatorBrightnessSwitch</PART_ID>
	    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Annunciator Panel Dimmer</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AnnunciatorTestSwitch" NODE="AnnunciatorTestSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>AnnunciatorTestSwitch</NODE_ID>
				<ANIM_NAME>AnnunciatorTestSwitch</ANIM_NAME>
				<CODE_POS_2>1 (&gt;L:var_AnnunciatorTest1, bool)</CODE_POS_2>
				<CODE_POS_1>
					0 (&gt;L:var_AnnunciatorTest1, bool)
					0 (&gt;L:var_AnnunciatorTest2, bool)
				</CODE_POS_1>
				<CODE_POS_0>1 (&gt;L:var_AnnunciatorTest2, bool)</CODE_POS_0>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>

				<SWITCH_DIRECTION>Vertical</SWITCH_DIRECTION>

				<PART_ID>AnnunciatorTestSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Annunciator Test</TOOLTIPID>
			</UseTemplate>
		</Component>




		<!-- Column 1 -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Itt</NODE_ID>
			<ON_CONDITION_CODE>
				(L:BKSQ_TBM_ITT, number) 850 &gt; (A:GENERAL ENG STARTER ACTIVE:1, bool) ! and
				(L:BKSQ_TBM_ITT, number) 1090 &gt; (A:GENERAL ENG STARTER ACTIVE:1, bool) and or
				(L:var_TurbineTempTestButton, bool) or 
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_OilPress</NODE_ID>
			<ON_CONDITION_CODE>(A:ENG OIL PRESSURE:1, PSI) 60 &lt;</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Starter</NODE_ID>
			<ON_CONDITION_CODE>(A:GENERAL ENG STARTER ACTIVE:1, bool) (E:SIMULATION TIME, second) 2 * 2 % 1 &lt; and</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Ignition</NODE_ID>
			<ON_CONDITION_CODE>(A:TURB ENG IGNITION SWITCH:1,bool) (A:CIRCUIT ON:@IgnitionCircuit, bool) and</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_ParkingBrake</NODE_ID>
			<ON_CONDITION_CODE>(A:BRAKE PARKING INDICATOR,bool) </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Empty1</NODE_ID>
			<ON_CONDITION_CODE>0</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<!-- Column 2 -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_BleedTemp</NODE_ID>
			<ON_CONDITION_CODE>(L:var_BleedAirOvertemp, bool)</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_BleedOff</NODE_ID>
			<ON_CONDITION_CODE>(A:BLEED AIR ENGINE:1, Bool) !</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_CabinPressure</NODE_ID>
			<ON_CONDITION_CODE>(L:var_cabinPressurizationAltitude, ft) 10420 &gt; (L:var_cabinPressureDifferential, psi) 6.15 &gt; or</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Door</NODE_ID>
			<ON_CONDITION_CODE>(A:EXIT OPEN:0, Percent) 1 &gt; (A:EXIT OPEN:1, Percent) 1 &gt; (L:var_pilotDoorLatchingFailure, bool) (L:var_aftDoorLatchingFailure, bool) or or or </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Flaps</NODE_ID>
			<ON_CONDITION_CODE>0</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Oxygen</NODE_ID>
			<ON_CONDITION_CODE>(L:var_oxygenIsolationValve, bool)</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<!-- Column 3 -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Pitot1</NODE_ID>
			<ON_CONDITION_CODE>(A:CIRCUIT ON:@PitotHeat1Circuit, bool) ! </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Pitot2</NODE_ID>
			<ON_CONDITION_CODE>(A:CIRCUIT ON:@PitotHeat2Circuit, bool) ! </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_StallHeat</NODE_ID>
			<ON_CONDITION_CODE>(A:CIRCUIT ON:@PitotHeat2Circuit, bool) ! </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_InertSep</NODE_ID>
			<ON_CONDITION_CODE>(L:var_inertSepWindup, number) 0.95 &gt; </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_VacuumLow</NODE_ID>
			<ON_CONDITION_CODE>(A:SUCTION PRESSURE,inhg) 3.75 &lt;</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Empty2</NODE_ID>
			<ON_CONDITION_CODE>0</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<!-- Column 4 -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Torque</NODE_ID>
			<ON_CONDITION_CODE>
				(L:BKSQ_TBM_TQ, number) 2300 &gt;
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_BatteryOff</NODE_ID>
			<ON_CONDITION_CODE> @HOT_BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:@BATTERY, Bool) ! </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_MainGenerator</NODE_ID>
			<ON_CONDITION_CODE> (A:GENERAL ENG MASTER ALTERNATOR:1, bool) ! </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_LowVolts</NODE_ID>
			<ON_CONDITION_CODE> (A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 26.2 &lt; </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_Gpu</NODE_ID>
			<ON_CONDITION_CODE> (A:EXTERNAL POWER ON:1, Bool) </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_ChipDetect</NODE_ID>
			<ON_CONDITION_CODE> (A:ENG FAILED:1,bool) (L:var_engineDamage, number) 75 &gt; or </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<!-- Column 5 -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_FuelOff</NODE_ID>
			<ON_CONDITION_CODE> (A:FUEL TANK SELECTOR:1, enum) 0 == </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_FuelPress</NODE_ID>
			<ON_CONDITION_CODE> (L:BKSQ_TBM_FUELPRESSURE, PSI) 10 &lt; </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterWarningLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_AxuBpOn</NODE_ID>
			<ON_CONDITION_CODE> (A:CIRCUIT ON:@BoostPumpCircuit, bool) </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_FuelLow_L</NODE_ID>
			<ON_CONDITION_CODE> (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt;</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_FuelLow_R</NODE_ID>
			<ON_CONDITION_CODE> (A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) 9.1 &lt;</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR_2CIRCUITS">
			<NODE_ID>Annun_FuelAutoSelect</NODE_ID>
			<ON_CONDITION_CODE> (A:CIRCUIT ON:@FuelSelectorCircuit, bool) ! (A:FUEL TANK SELECTOR:1, enum) 0 == or </ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<LATCHING_MASTER_ANNUNCIATOR_VAR>var_masterCautionLatching</LATCHING_MASTER_ANNUNCIATOR_VAR>
			<ANNUNCIATOR_TEST_VAR_1>var_AnnunciatorTest1</ANNUNCIATOR_TEST_VAR_1>
			<ANNUNCIATOR_TEST_VAR_2>var_AnnunciatorTest2</ANNUNCIATOR_TEST_VAR_2>
			<CIRCUIT_1>@Annunciators1Circuit</CIRCUIT_1>
			<CIRCUIT_2>@Annunciators2Circuit</CIRCUIT_2>
		</UseTemplate>






	</Component>




	<!-- Autopilot Panel -->

	<Component ID="AUTOPILOT_PANEL">

		<Component ID="Autopilot_TestButton" NODE="Autopilot_TestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_TestButton</NODE_ID>
				<ANIM_NAME>Autopilot_TestButton</ANIM_NAME>
				<PART_ID>Autopilot_TestButton</PART_ID>
				<LEFT_SINGLE_CODE>
					10 (A:SIM ON GROUND, bool) 35 * + (&gt;L:var_AutopilotStartupCounter, number)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Autopilot Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_MasterButton" NODE="Autopilot_MasterButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_MasterButton</NODE_ID>
				<ANIM_NAME>Autopilot_MasterButton</ANIM_NAME>
				<PART_ID>Autopilot_MasterButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(A:AUTOPILOT MASTER,bool) if{
							(&gt;K:AP_MASTER)
							(A:AUTOPILOT YAW DAMPER, Bool) if{ (&gt;K:YAW_DAMPER_TOGGLE) }
						}
						els{
							(&gt;K:AP_MASTER)
						}
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Autopilot Master</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_YawDamperButton" NODE="Autopilot_YawDamperButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_YawDamperButton</NODE_ID>
				<ANIM_NAME>Autopilot_YawDamperButton</ANIM_NAME>
				<PART_ID>Autopilot_YawDamperButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:YAW_DAMPER_TOGGLE)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Yaw Damper</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_HalfBankButton" NODE="Autopilot_HalfBankButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_HalfBankButton</NODE_ID>
				<ANIM_NAME>Autopilot_HalfBankButton</ANIM_NAME>
				<PART_ID>Autopilot_HalfBankButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(A:AUTOPILOT MAX BANK ID, number) 1 &lt; if{
							1 (&gt;K:AP_MAX_BANK_SET)
						}
						els{
							0 (&gt;K:AP_MAX_BANK_SET)
						}
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Half Bank Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_SoftRideButton" NODE="Autopilot_SoftRideButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_SoftRideButton</NODE_ID>
				<ANIM_NAME>Autopilot_SoftRideButton</ANIM_NAME>
				<PART_ID>Autopilot_SoftRideButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(L:var_autopilotSoftRideMode, bool) ! (&gt;L:var_autopilotSoftRideMode, bool)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Soft Ride Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_FlightDirectorButton" NODE="Autopilot_FlightDirectorButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_FlightDirectorButton</NODE_ID>
				<ANIM_NAME>Autopilot_FlightDirectorButton</ANIM_NAME>
				<PART_ID>Autopilot_FlightDirectorButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:TOGGLE_FLIGHT_DIRECTOR)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Flight Director</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_HeadingButton" NODE="Autopilot_HeadingButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_HeadingButton</NODE_ID>
				<ANIM_NAME>Autopilot_HeadingButton</ANIM_NAME>
				<PART_ID>Autopilot_HeadingButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_PANEL_HEADING_HOLD)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Heading Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_NavButton" NODE="Autopilot_NavButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_NavButton</NODE_ID>
				<ANIM_NAME>Autopilot_NavButton</ANIM_NAME>
				<PART_ID>Autopilot_NavButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_NAV1_HOLD)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Nav Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_ApproachButton" NODE="Autopilot_ApproachButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_ApproachButton</NODE_ID>
				<ANIM_NAME>Autopilot_ApproachButton</ANIM_NAME>
				<PART_ID>Autopilot_ApproachButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_APR_HOLD)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Approach Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_BackCourseButton" NODE="Autopilot_BackCourseButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_BackCourseButton</NODE_ID>
				<ANIM_NAME>Autopilot_BackCourseButton</ANIM_NAME>
				<PART_ID>Autopilot_BackCourseButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_BC_HOLD)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Backcourse Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_AltitudeButton" NODE="Autopilot_AltitudeButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_AltitudeButton</NODE_ID>
				<ANIM_NAME>Autopilot_AltitudeButton</ANIM_NAME>
				<PART_ID>Autopilot_AltitudeButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_ALT_HOLD)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Altitude Hold Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_AirspeedButton" NODE="Autopilot_AirspeedButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Autopilot_AirspeedButton</NODE_ID>
				<ANIM_NAME>Autopilot_AirspeedButton</ANIM_NAME>
				<PART_ID>Autopilot_AirspeedButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:FLIGHT_LEVEL_CHANGE)
						(A:AIRSPEED INDICATED, knots) (&gt;K:AP_SPD_VAR_SET)
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Airspeed Hold Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Autopilot_VsSwitch" NODE="Autopilot_VsSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>Autopilot_VsSwitch</NODE_ID>
				<ANIM_NAME>Autopilot_VsSwitch</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>10</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_0>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_VS_VAR_DEC)
					}
				</CODE_POS_0>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_2>
					(L:var_AutopilotStartupCounter, number) 0 == if{
						(&gt;K:AP_VS_VAR_INC)
					}
				</CODE_POS_2>
				<MOMENTARY_SWITCH>TRUE</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>autopilot_knob_push_button_off</WWISE_EVENT>
				<WWISE_EVENT_1>autopilot_knob_push_button_off</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
				<ANIM_LAG>2000</ANIM_LAG>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Vertical Speed Adjust</TOOLTIPID>
			</UseTemplate>
		</Component>




		<!-- Indicator Lights -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Heading_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_ACTIVE_LATERAL_MODE, number) 2 ==
				} els{ (A:AUTOPILOT HEADING LOCK,bool) }

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Nav_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_NAV_BUTTON_STATE, bool)
				} els{ (A:AUTOPILOT NAV1 LOCK,bool) }

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>
		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_NavArm_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_NAV_BUTTON_STATE, bool)
					(L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or ! (A:NAV HAS NAV:1, Bool) ! and
					(L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or (A:GPS IS ACTIVE FLIGHT PLAN, Bool) ! and
					or
					and
				} els{
				 	(A:AUTOPILOT NAV1 LOCK,bool)
				 	(L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or ! (A:NAV HAS NAV:1, Bool) ! and
				 	(L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or (A:GPS IS ACTIVE FLIGHT PLAN, Bool) ! and
				 	or
				 	and
				}

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Approach_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_APR_BUTTON_STATE, bool)
				} els{ (A:AUTOPILOT APPROACH HOLD,bool) }

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>
		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_ApproachArm_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_APR_BUTTON_STATE, bool)
					(A:NAV HAS NAV:1, Bool) ! (A:NAV HAS GLIDE SLOPE:1, Bool) ! and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or ! and and
				} els{
				 	(A:AUTOPILOT APPROACH HOLD,bool)
				 	(A:NAV HAS NAV:1, Bool) ! (A:NAV HAS GLIDE SLOPE:1, Bool) ! and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) (A:GPS DRIVES NAV1, Bool) and (L:XMLVAR_GPS_DISABLED_AS530_1, bool) ! (L:AS530_CDI_Source_1, Bool) and or ! and and
				}

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_BackCourse_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_ACTIVE_LATERAL_MODE, number) 6 ==
				} els{ (A:AUTOPILOT BACKCOURSE HOLD,bool) }

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_YawDamper_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(A:AUTOPILOT YAW DAMPER,bool)

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Master_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_AP, bool)
				} els{ (A:AUTOPILOT MASTER,bool) }

				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Altitude_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:PMS50_APGA_RUNNING, bool) if{
					(L:PMS50_APGA_ACTIVE_VERTICAL_MODE, number) 3 ==
				} els{ (A:AUTOPILOT VERTICAL HOLD, bool) (A:AUTOPILOT ALTITUDE LOCK,bool) or }
				
				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Airspeed_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(A:AUTOPILOT FLIGHT LEVEL CHANGE, bool)
				
				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_FlightDirector_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(A:AUTOPILOT FLIGHT DIRECTOR ACTIVE,bool)
				
				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_SoftRide_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:var_autopilotSoftRideMode, bool)
				
				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_HalfBank_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(A:AUTOPILOT MAX BANK, degrees) 22 &lt;
				
				(L:var_AutopilotStartupCounter, number) 0 == and
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>Autopilot_Test_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(L:var_AutopilotStartupCounter, number) 0 &gt;
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_AutopilotTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
		</UseTemplate>

	</Component>





	<Component ID="GLARESHIELD">

		<Component ID="MasterWarningButton" NODE="MasterWarningButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>MasterWarningButton</NODE_ID>
				<ANIM_NAME>MasterWarningButton</ANIM_NAME>
				<PART_ID>MasterWarningButton</PART_ID>
				<LEFT_SINGLE_CODE>
					2 (&gt;L:var_masterWarningLatching, number)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Master Warning</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(A:CIRCUIT ON:@Annunciators1Circuit, bool) (A:CIRCUIT ON:@Annunciators2Circuit, bool) or (L:var_masterWarningLatching, number) 1 == and (E:SIMULATION TIME, second) 2 * 2 % 1 &lt; and 0.5 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="MasterCautionButton" NODE="MasterCautionButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>MasterCautionButton</NODE_ID>
				<ANIM_NAME>MasterCautionButton</ANIM_NAME>
				<PART_ID>MasterCautionButton</PART_ID>
				<LEFT_SINGLE_CODE>
					2 (&gt;L:var_masterCautionLatching, number)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Master Caution</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(A:CIRCUIT ON:@Annunciators1Circuit, bool) (A:CIRCUIT ON:@Annunciators2Circuit, bool) or (L:var_masterCautionLatching, number) 1 == and (E:SIMULATION TIME, second) 2 * 2 % 1 &lt; and 0.5 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="GpsMessageButton1" NODE="GpsMessageButton1">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>GpsMessageButton1</NODE_ID>
				<ANIM_NAME>GpsMessageButton1</ANIM_NAME>
				<PART_ID>GpsMessageButton1</PART_ID>
				<LEFT_SINGLE_CODE>
					2 (&gt;L:var_gpsMessageButton1Latching, number)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>GPS 1 Message</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(A:CIRCUIT ON:@Com1Circuit, bool) (L:var_gpsMessageButton1Latching, number) 1 == and (E:SIMULATION TIME, second) 2 * 2 % 1 &lt; and 0.5 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="GpsMessageButton2" NODE="GpsMessageButton2">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>GpsMessageButton2</NODE_ID>
				<ANIM_NAME>GpsMessageButton2</ANIM_NAME>
				<PART_ID>GpsMessageButton2</PART_ID>
				<LEFT_SINGLE_CODE>
					2 (&gt;L:var_gpsMessageButton2Latching, number)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>GPS 2 Message</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(A:CIRCUIT ON:@Com2Circuit, bool) (L:var_gpsMessageButton2Latching, number) 1 == and (E:SIMULATION TIME, second) 2 * 2 % 1 &lt; and 0.5 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- GPS Message Latching Logic -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>1</FREQUENCY>
			<UPDATE_CODE>
				(L:GTN750_HAVE_MESSAGE:1, bool) (L:TDSGTNXI_INSTALLED,bool) ! and (L:var_radio1Mode, number) 0 == and
				(L:GNS530_HAVE_NEWMESSAGE:1, bool) (L:var_radio1Mode, number) 1 == and
				or
				if{
					(L:var_gpsMessageButton1Latching, number) 0 == if{
						1 (&gt;L:var_gpsMessageButton1Latching, number)
					}
				}
				els{
					0 (&gt;L:var_gpsMessageButton1Latching, number)
				}


				(L:GNS530_HAVE_NEWMESSAGE:2, bool) (L:var_radio2Mode, number) 0 == and
				if{
					(L:var_gpsMessageButton2Latching, number) 0 == if{
						1 (&gt;L:var_gpsMessageButton2Latching, number)
					}
				}
				els{
					0 (&gt;L:var_gpsMessageButton2Latching, number)
				}
			</UPDATE_CODE>
		</UseTemplate>


		<Component ID="GyroSlaveModeSwitch_L" NODE="GyroSlaveModeSwitch_L">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
    			<ANIM_NAME>GyroSlaveModeSwitch_L</ANIM_NAME>
    			<NODE_ID>GyroSlaveModeSwitch_L</NODE_ID>
    			<LEFT_SINGLE_CODE>
    				(L:var_GyroSlaveModeSwitch, bool) ! (&gt;L:var_GyroSlaveModeSwitch, bool)
    			</LEFT_SINGLE_CODE>
    			<ANIM_CODE>(L:var_GyroSlaveModeSwitch, bool) 100 *</ANIM_CODE>
    			<ANIM_LENGTH>100</ANIM_LENGTH>
    			<ANIM_LAG>800</ANIM_LAG>
    			<WWISE_EVENT_1>cabin_light_switch_on</WWISE_EVENT_1>
    			<WWISE_EVENT_2>cabin_light_switch_off</WWISE_EVENT_2>

    			<PART_ID>GyroSlaveModeSwitch_L</PART_ID>
    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Remote Compass Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GyroSlaveModeSwitch_R" NODE="GyroSlaveModeSwitch_R">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
    			<ANIM_NAME>GyroSlaveModeSwitch_R</ANIM_NAME>
    			<NODE_ID>GyroSlaveModeSwitch_R</NODE_ID>
    			<LEFT_SINGLE_CODE>
    				(L:var_GyroSlaveModeSwitch, bool) ! (&gt;L:var_GyroSlaveModeSwitch, bool)
    			</LEFT_SINGLE_CODE>
    			<ANIM_CODE>(L:var_GyroSlaveModeSwitch, bool) 100 *</ANIM_CODE>
    			<ANIM_LENGTH>100</ANIM_LENGTH>
    			<ANIM_LAG>800</ANIM_LAG>
    			<WWISE_EVENT_1>cabin_light_switch_on</WWISE_EVENT_1>
    			<WWISE_EVENT_2>cabin_light_switch_off</WWISE_EVENT_2>

    			<PART_ID>GyroSlaveModeSwitch_R</PART_ID>
    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Remote Compass Mode</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GyroRotationSwitch_L" NODE="GyroRotationSwitch_L">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>GyroRotationSwitch_L</NODE_ID>
				<ANIM_NAME>GyroRotationSwitch_L</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>(L:var_GyroSlaveModeSwitch, bool) (A:CIRCUIT ON:@RemoteCompassCircuit, bool) and if{ (&gt;K:GYRO_DRIFT_INC) }</CODE_POS_2>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_0>(L:var_GyroSlaveModeSwitch, bool) (A:CIRCUIT ON:@RemoteCompassCircuit, bool) and if{ (&gt;K:GYRO_DRIFT_DEC) }</CODE_POS_0>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>


				<PART_ID>GyroRotationSwitch_L</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Remote Compass Adjust</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GyroRotationSwitch_R" NODE="GyroRotationSwitch_R">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>GyroRotationSwitch_R</NODE_ID>
				<ANIM_NAME>GyroRotationSwitch_R</ANIM_NAME>
				<MOMENTARY_REPEAT_FREQUENCY>20</MOMENTARY_REPEAT_FREQUENCY>
				<CODE_POS_2>(L:var_GyroSlaveModeSwitch, bool) (A:CIRCUIT ON:@RemoteCompassCircuit, bool) and if{ (&gt;K:GYRO_DRIFT_INC) }</CODE_POS_2>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_0>(L:var_GyroSlaveModeSwitch, bool) (A:CIRCUIT ON:@RemoteCompassCircuit, bool) and if{ (&gt;K:GYRO_DRIFT_DEC) }</CODE_POS_0>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>


				<PART_ID>GyroRotationSwitch_R</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Remote Compass Adjust</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="GyroSyncIndicator_L" NODE="GyroSyncIndicator_L">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>GyroSyncIndicator_L</NODE_ID>
				<PART_ID>GyroSyncIndicator_L</PART_ID>
				<ANIM_NAME>GyroSyncIndicator_L</ANIM_NAME>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_CODE>
					(A:CIRCUIT ON:@RemoteCompassCircuit, bool) if{
						(A:GYRO DRIFT ERROR, degrees) (&gt;L:var_lastGyroDiff, degrees)
						(A:GYRO DRIFT ERROR, degrees) neg 50 +
					}
					els{
						(L:var_lastGyroDiff, degrees) neg 50 +
					}
				</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="GyroSyncIndicator_R" NODE="GyroSyncIndicator_R">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>GyroSyncIndicator_R</NODE_ID>
				<PART_ID>GyroSyncIndicator_R</PART_ID>
				<ANIM_NAME>GyroSyncIndicator_R</ANIM_NAME>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_CODE>
					(A:CIRCUIT ON:@RemoteCompassCircuit, bool) if{
						(A:GYRO DRIFT ERROR, degrees) (&gt;L:var_lastGyroDiff, degrees)
						(A:GYRO DRIFT ERROR, degrees) neg 50 +
					}
					els{
						(L:var_lastGyroDiff, degrees) neg 50 +
					}
				</ANIM_CODE>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>20</FREQUENCY>
			<UPDATE_CODE>
				(L:var_GyroSlaveModeSwitch, bool) ! (A:CIRCUIT ON:@RemoteCompassCircuit, bool) and if{ 
					(A:GYRO DRIFT ERROR, degrees) abs 1 &lt; if{
						(&gt;K:HEADING_GYRO_SET)
					}
					els{
						(A:GYRO DRIFT ERROR, degrees) 0 &gt; if{
							(&gt;K:GYRO_DRIFT_DEC)
						}
						els{
							(&gt;K:GYRO_DRIFT_INC)
						}
					}
				}
			</UPDATE_CODE>
		</UseTemplate>




		<!-- 
								(A:AUTOPILOT ALTITUDE LOCK,bool) if{
									(&gt;K:AP_PANEL_ALTITUDE_OFF)
									(&gt;K:AP_PANEL_VS_ON)
								}
		-->

		<Component ID="KAS297B_AltitudeSelector">

			<Component ID="AP_VerticalSpeedButton" NODE="AP_VerticalSpeedButton">
				<UseTemplate Name="ASOBO_AUTOPILOT_Push_VerticalSpeed_Template">
					<NODE_ID>AP_VerticalSpeedButton</NODE_ID>
					<ANIM_NAME>VerticalSpeedEngageButton</ANIM_NAME>
					<WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_ON>autopilot_knob_push_button_on</WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_ON>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_OFF>autopilot_knob_push_button_off</WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_OFF>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 650 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="AP_AltitudeArmButton" NODE="AP_AltitudeArmButton">
				<UseTemplate Name="ASOBO_AUTOPILOT_Push_VerticalSpeed_Template">
					<NODE_ID>AP_AltitudeArmButton</NODE_ID>
					<ANIM_NAME>AltitudeSelectArmButton</ANIM_NAME>
					<WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_ON>autopilot_knob_push_button_on</WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_ON>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_OFF>autopilot_knob_push_button_off</WWISE_EVENT_AUTOPILOT_PUSH_BUTTON_OFF>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 650 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="AltitudeSelector_OuterKnob" Node="AltitudeSelector_OuterKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>AltitudeSelector_OuterKnob</ANIM_NAME>
					<CLOCKWISE_CODE>
						(A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) if{
			    			(L:var_VsAdjustMode, bool) if{

								(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 2000 &lt; if{
			    					1 (A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 1000 + (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
								els{
									1 3000 (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
			    			}
			    			els{
			    				(A:AUTOPILOT ALTITUDE LOCK VAR, FEET) 34000 &lt; if{
			    					1000 (&gt;K:AP_ALT_VAR_INC)
			    				}
			    			}
			    		}
		    		</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>
		    			(A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) if{
			    			(L:var_VsAdjustMode, bool) if{

			    				(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) -2000 &gt; if{
			    					1 (A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 1000 - (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
								els{
									1 -3000 (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
			    			}
			    			els{
			    				(A:AUTOPILOT ALTITUDE LOCK VAR, FEET) 900 &gt; if{
			    					1000 (&gt;K:AP_ALT_VAR_DEC)
			    				}
			    			}
			    		}
		    		</ANTICLOCKWISE_CODE>
					<WWISE_EVENT>autopilot_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<PART_ID>AltitudeSelector_OuterKnob</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>ALT/VS Adjust</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AltitudeSelector_InnerKnob" Node="AltitudeSelector_InnerKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ANIM_NAME_KNOB>AltitudeSelector_InnerKnob</ANIM_NAME_KNOB>
					<CLOCKWISE_CODE>
						(A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) if{
			    			(L:var_VsAdjustMode, bool) if{
			    				(A:AUTOPILOT ALTITUDE LOCK,bool) if{
									(&gt;K:AP_PANEL_ALTITUDE_OFF)
									(&gt;K:AP_PANEL_VS_ON)
								}

			    				(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 2900 &lt; if{
			    					1 (A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 100 + (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
								els{
									1 3000 (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
			    			}
			    			els{
			    				(A:AUTOPILOT ALTITUDE LOCK VAR, FEET) 34900 &lt; if{
			    					100 (&gt;K:AP_ALT_VAR_INC)
			    				}
			    			}
			    		}
		    		</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>
		    			(A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) if{
			    			(L:var_VsAdjustMode, bool) if{
			    				(A:AUTOPILOT ALTITUDE LOCK,bool) if{
									(&gt;K:AP_PANEL_ALTITUDE_OFF)
									(&gt;K:AP_PANEL_VS_ON)
								}

			    				(A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) -2900 &gt; if{
			    					1 (A:AUTOPILOT VERTICAL HOLD VAR:1, feet per minute) 100 - (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
								els{
									1 -3000 (&gt;K:2:AP_VS_VAR_SET_ENGLISH)
								}
			    			}
			    			els{
			    				(A:AUTOPILOT ALTITUDE LOCK VAR, FEET) 0 &gt; if{
			    					100 (&gt;K:AP_ALT_VAR_DEC)
			    				}
			    			}
			    		}
		    		</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(L:var_VsAdjustMode, bool) ! (&gt;L:var_VsAdjustMode, bool)</LEFT_SINGLE_CODE>
					<WWISE_EVENT>autopilot_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<PART_ID>AltitudeSelector_InnerKnob</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>ALT/VS Adjust</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>AltitudeSelector_KnobPull</NODE_ID>
					<ANIM_NAME>AltitudeSelector_KnobPull</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:var_VsAdjustMode, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="AltitudeSelector_KnobPull">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

		</Component>



		<Component ID="SuctionPressureNeedle" NODE="SuctionPressureNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>SuctionPressureNeedle</NODE_ID>
				<PART_ID>SuctionPressureNeedle</PART_ID>
				<VALUE_CODE>
					(A:SUCTION PRESSURE, inhg) 1 (L:var_PartialVacuumFailure, bool) 0.75 * - *
					1.05 (A:PRESSURE ALTITUDE,feet) 0.000004 * -  *
					d (&gt;L:bksq_suction_pressure)
				</VALUE_CODE>
				<MIN_VALUE>2.8</MIN_VALUE>
				<MAX_VALUE>7.3</MAX_VALUE>
				<START_DEG>60</START_DEG>
				<END_DEG>300</END_DEG>
				<TOTAL_DEG>360</TOTAL_DEG>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0.2</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.22</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>

		</Component>



		<Component ID="Chronometer">

			<UseTemplate Name="BKSQ_LC2_CARD_CHRONO">
				<POWER_CODE>1</POWER_CODE>
				<MODE_VAR_NAME>var_yokeChronoMode_L</MODE_VAR_NAME>
				<TIMER_VAR_NAME>var_yokeTimerMode_L</TIMER_VAR_NAME>
				<MODE_BUTTON_NODE>ChronometerMode</MODE_BUTTON_NODE>
				<RESET_BUTTON_NODE>ChronometerReset</RESET_BUTTON_NODE>
				<DATE_BUTTON_NODE>ChronometerStartStop</DATE_BUTTON_NODE>
				<BUTTON_PRESS_SOUND>autopilot_knob_push_button_on</BUTTON_PRESS_SOUND>
				<BUTTON_RELEASE_SOUND>autopilot_knob_push_button_off</BUTTON_RELEASE_SOUND>
				<DIGIT_PREFIX>YT_</DIGIT_PREFIX>
				<DIGIT_SUFFIX>_L</DIGIT_SUFFIX>
				<MASTER_HIDE_CODE>1</MASTER_HIDE_CODE>
			</UseTemplate>

			<Component ID="ChronometerScreen" NODE="ChronometerScreen">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) 450 / (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * </EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="FreeAirTempUnitButton" Node="FreeAirTempUnitButton">
				<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
					<NODE_ID>FreeAirTempUnitButton</NODE_ID>
					<ANIM_NAME>FreeAirTempUnitButton</ANIM_NAME>
					<PART_ID>FreeAirTempUnitButton</PART_ID>
					<LEFT_SINGLE_CODE>
						(&gt;H:FreeAirTempMode)
						1 (&gt;O:buttonHeld, bool)
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						0 (&gt;O:buttonHeld, bool)
					</LEFT_LEAVE_CODE>
					<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
					<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_DURATION>0.1</ANIM_DURATION>
					<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Air Temp Unit</TOOLTIPID>
				</UseTemplate>
			</Component>

		</Component>

	</Component>



	<!-- EFIS Panel -->

	<Component ID="EFIS_PANEL">

		<Component ID="EFIS_PowerSwitch" NODE="EFIS_PowerSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
    			<ANIM_NAME>EFIS_PowerSwitch</ANIM_NAME>
    			<NODE_ID>EFIS_PowerSwitch</NODE_ID>
    			<LEFT_SINGLE_CODE>
    				(L:var_EFIS_PowerSwitch, bool) ! (&gt;L:var_EFIS_PowerSwitch, bool)

    				(L:var_EFIS_PowerSwitch, bool) (&gt;A:CIRCUIT SWITCH ON:@EADICircuit, bool)
    				(L:var_EFIS_PowerSwitch, bool) (&gt;A:CIRCUIT SWITCH ON:@EHSICircuit, bool)
    			</LEFT_SINGLE_CODE>
    			<ANIM_CODE>(L:var_EFIS_PowerSwitch, bool) 100 *</ANIM_CODE>
    			<ANIM_LENGTH>100</ANIM_LENGTH>
    			<ANIM_LAG>800</ANIM_LAG>
    			<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
    			<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

    			<PART_ID>EFIS_PowerSwitch</PART_ID>
    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>EFIS Power</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="EFIS_TestButton" Node="EFIS_TestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>EFIS_CompositeButton</NODE_ID>
				<ANIM_NAME>EFIS_CompositeButton</ANIM_NAME>
				<PART_ID>EFIS_CompositeButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(&gt;H:EADI_TestButton)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>EADI Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="EFIS_CompositeButton" Node="EFIS_CompositeButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>EFIS_CompositeButton</NODE_ID>
				<ANIM_NAME>EFIS_CompositeButton</ANIM_NAME>
				<PART_ID>EFIS_CompositeButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT ON:@EADICircuit, bool) (A:CIRCUIT ON:@EHSICircuit, bool) or if{
						(L:var_EfisCompositeMode, bool) ! (&gt;L:var_EfisCompositeMode, bool)
					}
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>EFIS Composite</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="EFIS_DecisionHeightSetKnob" NODE="EFIS_DecisionHeightSetKnob">
			<UseTemplate Name="ASOBO_NAVCOM_Base_Template">
				<NODE_ID>EFIS_DecisionHeightSetKnob</NODE_ID>
				<ANIM_NAME>EFIS_DecisionHeightSetKnob</ANIM_NAME>
				<PART_ID>EFIS_DecisionHeightSetKnob</PART_ID>
				<TT_DESCRIPTION_ID>@TT_Package.NAVCOM_KNOB_DECISION_HEIGHT_ACTION</TT_DESCRIPTION_ID>
				<TOOLTIP_TITLE>@TT_Package.NAVCOM_KNOB_DECISION_HEIGHT_TITLE</TOOLTIP_TITLE>
				<WWISE_EVENT>AC_knob_fan</WWISE_EVENT>	

				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IE_NAME>Decision_Height</IE_NAME>
				<IS_INFINITE>True</IS_INFINITE>
				<ANIM_NEVER_FAILS>TRUE</ANIM_NEVER_FAILS>
				<COUNT>36</COUNT>
				<TT_VALUE>(A:DECISION HEIGHT, FEET) '%dft' @sprintf</TT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<SET_STATE_EXTERNAL>
					0 &gt; if{
						(L:var_efisDecisionHeightSet, bool) (L:var_efisDecisionHeightTest, bool) or   (A:RADIO HEIGHT, feet) 2500 &lt; (A:RADIO HEIGHT,feet) 5 &gt; and   or
						(A:CIRCUIT ON:@EADICircuit, bool) and
						(A:DECISION HEIGHT, feet) 2500 &lt; and 
						if{ 
							(&gt;K:INCREASE_DECISION_HEIGHT)
						}
					}
					els{
						(L:var_efisDecisionHeightSet, bool) (L:var_efisDecisionHeightTest, bool) or   (A:RADIO HEIGHT, feet) 2500 &lt; (A:RADIO HEIGHT,feet) 5 &gt; and   or
						(A:CIRCUIT ON:@EADICircuit, bool) and
						(A:DECISION HEIGHT, feet) 0 &gt; and
						if{
							(&gt;K:DECREASE_DECISION_HEIGHT)
						}
					}
				</SET_STATE_EXTERNAL>
			</UseTemplate>

		</Component>


		<Component ID="EFIS_DecisionHeightModeSwitch" NODE="EFIS_DecisionHeightModeSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>EFIS_DecisionHeightModeSwitch</NODE_ID>
				<ANIM_NAME>EFIS_DecisionHeightModeSwitch</ANIM_NAME>
				<PART_ID>EFIS_DecisionHeightModeSwitch</PART_ID>
				<OVERRIDE_ANIM_CODE>
					(L:var_efisDecisionHeightTest, bool) if{
						0
						0 (&gt;O:switchstate)
					}
					els{
						(L:var_efisDecisionHeightSet, bool) if{
							200
							2 (&gt;O:switchstate)
						}
						els{
							100
							1 (&gt;O:switchstate)
						}
					} 
				</OVERRIDE_ANIM_CODE>		
				<CODE_POS_0>
					1 (&gt;L:var_efisDecisionHeightTest, bool)
					0 (&gt;L:var_efisDecisionHeightSet, bool)
					0 (&gt;O:switchstate)
				</CODE_POS_0>
				<CODE_POS_1>
					0 (&gt;L:var_efisDecisionHeightTest, bool)
					0 (&gt;L:var_efisDecisionHeightSet, bool)
					1 (&gt;O:switchstate)
				</CODE_POS_1>
				<CODE_POS_2>
					0 (&gt;L:var_efisDecisionHeightTest, bool)
					1 (&gt;L:var_efisDecisionHeightSet, bool)
					2 (&gt;O:switchstate)
				</CODE_POS_2>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>EFIS Alt Set Mode</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="EFIS_BrightnessKnob" NODE="EFIS_BrightnessKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<NODE_ID>EFIS_BrightnessKnob</NODE_ID>
				<WRAP>False</WRAP>
				<PART_ID>EFIS_BrightnessKnob</PART_ID>
				<ANIM_CODE>(L:var_EADI_Brightness, number)</ANIM_CODE>
				<ANIM_NAME>EFIS_BrightnessKnob</ANIM_NAME>
				<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
				<ANTICLOCKWISE_CODE> (L:var_EADI_Brightness, number) 0 &gt; if{ (L:var_EADI_Brightness, number) 5 - (&gt;L:var_EADI_Brightness, number) }</ANTICLOCKWISE_CODE>
				<CLOCKWISE_CODE> (L:var_EADI_Brightness, number) 100 &lt; if{ (L:var_EADI_Brightness, number) 5 + (&gt;L:var_EADI_Brightness, number) } </CLOCKWISE_CODE>
				<COUNT>20</COUNT>
				<WWISE_EVENT>AC_knob_temp</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>EFIS Brightness</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>EFIS_BrightnessKnob</ANIM_NAME>
				<WWISE_EVENT_1>autopilot_verticalspeed_knob</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>autopilot_verticalspeed_knob</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
		</Component>

		<Component ID="EFIS_DmeModeKnob" NODE="EFIS_DmeModeKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<THRESHOLD_MOUSE>0.03</THRESHOLD_MOUSE>
				<THRESHOLD_INPUT>0.05</THRESHOLD_INPUT>
        		<WRAP>False</WRAP>
        		<PART_ID>EFIS_DmeModeKnob</PART_ID>
        		<ANIM_CODE>(L:var_efisDmeMode, number) 50.0 *</ANIM_CODE>
        		<ANIM_NAME>EFIS_DmeModeKnob</ANIM_NAME>
        		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
        		<ANIM_LAG>500</ANIM_LAG>
        		<ANTICLOCKWISE_CODE> 
	        		(L:var_efisDmeMode, number) 0 &gt; if{ (L:var_efisDmeMode, number) 1 - (&gt;L:var_efisDmeMode, number) }
	        	</ANTICLOCKWISE_CODE>
	        	<CLOCKWISE_CODE> 
	        		(L:var_efisDmeMode, number) 2 &lt; if{ (L:var_efisDmeMode, number) 1 + (&gt;L:var_efisDmeMode, number) }
	        	</CLOCKWISE_CODE>
	        	<COUNT>2</COUNT>
	        	<WWISE_EVENT>light_cabin_switch_off</WWISE_EVENT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
	        	<TOOLTIPID>DME Mode Selector</TOOLTIPID>
        	</UseTemplate>
    	</Component>

	</Component>




	<!-- Engine Instruments -->

	<Component ID="ENGINE_INSTRUMENTATION">

		<Component ID="TurbineTempTestButton" Node="TurbineTempTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>TurbineTempTestButton</ANIM_NAME>
				<PART_ID>TurbineTempTestButton</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_TurbineTempTestButton</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ITT Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="PanelLightTestButton" Node="PanelLightTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>PanelLightTestButton</ANIM_NAME>
				<PART_ID>PanelLightTestButton</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_PanelLightTestButton</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Annunciator Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="TerrainTestButton" Node="TerrainTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>TerrainTestButton</NODE_ID>
				<ANIM_NAME>TerrainTestButton</ANIM_NAME>
				<PART_ID>TerrainTestButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT ON:@TerrainTrafficCircuit, bool) (L:var_AutopilotStartupCounter, number) 0 == (L:var_TerrainTest, number) 0 == and and if{
						30 (&gt;L:var_TerrainTest, number)
					}
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Terrain Test</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 2500 /</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="TerrainInhibitButton" Node="TerrainInhibitButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>TerrainInhibitButton</NODE_ID>
				<ANIM_NAME>TerrainInhibitButton</ANIM_NAME>
				<PART_ID>TerrainInhibitButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT ON:@TerrainTrafficCircuit, bool) if{
						(L:var_TerrainInhibited, bool) ! (&gt;L:var_TerrainInhibited, bool)
					}
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Terrain Inhibit</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@TerrainTrafficCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 2500 /</EMISSIVE_CODE>
			</UseTemplate>
		</Component>




		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>TerrainUnavailableAnnun</NODE_ID>
			<ON_CONDITION_CODE>(L:var_AutopilotStartupCounter, number) 0 &gt; (L:var_TerrainTest, number) 0 &gt; or</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_PanelLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@TerrainTrafficCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>TerrainInhibitAnnun</NODE_ID>
			<ON_CONDITION_CODE>(L:var_TerrainInhibited, bool) (L:var_TerrainTest, number) 0 &gt; or</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_PanelLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@TerrainTrafficCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>TerrainCautionAnnun</NODE_ID>
			<ON_CONDITION_CODE>(L:var_TerrainCaution, bool)</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_PanelLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@TerrainTrafficCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>TerrainWarningAnnun</NODE_ID>
			<ON_CONDITION_CODE>(L:var_TerrainWarning, bool)</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_PanelLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@TerrainTrafficCircuit</CIRCUIT>
		</UseTemplate>














		<Component ID="TorqueNeedle" NODE="TorqueNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>TorqueNeedle</NODE_ID>
				<PART_ID>TorqueNeedle</PART_ID>
				<VALUE_CODE>
					(A:TURB ENG FREE TURBINE TORQUE:1, ft-lbs)
					1 @TorqueBloomSpeed (A:RELATIVE WIND VELOCITY BODY Z, feet per second) 0.592484 * - @TorqueBloomSpeed / @TorqueBloomPercent * -
					1 min *
					d (&gt;L:BKSQ_TBM_TQ, number)
				</VALUE_CODE>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>2500</MAX_VALUE>
				<START_DEG>65</START_DEG>
				<END_DEG>315</END_DEG>
				<TOTAL_DEG>360</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications1Circuit, bool)</POWER_CODE>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.15</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>
		</Component>

		<Component ID="PropRpmNeedle" NODE="PropRpmNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>PropRpmNeedle</NODE_ID>
				<PART_ID>PropRpmNeedle</PART_ID>
				<VALUE_CODE>
					(A:PROP RPM:1, RPM) 1500 min 0.60 * 
					(A:PROP RPM:1, RPM) 1500 - 0 max 1.80 * +
				</VALUE_CODE>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>2200</MAX_VALUE>
				<START_DEG>65</START_DEG>
				<END_DEG>315</END_DEG>
				<TOTAL_DEG>360</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications1Circuit, bool)</POWER_CODE>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.20</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>
		</Component>

		<!-- This produces a sigmoid function to act as a blending weight from Ng > 50% up to the target Ng.  Here, the target Ng is adjusted for density altitude. -->
		<Component ID="GasGeneratorNeedle" NODE="GasGeneratorNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>GasGeneratorNeedle</NODE_ID>
				<PART_ID>GasGeneratorNeedle</PART_ID>
				<VALUE_CODE>
					98 (A:DENSITY ALTITUDE, ft) 31000 / 5.8 * +    (A:ENG N2 RPM:1, PERCENT) -
					1 2.71828 (A:ENG N2 RPM:1, PERCENT) 100 / 25 * 19 - neg pow 1 + /
					*
					(A:ENG N2 RPM:1, PERCENT) +

					(L:BKSQ_TBM_NG, number) -
					 0.18 min
					-0.18 max
					(L:BKSQ_TBM_NG, number) +

					(&gt;L:BKSQ_TBM_NG, number)



					(L:BKSQ_TBM_NG, number) 80 min 0.68 * 
					(L:BKSQ_TBM_NG, number) 80 - 0 max 2.225 * +
				</VALUE_CODE>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>130</MAX_VALUE>
				<START_DEG>75</START_DEG>
				<END_DEG>328</END_DEG>
				<TOTAL_DEG>360</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications2Circuit, bool)</POWER_CODE>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.10</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>
		</Component>

		<Component ID="TurbineTempNeedle" NODE="TurbineTempNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>TurbineTempNeedle</NODE_ID>
				<PART_ID>TurbineTempNeedle</PART_ID>
				<VALUE_CODE>
					(A:ENG COMBUSTION:1, bool) if{

						(A:TURB ENG ITT:1, CELSIUS)
						(A:TURB ENG ITT:1, CELSIUS) 0 max 0.0132532 pow 17491.4 * 18330 - (A:TURB ENG ITT:1, CELSIUS) /
						(L:var_bleedStateWindup, number) 0.015 *   1 + *
						(A:DENSITY ALTITUDE, ft) 32000 / 0.130 *   1 + *


						58 (L:BKSQ_TBM_NG, number) - 0 max 12.25 /
						(A:ENG COMBUSTION:1, bool) *
						32.5 (L:var_NgAtFuelIntroduction, number) 10 - - 0 max 32.5 / *	
						2.5 min 
						1 max *
						0 max *

						(A:AMBIENT TEMPERATURE, CELSIUS) max
					}
					els{
						(A:AMBIENT TEMPERATURE, CELSIUS)
					}

					(&gt;L:BKSQ_TBM_ITT, number)


					(L:BKSQ_TBM_ITT, number) (O:lastITT, number) &lt; if{

						0.005 (O:lastITT, number) 285 - 0 max 1.075 pow 700 / * 
						0.002 (L:BKSQ_TBM_NG, number) 100 / *
						0.0004 (L:BKSQ_PersistentIndicatedAirspeed, knots) 50 / *
						+ +
						0.00003 max
						(&gt;O:ittDecayRate, number)

						(L:BKSQ_TBM_ITT, number) (O:ittDecayRate, number) *
						(O:lastITT, number) 1 (O:ittDecayRate, number) - *
						+
						(&gt;L:BKSQ_TBM_ITT, number)
					}

					(L:BKSQ_TBM_ITT, number) (&gt;O:lastITT, number)

					(L:var_TurbineTempTestButton, bool) if{
						1200
					}
					els{
						(L:BKSQ_TBM_ITT, number)
					}
				</VALUE_CODE>
				<!--
					Hot Start Component:
					
					Second Try
					100 74.6118 (L:BKSQ_TBM_NG, number) 0.0909163 pow * - (A:ENG COMBUSTION:1, bool) * 1 max * 0 max *

					Original:
					58 (L:BKSQ_TBM_NG, number) - 0 max 12.25 / (A:ENG COMBUSTION:1, bool) * 1 max * 0 max *
				-->
				<MIN_VALUE>150</MIN_VALUE>
				<MAX_VALUE>1250</MAX_VALUE>
				<START_DEG>57</START_DEG>
				<END_DEG>303</END_DEG>
				<TOTAL_DEG>360</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications2Circuit, bool)</POWER_CODE>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.10</VARIABILITY_RANDOM_MULTI>
				<LOWPASSCONSTANT>0.035</LOWPASSCONSTANT>
			</UseTemplate>

				
			<!-- Bleed Air Windup and New Hotstart -->
			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>20</FREQUENCY>
				<UPDATE_CODE>
					(A:TURB ENG FUEL AVAILABLE:1, bool) 0 &gt; (L:var_lastFuelAvailable, number) 0 == and
					(L:BKSQ_TBM_NG, number) (L:var_NgAtFuelIntroduction, number) &lt; 
					or
					if{
						(L:BKSQ_TBM_NG, number) (&gt;L:var_NgAtFuelIntroduction, number)
					}

					(A:TURB ENG FUEL AVAILABLE:1, bool) (&gt;L:var_lastFuelAvailable, number)

					(A:BLEED AIR ENGINE:1, Bool) (L:var_bleedState, number) * (L:var_bleedStateWindup, number) - 75 / 
					(L:var_bleedStateWindup, number) + (&gt;L:var_bleedStateWindup, number) 
				</UPDATE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="OilPressureNeedle" NODE="OilPressureNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE">
				<NODE_ID>OilPressureNeedle</NODE_ID>
				<PART_ID>OilPressureNeedle</PART_ID>
				<SIMVAR>ENG OIL PRESSURE:1</SIMVAR>
				<UNITS>PSI</UNITS>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>200</MAX_VALUE>
				<START_DEG>32</START_DEG>
				<END_DEG>146</END_DEG>
				<TOTAL_DEG>180</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications1Circuit, bool)</POWER_CODE>

				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0.5</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.12</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 800 /
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<Component ID="OilTemperatureNeedle" NODE="OilTemperatureNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>OilTemperatureNeedle</NODE_ID>
				<PART_ID>OilTemperatureNeedle</PART_ID>
				<VALUE_CODE>
					(L:BKSQ_TBM_OILTEMPERATURE, CELSIUS)
				</VALUE_CODE>
				<UNITS>CELSIUS</UNITS>
				<MIN_VALUE>-45</MIN_VALUE>
				<MAX_VALUE>160</MAX_VALUE>
				<START_DEG>32</START_DEG>
				<END_DEG>143</END_DEG>
				<TOTAL_DEG>180</TOTAL_DEG>
				<POWER_CODE>(A:CIRCUIT ON:@EngineIndications1Circuit, bool)</POWER_CODE>

				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0.25</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.12</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 800 /
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>


		<!-- Custom Fuel Flow and Oil Simulation -->
		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>30</FREQUENCY>
			<UPDATE_CODE>
				(A:ENG FUEL FLOW GPH:1, GALLONS PER HOUR) 0.1 *
				(L:BKSQ_TBM_FuelFlow, number) 0.9 *
				+
				(&gt;L:BKSQ_TBM_FuelFlow, number)


				(A:ENG OIL TEMPERATURE:1, CELSIUS) (L:BKSQ_TBM_OILTEMPERATURE, CELSIUS) &gt; if{
					(A:ENG OIL TEMPERATURE:1, CELSIUS) (&gt;L:BKSQ_TBM_OILTEMPERATURE, CELSIUS)
				}
				els{
					(A:ENG OIL TEMPERATURE:1, CELSIUS) 0.0001 *
					(L:BKSQ_TBM_OILTEMPERATURE, CELSIUS) 0.9999 *
					+
					(&gt;L:BKSQ_TBM_OILTEMPERATURE, CELSIUS)
				}
			</UPDATE_CODE>
		</UseTemplate>

	</Component>






	<!-- Main Panel -->

	<Component ID="MAIN_PANEL">



		<!-- <UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
			<NODE_ID>AirspeedNeedle_L</NODE_ID>
			<PART_ID>AirspeedNeedle_L</PART_ID>
			<VALUE_CODE>
				 (A:AIRSPEED INDICATED, KNOTS) 0.443737 pow  42.6877 * 214.379 -
				 36 /
			</VALUE_CODE>
			<MIN_VALUE>35</MIN_VALUE>
			<MAX_VALUE>350</MAX_VALUE>
			<START_DEG>0</START_DEG>
			<END_DEG>360</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>1</POWER_CODE>
			<USE_VARIABILITY>FALSE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
		</UseTemplate> -->
		<!-- (A:AIRSPEED INDICATED, KNOTS) 0.443737 pow 42.6877 * 214.379 - -->

		<Component ID="AirspeedNeedle_L" NODE="AirspeedNeedle_L">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>AirspeedNeedle_L</NODE_ID>
				<ANIM_NAME>AirspeedNeedle_L</ANIM_NAME>
				<PART_ID>AirspeedNeedle_L</PART_ID>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_WRAP>TRUE</ANIM_WRAP>
				<ANIM_CODE>
					(A:AIRSPEED INDICATED, KNOTS) 0.443737 pow  42.6877 * 214.379 -
					0 max
					3.6 /
				</ANIM_CODE>
			</UseTemplate>
		</Component>

		<UseTemplate Name="BKSQ_AttitudeIndicatorWithGyroSimulation">
			<ELECTRIC_GYRO_CIRCUIT>@ADI2Circuit</ELECTRIC_GYRO_CIRCUIT>
			<VOLTAGE_MAX_AMPS>1500</VOLTAGE_MAX_AMPS>
			<VOLTAGE_BUS>@MAIN_DISTRIBUTION</VOLTAGE_BUS>
			<PITCH_LIMIT_DEG>39</PITCH_LIMIT_DEG>
			<GYRO_SPEED_VAR>var_AttitudeGyroSpeed_1</GYRO_SPEED_VAR>
			<COMPONENT_NAME>INSTRUMENT_AttitudeIndicator_1</COMPONENT_NAME>
			<PITCH_DEGREES_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Pitch_1</PITCH_DEGREES_ANIM_NAME>
			<BANK_DEGREES_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Bank_1</BANK_DEGREES_ANIM_NAME>
			<BARS_POSITION_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Bars_1</BARS_POSITION_ANIM_NAME>
			<FLAG_ANIM_ANIM>INSTRUMENT_AttitudeIndicator_Flag_1</FLAG_ANIM_ANIM>
			<SETTLING_TIME>0.01</SETTLING_TIME>
			<HIGH_FREQ_VIBRATION>7.65</HIGH_FREQ_VIBRATION>
			<SPIN_UP_TIME_CONST>0.005</SPIN_UP_TIME_CONST>
			<SPIN_DOWN_TIME_CONST>0.0002</SPIN_DOWN_TIME_CONST>
		</UseTemplate>

		<UseTemplate Name="ASOBO_INSTRUMENT_Knob_AttitudeCage_Template">
			<ID>2</ID>
			<ANIM_NAME_KNOB>INSTRUMENT_AttitudeIndicator_Knob_1</ANIM_NAME_KNOB>
			<NODE_ID>INSTRUMENT_AttitudeIndicator_Knob_1</NODE_ID>
			<NO_CAGE>True</NO_CAGE> 
		</UseTemplate>
		
		<Component ID="EHSI">

			<Component ID="HsiBrightnessKnob" NODE="HsiBrightnessKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
					<NODE_ID>HsiBrightnessKnob</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>HsiBrightnessKnob</PART_ID>
					<ANIM_CODE>(L:var_EHSI_Brightness, number)</ANIM_CODE>
					<ANIM_NAME>HsiBrightnessKnob</ANIM_NAME>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANTICLOCKWISE_CODE> (L:var_EHSI_Brightness, number) 0 &gt; if{ (L:var_EHSI_Brightness, number) 5 - (&gt;L:var_EHSI_Brightness, number) }</ANTICLOCKWISE_CODE>
					<CLOCKWISE_CODE> (L:var_EHSI_Brightness, number) 100 &lt; if{ (L:var_EHSI_Brightness, number) 5 + (&gt;L:var_EHSI_Brightness, number) } </CLOCKWISE_CODE>
					<COUNT>20</COUNT>
					<WWISE_EVENT>AC_knob_temp</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Brightness</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
					<ANIM_NAME>HsiBrightnessKnob</ANIM_NAME>
					<WWISE_EVENT_1>autopilot_verticalspeed_knob</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
					<DIRECTION_1>Forward</DIRECTION_1>
					<WWISE_EVENT_2>autopilot_verticalspeed_knob</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
					<DIRECTION_2>Backward</DIRECTION_2>
				</UseTemplate>
			</Component>

			<Component ID="HsiHeadingKnob" NODE="HsiHeadingKnob">
				<UseTemplate Name="ASOBO_AUTOPILOT_Knob_Heading_Template">
					<NODE_ID>HsiHeadingKnob</NODE_ID>
					<PART_ID>HsiHeadingKnob</PART_ID>
					<ANIM_NAME_KNOB>HsiHeadingKnob</ANIM_NAME_KNOB>
					<ANIM_NAME_PUSH>HsiHeadingButton</ANIM_NAME_PUSH>
					<EMISSIVE_KNOB/>
					<COUNT>36</COUNT>
					<WWISE_EVENT>DummySound</WWISE_EVENT>
					<WWISE_EVENT_1>AUTOPILOT_PUSH_BUTTON_OFF</WWISE_EVENT_1>
					<WWISE_EVENT_2>DummySound</WWISE_EVENT_2>
					<ROTATION_SPEED>5</ROTATION_SPEED>
					<THRESHOLD_X_INPUT>0.01</THRESHOLD_X_INPUT>
					<THRESHOLD_X_MOUSE>0.001</THRESHOLD_X_MOUSE>
					<TYPE>PUSH</TYPE>
				</UseTemplate>
			</Component>

			<!-- <Component ID="HsiCourseKnob" Node="HsiCourseKnob">
				<Parameters Type="Override">
					<KNOB_ID>EHSI_Course</KNOB_ID>
					<BTN_ID_EXTERNAL>EHSI_Course_Button</BTN_ID_EXTERNAL>
				</Parameters>
				<UseTemplate Name="ASOBO_AS1000_Push_Event_Only_Template">
					<TT_DESCRIPTION_ID>@TT_Package.AS1000_PFD_KNOB_COURSE_ACTION_SET</TT_DESCRIPTION_ID>
					<BTN_ID>EHSI_Course_Button</BTN_ID>
					<SET_STATE_EXTERNAL>(&gt;H:EHSI_CourseSync)</SET_STATE_EXTERNAL>
				</UseTemplate>
				<UseTemplate Name="ASOBO_AS1000_Knob_Template">
					<KNOB_TYPE>PUSH</KNOB_TYPE>
					<ANIM_NAME_KNOB>HsiCourseKnob</ANIM_NAME_KNOB>
					<ANIM_NAME_PUSH>HsiCourseButton</ANIM_NAME_PUSH>
					<ROTATION_SPEED>5</ROTATION_SPEED>
					<THRESHOLD_X_MOUSE>0.001</THRESHOLD_X_MOUSE>
					<THRESHOLD_X_INPUT>0.02</THRESHOLD_X_INPUT>
				</UseTemplate>
			</Component> -->

			<!-- (&gt;H:EHSI_CourseInc) -->
			<!-- (&gt;H:EHSI_CourseDec) -->

			<Component ID="HsiCourseKnob" NODE="HsiCourseKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<NODE_ID>HsiCourseKnob</NODE_ID>
					<PART_ID>HsiCourseKnob</PART_ID>
					<ANIM_NAME_KNOB>HsiCourseKnob</ANIM_NAME_KNOB>
					<CLOCKWISE_CODE_DEFAULT_IM>
						(L:EFIS_NavigationSource, number) 0 == if{
							(&gt;K:VOR1_OBI_INC)
						}
						els{
							(L:EFIS_NavigationSource, number) 1 == if{
								(&gt;K:VOR2_OBI_INC)
							}
							els{
								(L:EFIS_NavigationSource, number) 3 == if{
									(L:var_RNAV_OBS, number) 1 + 360 % (&gt;L:var_RNAV_OBS, number)
								}
								els{
									(L:EFIS_NavigationSource, number) 4 == if{
										(L:var_MLS_OBS, number) 1 + 360 % (&gt;L:var_MLS_OBS, number)
									}
									els{
										(L:EFIS_NavigationSource, number) 5 == if{
											(L:var_ADF_OBS, number) 1 + 360 % (&gt;L:var_ADF_OBS, number)
										}
									}
								}
							}
						}
					</CLOCKWISE_CODE_DEFAULT_IM>
					<ANTICLOCKWISE_CODE_DEFAULT_IM>
						(L:EFIS_NavigationSource, number) 0 == if{
							(&gt;K:VOR1_OBI_DEC)
						}
						els{
							(L:EFIS_NavigationSource, number) 1 == if{
								(&gt;K:VOR2_OBI_DEC)
							}
							els{
								(L:EFIS_NavigationSource, number) 3 == if{
									(L:var_RNAV_OBS, number) 0 &gt;
									if{ (L:var_RNAV_OBS, number) 1 - (&gt;L:var_RNAV_OBS, number) }
									els{ 360 (&gt;L:var_RNAV_OBS, number) }

								}
								els{
									(L:EFIS_NavigationSource, number) 4 == if{
										(L:var_MLS_OBS, number) 0 &gt;
										if{ (L:var_MLS_OBS, number) 1 - (&gt;L:var_MLS_OBS, number) }
										els{ 360 (&gt;L:var_MLS_OBS, number) }

									}
									els{
										(L:EFIS_NavigationSource, number) 5 == if{
											(L:var_ADF_OBS, number) 0 &gt;
											if{ (L:var_ADF_OBS, number) 1 - (&gt;L:var_ADF_OBS, number) }
											els{ 360 (&gt;L:var_ADF_OBS, number) }

										}
									}
								}
							}
						}
					</ANTICLOCKWISE_CODE_DEFAULT_IM>
					<CLOCKWISE_CODE_DRAG_IM>
						(L:EFIS_NavigationSource, number) 0 == if{
							(&gt;K:VOR1_OBI_INC)
						}
						els{
							(L:EFIS_NavigationSource, number) 1 == if{
								(&gt;K:VOR2_OBI_INC)
							}
							els{
								(L:EFIS_NavigationSource, number) 3 == if{
									(L:var_RNAV_OBS, number) 1 + 360 % (&gt;L:var_RNAV_OBS, number)
								}
								els{
									(L:EFIS_NavigationSource, number) 4 == if{
										(L:var_MLS_OBS, number) 1 + 360 % (&gt;L:var_MLS_OBS, number)
									}
									els{
										(L:EFIS_NavigationSource, number) 5 == if{
											(L:var_ADF_OBS, number) 1 + 360 % (&gt;L:var_ADF_OBS, number)
										}
									}
								}
							}
						}
					)</CLOCKWISE_CODE_DRAG_IM>
					<ANTICLOCKWISE_CODE_DRAG_IM>
						(L:EFIS_NavigationSource, number) 0 == if{
							(&gt;K:VOR1_OBI_DEC)
						}
						els{
							(L:EFIS_NavigationSource, number) 1 == if{
								(&gt;K:VOR2_OBI_DEC)
							}
							els{
								(L:EFIS_NavigationSource, number) 3 == if{
									(L:var_RNAV_OBS, number) 0 &gt;
									if{ (L:var_RNAV_OBS, number) 1 - (&gt;L:var_RNAV_OBS, number) }
									els{ 360 (&gt;L:var_RNAV_OBS, number) }

								}
								els{
									(L:EFIS_NavigationSource, number) 4 == if{
										(L:var_MLS_OBS, number) 0 &gt;
										if{ (L:var_MLS_OBS, number) 1 - (&gt;L:var_MLS_OBS, number) }
										els{ 360 (&gt;L:var_MLS_OBS, number) }

									}
									els{
										(L:EFIS_NavigationSource, number) 5 == if{
											(L:var_ADF_OBS, number) 0 &gt;
											if{ (L:var_ADF_OBS, number) 1 - (&gt;L:var_ADF_OBS, number) }
											els{ 360 (&gt;L:var_ADF_OBS, number) }

										}
									}
								}
							}
						}
					</ANTICLOCKWISE_CODE_DRAG_IM>
					<LEFT_SINGLE_CODE>(&gt;H:EHSI_CourseSync) 50 (&gt;L:var_efisCourseButtonAnim, number)</LEFT_SINGLE_CODE>
					<ANIM_HANDLED_SEPARATELY>False</ANIM_HANDLED_SEPARATELY>
					<ROTATION_SPEED>5</ROTATION_SPEED>
					<THRESHOLD_X_INPUT>0.01</THRESHOLD_X_INPUT>
					<THRESHOLD_X_MOUSE>0.001</THRESHOLD_X_MOUSE>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Course</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Update">
					<FREQUENCY>10</FREQUENCY>
					<UPDATE_CODE>
						(L:var_efisCourseButtonAnim, number) 0 &gt;
						if{ (L:var_efisCourseButtonAnim, number) 10 - (&gt;L:var_efisCourseButtonAnim, number) }
					</UPDATE_CODE>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>HsiCourseButton</NODE_ID>
					<ANIM_NAME>HsiCourseButton</ANIM_NAME>
					<ANIM_LENGTH>100</ANIM_LENGTH>
					<ANIM_LAG>2000</ANIM_LAG>
					<ANIM_CODE>(L:var_efisCourseButtonAnim, number)</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="HsiCourseButton">
					<EventTrigger NormalizedTime="1.0" Direction="Backward">
						<SoundEvent WwiseEvent="AUTOPILOT_PUSH_BUTTON_ON" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.2" Direction="Forward">
						<SoundEvent WwiseEvent="AUTOPILOT_PUSH_BUTTON_OFF" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>


			<!-- EADI -->
			<Component ID="TurnCoordinatorInside" NODE="TurnCoordinatorInside">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EADICircuit, Bool) * 500 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<!-- EHSI -->
			<Component ID="Hsi12Button" Node="Hsi12Button">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>Hsi12Button</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_SystemSource)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS System Source</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="Hsi12Button_EM" NODE="Hsi12Button_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiNavButton" Node="HsiNavButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiNavButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_NavSource)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Nav Source</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiNavButton_EM" NODE="HsiNavButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiHsiButton" Node="HsiHsiButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiHsiButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_HsiMode)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS HSI Mode</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiHsiButton_EM" NODE="HsiHsiButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiArcButton" Node="HsiArcButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiArcButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_ArcMode)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Arc Mode</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiArcButton_EM" NODE="HsiArcButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiTestRefButton" Node="HsiTestRefButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiTestRefButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_TestReference)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Test Ref.</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, bool) * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiUpButton" Node="HsiUpButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiUpButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_RangeUp)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Range Inc.</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiUpButton_EM" NODE="HsiUpButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiDownButton" Node="HsiDownButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiDownButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_RangeDown)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Range Dec.</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiDownButton_EM" NODE="HsiDownButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiSolidNeedleButton" Node="HsiSolidNeedleButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiSolidNeedleButton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_SolidBearing)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Bearing Pointer 1</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiSolidNeedleButton_EM" NODE="HsiSolidNeedleButton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiHollowNeedleButtton" Node="HsiHollowNeedleButtton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>HsiHollowNeedleButtton</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:EHSI_HollowBearing)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Bearing Pointer 2</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="HsiHollowNeedleButtton_EM" NODE="HsiHollowNeedleButtton_EM">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>
						(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@EHSICircuit, Bool) * 200 /
					</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

		</Component>







		<Component ID="ALTIMETER">

			<Component ID="AltitudeReferenceBug" NODE="AltitudeReferenceBug">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>1</ROTATION_SPEED>
					<NODE_ID>AltitudeReferenceBug</NODE_ID>
					<ANIM_NAME>AltitudeReferenceBug</ANIM_NAME>
					<ANIM_CODE>(L:var_AltitudeReferenceBug, number)</ANIM_CODE>
		        	<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		        	<ANTICLOCKWISE_CODE>(L:var_AltitudeReferenceBug, number) 0.005 - (&gt;L:var_AltitudeReferenceBug, number)</ANTICLOCKWISE_CODE>
		        	<CLOCKWISE_CODE>(L:var_AltitudeReferenceBug, number) 0.005 + (&gt;L:var_AltitudeReferenceBug, number)</CLOCKWISE_CODE>

					<PART_ID>AltitudeReferenceBug</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Altitude Reference</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AltimeterAdjustKnob" Node="AltimeterAdjustKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AltimeterAdjustKnob</NODE_ID>
					<PART_ID>AltimeterAdjustKnob</PART_ID>
					<ANIM_NAME>AltimeterAdjustKnob</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>
		    			(A:CIRCUIT ON:@AltitudeEncoderCircuit, bool) (A:KOHLSMAN SETTING HG, inhg) 32.0 &lt; and if{ 1 (&gt;K:KOHLSMAN_INC) }
		    		</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>
		    			(A:CIRCUIT ON:@AltitudeEncoderCircuit, bool) (A:KOHLSMAN SETTING HG, inhg) 27.0 &gt; and if{ 1 (&gt;K:KOHLSMAN_DEC) }
		    		</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>autopilot_verticalspeed_knob</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Baro Adjust</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AltimeterStandardButton" Node="AltimeterStandardButton">
				<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
					<NODE_ID>AltimeterStandardButton</NODE_ID>
					<ANIM_NAME>AltimeterStandardButton</ANIM_NAME>
					<PART_ID>AltimeterStandardButton</PART_ID>
					<LEFT_SINGLE_CODE>
						(A:CIRCUIT ON:@AltitudeEncoderCircuit, bool) if{
							1 (&gt;K:BAROMETRIC_STD_PRESSURE)
						}
						1 (&gt;O:buttonHeld, bool)
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						0 (&gt;O:buttonHeld, bool)
					</LEFT_LEAVE_CODE>
					<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
					<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_DURATION>0.1</ANIM_DURATION>
					<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

					<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Baro Standard</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AltimeterNeedle" NODE="AltimeterNeedle">

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ID>1</ID>
					<NODE_ID>AltimeterNeedle</NODE_ID>
					<ANIM_NAME>AltimeterNeedle</ANIM_NAME>
					<PART_ID>AltimeterNeedle</PART_ID>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_WRAP>TRUE</ANIM_WRAP>
					<ANIM_CODE>
						(A:CIRCUIT ON:@AltitudeEncoderCircuit, bool) if{
							(A:INDICATED ALTITUDE:1, feet) 0 &gt;= if{ 
								(A:INDICATED ALTITUDE:1, feet) 100 10 / / 100 %
							}
							els{
								(A:INDICATED ALTITUDE:1, feet) 100 10 / / 100 % 100 +
							}
						}
						els{
							0
						}



						(&gt;O:inputValue_altimeterNeedle, number)

						(O:inputValue_altimeterNeedle, number) (O:lastInputValue_altimeterNeedle, number) - -50 &lt; if{
							(O:phaseOffset_altimeterNeedle, number) 100 + (&gt;O:phaseOffset_altimeterNeedle, number)
						}
						els{
							(O:inputValue_altimeterNeedle, number) (O:lastInputValue_altimeterNeedle, number) - 50 &gt; if{
								(O:phaseOffset_altimeterNeedle, number) 100 - (&gt;O:phaseOffset_altimeterNeedle, number)	
							}
						}

						(O:inputValue_altimeterNeedle, number) (&gt;O:lastInputValue_altimeterNeedle, number)
						(O:inputValue_altimeterNeedle, number) (O:phaseOffset_altimeterNeedle, number) +

						1.26333 * (O:lastAnimValue_altimeterNeedle, number) 0.49357 * + (O:secondLastAnimValue_altimeterNeedle, number) -0.75690 * +
						(O:lastAnimValue_altimeterNeedle, number) (&gt;O:secondlastAnimValue_altimeterNeedle, number)
						(&gt;O:lastAnimValue_altimeterNeedle, number)
						(O:lastAnimValue_altimeterNeedle, number)
						100000 + 100 %
					</ANIM_CODE>
					<COUNT>100</COUNT>
					<WWISE_EVENT>elevator_switch</WWISE_EVENT>
				</UseTemplate>

			</Component>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AltimeterAltitudeAlert</NODE_ID>
				<ON_CONDITION_CODE>
					(A:CIRCUIT ON:@AltitudeSelectorCircuit, bool) (L:var_AltitudeAlert, bool) and
				</ON_CONDITION_CODE>
				<BRIGHTNESS_FACTOR>1.25</BRIGHTNESS_FACTOR>
				<CIRCUIT>@AltitudeEncoderCircuit</CIRCUIT>
			</UseTemplate>

		</Component>

		<Component ID="INSTRUMENT_Ball_Turn_1" NODE="INSTRUMENT_Ball_Turn_1">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_Ball_Turn_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_Ball_Turn_1</ANIM_NAME>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_CODE>
					(A:TURN COORDINATOR BALL, position) 50 * 50 + 0.08 *  (L:BKSQ_TurnCoordinatorBall, number) 0.92 *  + d (&gt;L:BKSQ_TurnCoordinatorBall, number)
				</ANIM_CODE>
			</UseTemplate>
		</Component>



		<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
			<NODE_ID>VerticalSpeedNeedle_L</NODE_ID>
			<PART_ID>VerticalSpeedNeedle_L</PART_ID>
			<VALUE_CODE>
				(A:VERTICAL SPEED, ft/min) abs 2000 &lt; if{
					(A:VERTICAL SPEED, ft/min)
				}
				els{
					(A:VERTICAL SPEED, ft/min) 0 &gt; if{
						(A:VERTICAL SPEED, ft/min) 2000 - 2 / 2000 +
					}
					els{
						(A:VERTICAL SPEED, ft/min) 2000 + 2 / 2000 -
					}
				}

				(A:PROP RPM:1, RPM) 1000 /    1 (L:BKSQ_PersistentIndicatedAirspeed, knots) 100 / 1.0 min 0.0 max -   *
				rand 2 * 1 - *
				265 *
				+

				0.012 * (L:BKSQ_TBM_VerticalSpeed_1, number) 1.891 * + (O:secondLastAnimValue_VerticalSpeed1, number) -0.903 * +
				(L:BKSQ_TBM_VerticalSpeed_1, number) (&gt;O:secondlastAnimValue_VerticalSpeed1, number)
				d (&gt;L:BKSQ_TBM_VerticalSpeed_1, number)
			</VALUE_CODE>
			<MIN_VALUE>-4000</MIN_VALUE>
			<MAX_VALUE>4000</MAX_VALUE>
			<START_DEG>0</START_DEG>
			<END_DEG>360</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>1</POWER_CODE>
			<USE_VARIABILITY>FALSE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
		</UseTemplate>

		
			<!-- 0.419394 (A:VERTICAL SPEED, ft/min) abs 0.697861 pow * 0.990963 -
			(A:VERTICAL SPEED, ft/min) sign * -->
			


		<Component ID="LOCALIZER2">

			<!-- Custom Localizer Implementation -->
			<Component ID="INSTRUMENT_CDI_Compass_2" Node="INSTRUMENT_CDI_Compass_2">
				<UseTemplate Name="ASOBO_GT_Anim_Sim">
					<ANIM_NAME>INSTRUMENT_CDI_Compass_2</ANIM_NAME>
					<!-- [0, 360] -->
					<ANIM_LENGTH>360</ANIM_LENGTH>
					<ANIM_SIMVAR>NAV OBS:2</ANIM_SIMVAR>
					<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
					<PART_ID/>
					<ANIM_WRAP>1</ANIM_WRAP>
				</UseTemplate>
			</Component>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_CDI_Needle_Localizer_2</ANIM_NAME>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and if{
							(A:GPS CDI NEEDLE, Number) 127 +
						}
						els{
							127
						}
					}
					els{
						(A:NAV HAS NAV:2, Bool) (A:CIRCUIT ON:@Com2Circuit, Bool) (A:CIRCUIT ON:@Nav2Circuit, Bool) and and if{
							(L:BKSQ_VOR_CDI_2_Degraded, Number) 127 +
						}
						els{
							127
						}
					}

					(A:ACCELERATION BODY X, feet per second squared) 0.35 * -

					0.012 * (L:BKSQ_TBM_LOC_2, number) 1.891 * + (O:secondLastAnimValue_cdiLoc2, number) -0.903 * +
					(L:BKSQ_TBM_LOC_2, number) (&gt;O:secondlastAnimValue_cdiLoc2, number)
					(&gt;L:BKSQ_TBM_LOC_2, number)
					(L:BKSQ_TBM_LOC_2, number)
				</ANIM_CODE>
				<ANIM_LENGTH>254</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_CDI_Needle_Glide_2</ANIM_NAME>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and (A:GPS APPROACH MODE, enum) 0 &gt; and if{
							(A:GPS GSI NEEDLE, Number) -1 * 127 +
						}
						els{
							127
						}
					}
					els{
						(A:NAV HAS GLIDE SLOPE:2, Bool) (A:CIRCUIT ON:@Com2Circuit, bool) (A:CIRCUIT ON:@Nav2Circuit, bool) (A:CIRCUIT ON:@GeneralAvionicsCircuit, bool) and and and if{
							(A:NAV GSI:2, Number) -1 * 127 +
						}
						els{
							127
						}
					}

					(A:ACCELERATION BODY Y, feet per second squared) 0.15 * -

					0.012 * (L:BKSQ_TBM_GLIDE_2, number) 1.891 * + (O:secondLastAnimValue_cdiGlide2, number) -0.903 * +
					(L:BKSQ_TBM_GLIDE_2, number) (&gt;O:secondlastAnimValue_cdiGlide2, number)
					(&gt;L:BKSQ_TBM_GLIDE_2, number)
					(L:BKSQ_TBM_GLIDE_2, number)
				</ANIM_CODE>
				<ANIM_LENGTH>254</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_CDI_Flag_To_2</ANIM_NAME>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and if{
							(A:HSI TF FLAGS, Enum) 1 == 100 *
						}
						els{
							0
						}
					}
					els{
						(A:NAV HAS NAV:2, bool) (L:BKSQ_VOR_TO_2_Degraded, Number) (A:CIRCUIT ON:@Com2Circuit, Bool) (A:CIRCUIT ON:@Nav2Circuit, Bool) * * * 100 *
					}
				</ANIM_CODE>
				<ANIM_LAG>500</ANIM_LAG>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_CDI_Flag_From_2</ANIM_NAME>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and if{
							(A:HSI TF FLAGS, Enum) 2 == 100 *
						}
						els{
							0
						}
					}
					els{
						(A:NAV HAS NAV:2, bool) (L:BKSQ_VOR_FROM_2_Degraded, Number) (A:CIRCUIT ON:@Com2Circuit, Bool) (A:CIRCUIT ON:@Nav2Circuit, Bool) * * * 100 *
					}
				</ANIM_CODE>
				<ANIM_LAG>500</ANIM_LAG>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_CDI_Flag_Localizer_2</NODE_ID>
				<ANIM_NAME>INSTRUMENT_CDI_Flag_Localizer_2</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and if{
							(A:GPS IS ACTIVE FLIGHT PLAN, Bool) 100 *
						}
						els{
							0
						}
					}
					els{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:CIRCUIT ON:@Nav2Circuit, bool) and (A:NAV HAS NAV:2, Bool) and 100 *
					}
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_CDI_Flag_Glide_2</NODE_ID>
				<ANIM_NAME>INSTRUMENT_CDI_Flag_Glide_2</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_CODE>
					(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and if{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:GPS IS ACTIVE FLIGHT PLAN, Bool) and (A:GPS APPROACH MODE, enum) 0 &gt; and if{
							(A:GPS HAS GLIDEPATH, Bool) 100 *
						}
						els{
							0
						}
					}
					els{
						(A:CIRCUIT ON:@Com2Circuit, bool) (A:CIRCUIT ON:@Nav2Circuit, bool) (A:CIRCUIT ON:@GeneralAvionicsCircuit, bool) and and (A:NAV HAS GLIDE SLOPE:2, Bool) and 100 *
					}
				</ANIM_CODE>
			</UseTemplate>
			<Component ID="INSTRUMENT_CDI_Knob_Course_2" NODE="INSTRUMENT_CDI_Knob_Course_2">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<NODE_ID>INSTRUMENT_CDI_Knob_Course_2</NODE_ID>
					<ANIM_NAME>INSTRUMENT_CDI_Knob_Course_2</ANIM_NAME>
					<CLOCKWISE_CODE_DEFAULT_IM>1 (&gt;K:VOR2_OBI_INC) </CLOCKWISE_CODE_DEFAULT_IM>
					<ANTICLOCKWISE_CODE_DEFAULT_IM>1 (&gt;K:VOR2_OBI_DEC) </ANTICLOCKWISE_CODE_DEFAULT_IM>
					<CLOCKWISE_CODE_DRAG_IM>1 (&gt;K:VOR2_OBI_INC) </CLOCKWISE_CODE_DRAG_IM>
					<ANTICLOCKWISE_CODE_DRAG_IM>1 (&gt;K:VOR2_OBI_DEC) </ANTICLOCKWISE_CODE_DRAG_IM>
				</UseTemplate>
			</Component>


			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>Localizer_VLOC_Annun</NODE_ID>
				<ON_CONDITION_CODE>(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and !</ON_CONDITION_CODE>
				<BRIGHTNESS_FACTOR>0.5</BRIGHTNESS_FACTOR>
				<CIRCUIT>@Nav2Circuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>Localizer_GPS_Annun</NODE_ID>
				<ON_CONDITION_CODE>(L:XMLVAR_GPS_DISABLED_AS530_2, bool) ! (L:AS530_CDI_Source_2, Bool) and</ON_CONDITION_CODE>
				<BRIGHTNESS_FACTOR>0.5</BRIGHTNESS_FACTOR>
				<CIRCUIT>@Nav2Circuit</CIRCUIT>
			</UseTemplate>



			

		</Component>


		<Component ID="RMI">

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>RmiAdfNeedle</ANIM_NAME>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_WRAP>True</ANIM_WRAP>
				<ANIM_CODE>
					(A:CIRCUIT ON:@ADFCircuit, bool) (A:CIRCUIT ON:@RMICircuit, bool) and if{
						(A:ADF SIGNAL:1, bool) if{
							(L:BKSQ_ADF_BRG_1_Degraded, Number) 360 + 0.27777 * 
						} els{ 10 }
					} els{ 0 }
					(&gt;O:inputValue_rmiAdfNeedle, number)

					(O:inputValue_rmiAdfNeedle, number) (O:lastInputValue_rmiAdfNeedle, number) - -50 &lt; if{
						(O:phaseOffset_rmiAdfNeedle, number) 100 + (&gt;O:phaseOffset_rmiAdfNeedle, number)
					}
					els{
						(O:inputValue_rmiAdfNeedle, number) (O:lastInputValue_rmiAdfNeedle, number) - 50 &gt; if{
							(O:phaseOffset_rmiAdfNeedle, number) 100 - (&gt;O:phaseOffset_rmiAdfNeedle, number)	
						}
					}

					(O:inputValue_rmiAdfNeedle, number) (&gt;O:lastInputValue_rmiAdfNeedle, number)
					(O:inputValue_rmiAdfNeedle, number) (O:phaseOffset_rmiAdfNeedle, number) +

					0.03 * (O:lastAnimValue_rmiAdfNeedle, number) 1.78 * + (O:secondLastAnimValue_rmiAdfNeedle, number) -0.81 * +
					(O:lastAnimValue_rmiAdfNeedle, number) (&gt;O:secondlastAnimValue_rmiAdfNeedle, number)
					(&gt;O:lastAnimValue_rmiAdfNeedle, number)
					(O:lastAnimValue_rmiAdfNeedle, number)
					100000 + 100 %
				</ANIM_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>RmiVorNeedle</ANIM_NAME>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_CODE>
					(A:CIRCUIT ON:@Com1Circuit, bool) (A:CIRCUIT ON:@Nav1Circuit, bool) (A:CIRCUIT ON:@RMICircuit, bool) and and if{
						(A:NAV HAS NAV:1, bool) if{
							(L:BKSQ_VOR_BRG_1_Degraded, Number) (A:PLANE HEADING DEGREES MAGNETIC, Radians) 57.2958 * - 540 + 0.27777 * 100 %
						} els{ 90 }
					} els{ 0 }
					(&gt;O:inputValue_rmiVorNeedle, number)

					(O:inputValue_rmiVorNeedle, number) (O:lastInputValue_rmiVorNeedle, number) - -50 &lt; if{
						(O:phaseOffset_rmiVorNeedle, number) 100 + (&gt;O:phaseOffset_rmiVorNeedle, number)
					}
					els{
						(O:inputValue_rmiVorNeedle, number) (O:lastInputValue_rmiVorNeedle, number) - 50 &gt; if{
							(O:phaseOffset_rmiVorNeedle, number) 100 - (&gt;O:phaseOffset_rmiVorNeedle, number)	
						}
					}
					
					(O:inputValue_rmiVorNeedle, number) (&gt;O:lastInputValue_rmiVorNeedle, number)
					(O:inputValue_rmiVorNeedle, number) (O:phaseOffset_rmiVorNeedle, number) +

					0.042 * (O:lastAnimValue_rmiVorNeedle, number) 1.681 * + (O:secondLastAnimValue_rmiVorNeedle, number) -0.723 * +
					(O:lastAnimValue_rmiVorNeedle, number) (&gt;O:secondlastAnimValue_rmiVorNeedle, number)
					(&gt;O:lastAnimValue_rmiVorNeedle, number)
					(O:lastAnimValue_rmiVorNeedle, number)
					100000 + 100 %
				</ANIM_CODE>
				<ANIM_WRAP>True</ANIM_WRAP>
			</UseTemplate>

		</Component>

	</Component>



	<!-- Pressurization Panel -->

	<Component ID="PRESSURIZATION_PANEL">


		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>EnvironmentalFaultLight</NODE_ID>
			<ON_CONDITION_CODE>
				(L:var_ecsFault, bool)
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_EnvironmentalLightTestButton</ANNUNCIATOR_TEST_VAR>
			<BRIGHTNESS_FACTOR>3</BRIGHTNESS_FACTOR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<Component ID="EnvironmentalLightTestButton" Node="EnvironmentalLightTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>EnvironmentalLightTestButton</ANIM_NAME>
				<PART_ID>EnvironmentalLightTestButton</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_EnvironmentalLightTestButton</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ECS Light Test</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="PressurizationDumpCover" NODE="PressurizationDumpCover">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>PressurizationDumpCover</ANIM_NAME>
				<NODE_ID>PressurizationDumpCover</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_PressurizationDumpCover, bool) ! (&gt;L:var_PressurizationDumpCover, bool)
					0 (&gt;L:var_PressurizationDump, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_PressurizationDumpCover, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>pressurization_dump_cover_open</WWISE_EVENT>
				<WWISE_EVENT_1>pressurization_dump_cover_open</WWISE_EVENT_1>
				<WWISE_EVENT_2>pressurization_dump_cover_close</WWISE_EVENT_2>

				<PART_ID>PressurizationDumpCover</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Dump Switch Cover</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="PressurizationDumpSwitch" NODE="PressurizationDumpSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>PressurizationDumpSwitch</ANIM_NAME>
				<NODE_ID>PressurizationDumpSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_PressurizationDumpCover, bool) if{
						(L:var_PressurizationDump, bool) ! (&gt;L:var_PressurizationDump, bool)
					}
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_PressurizationDump, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>fuel_selector_knob_on</WWISE_EVENT>
				<WWISE_EVENT_1>safety_elt_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_elt_switch</WWISE_EVENT_2>

				<PART_ID>PressurizationDumpSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Pressurization Dump</TOOLTIPID>
			</UseTemplate>
		</Component>



		<Component ID="BleedAirSwitch" NODE="BleedAirSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>BleedAirSwitch</NODE_ID>
				<ANIM_NAME>BleedAirSwitch</ANIM_NAME>
				<PART_ID>BleedAirSwitch</PART_ID>
				<CODE_POS_0>2 (&gt;L:var_bleedState, number)</CODE_POS_0>
				<CODE_POS_1>1 (&gt;L:var_bleedState, number)</CODE_POS_1>
				<CODE_POS_2>0 (&gt;L:var_bleedState, number)</CODE_POS_2>
				<OVERRIDE_ANIM_CODE>
					(L:var_bleedState, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:var_bleedState, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:var_bleedState, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>	
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>ac_ctrl_switch</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Bleed Air Valve</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AirconditioningSwitch" NODE="AirconditioningSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>AirconditioningSwitch</NODE_ID>
				<ANIM_NAME>AirconditioningSwitch</ANIM_NAME>
				<PART_ID>AirconditioningSwitch</PART_ID>
				<CODE_POS_2>0 (&gt;L:var_airconState, number)</CODE_POS_2>
				<CODE_POS_1>1 (&gt;L:var_airconState, number)</CODE_POS_1>
				<CODE_POS_0>2 (&gt;L:var_airconState, number)</CODE_POS_0>
				<OVERRIDE_ANIM_CODE>
					(L:var_airconState, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:var_airconState, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:var_airconState, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>	
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>ac_ctrl_switch</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Air Conditioning</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="FanSwitch" NODE="FanSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>FanSwitch</ANIM_NAME>
				<NODE_ID>FanSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_FanSwitch, bool) ! (&gt;L:var_FanSwitch, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_FanSwitch, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>ac_ctrl_switch</WWISE_EVENT>
				<WWISE_EVENT_1>ac_ctrl_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>ac_ctrl_switch</WWISE_EVENT_2>

				<PART_ID>FanSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Fan Flow</TOOLTIPID>
			</UseTemplate>
		</Component>



		<Component ID="CabinTemperatureKnob" NODE="CabinTemperatureKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<NODE_ID>CabinTemperatureKnob</NODE_ID>
				<WRAP>False</WRAP>
				<PART_ID>CabinTemperatureKnob</PART_ID>
				<ANIM_CODE>(L:var_CabinTemperatureKnob, number) 60 - 5 *</ANIM_CODE>
				<ANIM_NAME>CabinTemperatureKnob</ANIM_NAME>
				<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
				<ANTICLOCKWISE_CODE> (L:var_CabinTemperatureKnob, number) 60 &gt; if{ (L:var_CabinTemperatureKnob, number) 1 - (&gt;L:var_CabinTemperatureKnob, number) }</ANTICLOCKWISE_CODE>
				<CLOCKWISE_CODE> (L:var_CabinTemperatureKnob, number) 80 &lt; if{ (L:var_CabinTemperatureKnob, number) 1 + (&gt;L:var_CabinTemperatureKnob, number) } </CLOCKWISE_CODE>
				<COUNT>100</COUNT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Temperature</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>CabinTemperatureKnob</ANIM_NAME>
				<WWISE_EVENT_1>AS580_big_knob_turn</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>AS580_big_knob_turn</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
		</Component>

		<Component ID="AirFlowSelectorKnob" NODE="AirFlowSelectorKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<NODE_ID>AirFlowSelectorKnob</NODE_ID>
				<WRAP>False</WRAP>
				<PART_ID>AirFlowSelectorKnob</PART_ID>
				<ANIM_CODE>(L:var_AirFlowSelectorKnob, number)</ANIM_CODE>
				<ANIM_NAME>AirFlowSelectorKnob</ANIM_NAME>
				<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
				<ANTICLOCKWISE_CODE> (L:var_AirFlowSelectorKnob, number) 0 &gt; if{ (L:var_AirFlowSelectorKnob, number) 1 - (&gt;L:var_AirFlowSelectorKnob, number) }</ANTICLOCKWISE_CODE>
				<CLOCKWISE_CODE> (L:var_AirFlowSelectorKnob, number) 100 &lt; if{ (L:var_AirFlowSelectorKnob, number) 1 + (&gt;L:var_AirFlowSelectorKnob, number) } </CLOCKWISE_CODE>
				<COUNT>100</COUNT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Air Flow Selector</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>AirFlowSelectorKnob</ANIM_NAME>
				<WWISE_EVENT_1>AC_knob_temp</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>AC_knob_temp</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
		</Component>






		<Component ID="CabinAltitudeRateKnob" Node="CabinAltitudeRateKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
    			<WRAP>False</WRAP>
    			<PART_ID>CabinAltitudeRateKnob</PART_ID>
    			<ANIM_CODE>(L:var_pressurizationClimbRate, number) 150 - 0.05405405 *</ANIM_CODE>
    			<ANIM_NAME>CabinAltitudeRateKnob</ANIM_NAME>
    			<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
    			<ANTICLOCKWISE_CODE>(L:var_pressurizationClimbRate, number) 150 &gt; if{ (L:var_pressurizationClimbRate, number) 50 - (&gt;L:var_pressurizationClimbRate, number) }</ANTICLOCKWISE_CODE>
    			<CLOCKWISE_CODE>(L:var_pressurizationClimbRate, number) 2000 &lt; if{ (L:var_pressurizationClimbRate, number) 50 + (&gt;L:var_pressurizationClimbRate, number) }</CLOCKWISE_CODE>
    			<COUNT>100</COUNT>

    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Pressurization Rate</TOOLTIPID>
    		</UseTemplate>

    		<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>CabinAltitudeRateKnob</ANIM_NAME>
				<WWISE_EVENT_1>hotairflow_knob</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>hotairflow_knob</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
    	</Component>


		<Component ID="CabinAltitudeGoalKnob" Node="CabinAltitudeGoalKnob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<NODE_ID>CabinAltitudeGoalKnob</NODE_ID>
				<ANIM_NAME>CabinAltitudeGoalKnob</ANIM_NAME>
				<PART_ID>CabinAltitudeGoalKnob</PART_ID>
				<CLOCKWISE_CODE>(L:var_pressurizationGoal, FT) 10500 &lt; if{ (L:var_pressurizationGoal, FT) 100 + (&gt;L:var_pressurizationGoal, FT) }</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(L:var_pressurizationGoal, FT) -500 &gt; if{ 1 (L:var_pressurizationGoal, FT) 100 - (&gt;L:var_pressurizationGoal, FT) }</ANTICLOCKWISE_CODE>
				<ANIM_CODE>(L:var_pressurizationGoal, FT) 500 + 0.00909 * </ANIM_CODE>
				
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Pressurization Goal</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
				<ANIM_NAME>CabinAltitudeGoalKnob</ANIM_NAME>
				<WWISE_EVENT_1>AC_knob_fan</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
				<DIRECTION_1>Forward</DIRECTION_1>
				<WWISE_EVENT_2>AC_knob_fan</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
				<DIRECTION_2>Backward</DIRECTION_2>
			</UseTemplate>
		</Component>



		<Component ID="CabinVerticalSpeedNeedle" NODE="CabinVerticalSpeedNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE">
				<NODE_ID>CabinVerticalSpeedNeedle</NODE_ID>
				<PART_ID>CabinVerticalSpeedNeedle</PART_ID>
				<VAR_SCOPE>L</VAR_SCOPE>
				<SIMVAR>var_cabinClimbRate</SIMVAR>
				<UNITS>FT/MIN</UNITS>
				<MIN_VALUE>-3000</MIN_VALUE>
				<MAX_VALUE>3000</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>180</END_DEG>
				<TOTAL_DEG>180</TOTAL_DEG>
				<ANIM_LAG>100</ANIM_LAG>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.05</VARIABILITY_RANDOM_MULTI>
				<LOWPASSCONSTANT>0.01</LOWPASSCONSTANT>
			</UseTemplate>
		</Component>

		<Component ID="CabinAltitudeNeedle" NODE="CabinAltitudeNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>CabinAltitudeNeedle</NODE_ID>
				<PART_ID>CabinAltitudeNeedle</PART_ID>
				<VALUE_CODE>
					(L:var_cabinPressurizationAltitude, FT) 0.742031 pow 0.129531 * 0.554484 -
				</VALUE_CODE>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>270</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>270</END_DEG>
				<TOTAL_DEG>270</TOTAL_DEG>
				<ANIM_LAG>500</ANIM_LAG>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.05</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>
		</Component>

		<Component ID="CabinDifferentialPressureNeedle" NODE="CabinDifferentialPressureNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>CabinDifferentialPressureNeedle</NODE_ID>
				<PART_ID>CabinDifferentialPressureNeedle</PART_ID>
				<VALUE_CODE>
					(L:var_cabinPressureDifferential, psi) 1000 * 0.742031 pow 0.129531 * 0.554484 - 2.0 *
				</VALUE_CODE>
				<MIN_VALUE>0</MIN_VALUE>
				<MAX_VALUE>180</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>96.5</END_DEG>
				<TOTAL_DEG>180</TOTAL_DEG>
				<ANIM_LAG>500</ANIM_LAG>
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.025</VARIABILITY_RANDOM_MULTI>
			</UseTemplate>
		</Component>

	</Component>




	<!-- Overhead Switch Panel -->

	<Component ID="OVERHEAD_SWITCH_PANEL">

		<Component ID="OverheadLightTestButton" Node="OverheadLightTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>OverheadLightTestButton</ANIM_NAME>
				<PART_ID>OverheadLightTestButton</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_OverheadLightTestButton</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Switch Light Test</TOOLTIPID>
			</UseTemplate>
		</Component>


		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Landing_Template">
			<ID>1</ID>
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>LandingLightSwitch_L</ANIM_NAME>
			<NODE_ID>LandingLightSwitch_L</NODE_ID>
			<PART_ID>LandingLightSwitch_L</PART_ID>
			<WWISE_EVENT_1>landing_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>landing_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_LANDING_ACTION_SET</TT_DESCRIPTION_ID>
		</UseTemplate>
		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Taxi_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>TaxiLightSwitch</ANIM_NAME>
			<NODE_ID>TaxiLightSwitch</NODE_ID>
			<PART_ID>TaxiLightSwitch</PART_ID>
			<WWISE_EVENT_1>taxi_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>taxi_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_TAXI_ACTION_SET</TT_DESCRIPTION_ID>
		</UseTemplate>
		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Landing_Template">
			<ID>2</ID>
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>LandingLightSwitch_R</ANIM_NAME>
			<NODE_ID>LandingLightSwitch_R</NODE_ID>
			<PART_ID>LandingLightSwitch_R</PART_ID>
			<WWISE_EVENT_1>landing_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>landing_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_LANDING_ACTION_SET</TT_DESCRIPTION_ID>
		</UseTemplate>

		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Navigation_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>NavLightSwitch</ANIM_NAME>
			<NODE_ID>NavLightSwitch</NODE_ID>
			<PART_ID>NavLightSwitch</PART_ID>
			<WWISE_EVENT_1>nav_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>nav_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_NAV_ACTION_SET</TT_DESCRIPTION_ID>		
		</UseTemplate>
		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Strobe_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>StobeLightSwitch</ANIM_NAME>
			<NODE_ID>StobeLightSwitch</NODE_ID>
			<PART_ID>StobeLightSwitch</PART_ID>
			<WWISE_EVENT_1>strobe_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>strobe_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_STROBE_ACTION</TT_DESCRIPTION_ID>
			<TOOLTIP_TITLE>@TT_Package.LIGHTING_SWITCH_LIGHT_STROBE_TITLE</TOOLTIP_TITLE>
		</UseTemplate>

		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Recognition_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>PulseLightSwitch</ANIM_NAME>
			<NODE_ID>PulseLightSwitch</NODE_ID>
			<PART_ID>PulseLightSwitch</PART_ID>
			<WWISE_EVENT_1>recognition_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>recognition_light_switch_off</WWISE_EVENT_2>
			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_RECOGNITION_ACTION_SET</TT_DESCRIPTION_ID>	
			<TOOLTIP_TITLE>@TT_Package.LIGHTING_SWITCH_LIGHT_RECOGNITION_TITLE</TOOLTIP_TITLE>
		</UseTemplate>

		<Component ID="GyroSwitch" NODE="GyroSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>GyroSwitch</ANIM_NAME>
				<NODE_ID>GyroSwitch</NODE_ID>
				<PART_ID>GyroSwitch</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT SWITCH ON:@RemoteCompassCircuit, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RemoteCompassCircuit, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(A:CIRCUIT SWITCH ON:@RemoteCompassCircuit, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>beacon_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>beacon_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>beacon_light_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Gyro Power</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="RmiSwitch" NODE="RmiSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>RmiSwitch</ANIM_NAME>
				<NODE_ID>RmiSwitch</NODE_ID>
				<PART_ID>RmiSwitch</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT SWITCH ON:@RMICircuit, bool) ! (&gt;A:CIRCUIT SWITCH ON:@RMICircuit, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(A:CIRCUIT SWITCH ON:@RMICircuit, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>beacon_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>beacon_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>beacon_light_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>RMI Power</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Adi2Switch" NODE="Adi2Switch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>Adi2Switch</ANIM_NAME>
				<NODE_ID>Adi2Switch</NODE_ID>
				<PART_ID>Adi2Switch</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT SWITCH ON:@ADI2Circuit, bool) ! (&gt;A:CIRCUIT SWITCH ON:@ADI2Circuit, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(A:CIRCUIT SWITCH ON:@ADI2Circuit, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>beacon_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>beacon_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>beacon_light_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ADI 2 Power</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Hsi2Switch" NODE="Hsi2Switch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>Hsi2Switch</ANIM_NAME>
				<NODE_ID>Hsi2Switch</NODE_ID>
				<PART_ID>Hsi2Switch</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT SWITCH ON:@HSI2Circuit, bool) ! (&gt;A:CIRCUIT SWITCH ON:@HSI2Circuit, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(A:CIRCUIT SWITCH ON:@HSI2Circuit, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>beacon_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>beacon_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>beacon_light_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>HSI 2 Power</TOOLTIPID>
			</UseTemplate>
		</Component>


		<!-- Lights -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>LandingLight_EM_L</NODE_ID>
			<ON_CONDITION_CODE>
				(A:CIRCUIT ON:@LandingLight_LCircuit, bool)
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_OverheadLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>TaxiLight_EM</NODE_ID>
			<ON_CONDITION_CODE>
				(A:CIRCUIT ON:@TaxiLightCircuit, bool)
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_OverheadLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>LandingLight_EM_R</NODE_ID>
			<ON_CONDITION_CODE>
				(A:CIRCUIT ON:@LandingLight_RCircuit, bool)
			</ON_CONDITION_CODE>
			<BRIGHTNESS_FACTOR>@BatteryDimmingAnnunciatorBrightness</BRIGHTNESS_FACTOR>
			<ANNUNCIATOR_TEST_VAR>var_OverheadLightTestButton</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>


		<!-- Starters -->

		<Component ID="StarterSwitch" NODE="StarterSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>StarterSwitch</ANIM_NAME>
				<NODE_ID>StarterSwitch</NODE_ID>
				<PART_ID>StarterSwitch</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:BKSQ_StarterSwitch, bool) ! (&gt;L:BKSQ_StarterSwitch, bool)

					(L:BKSQ_StarterSwitch, bool) (L:BKSQ_GeneratorSwitch, number) 2 != (&gt;K:STARTER1_SET)					
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(L:BKSQ_StarterSwitch, bool) 100 *
				</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>engine_starter_switch</WWISE_EVENT>
				<WWISE_EVENT_1>engine_starter_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>engine_starter_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Starter</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="IgnitionSwitch" NODE="IgnitionSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>IgnitionSwitch</NODE_ID>
				<ANIM_NAME>IgnitionSwitch</ANIM_NAME>
				<PART_ID>IgnitionSwitch</PART_ID>				
				<CODE_POS_0>
					2 (&gt;L:BKSQ_IgnitionSwitch, number)
				</CODE_POS_0>
				<CODE_POS_1>
					1 (&gt;L:BKSQ_IgnitionSwitch, number)
				</CODE_POS_1>
				<CODE_POS_2>
					0 (&gt;L:BKSQ_IgnitionSwitch, number)
				</CODE_POS_2>
				<OVERRIDE_ANIM_CODE>
					(L:BKSQ_IgnitionSwitch, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:BKSQ_IgnitionSwitch, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:BKSQ_IgnitionSwitch, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>engine_ignition_switch</WWISE_EVENT>
				<WWISE_EVENT_1>engine_ignition_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>engine_ignition_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Ignition</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="MainGeneratorResetButton" NODE="MainGeneratorResetButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>MainGeneratorResetButton</NODE_ID>
				<ANIM_NAME>MainGeneratorResetButton</ANIM_NAME>
				<PART_ID>MainGeneratorResetButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:GENERAL ENG MASTER ALTERNATOR:1, bool) if{ (&gt;K:TOGGLE_ALTERNATOR1) }

					1 (&gt;L:var_MainGeneratorResetButton, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_MainGeneratorResetButton, bool)
					6 (&gt;L:var_var_MainGeneratorResetTimer, number)
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>electricpower_main_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>electricpower_main_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Main Gen Reset</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="StandbyGeneratorResetButton" NODE="StandbyGeneratorResetButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>StandbyGeneratorResetButton</NODE_ID>
				<ANIM_NAME>StandbyGeneratorResetButton</ANIM_NAME>
				<PART_ID>StandbyGeneratorResetButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:GENERAL ENG MASTER ALTERNATOR:2, bool) if{ (&gt;K:TOGGLE_ALTERNATOR2) }

					1 (&gt;L:var_StandbyGeneratorResetButton, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;L:var_StandbyGeneratorResetButton, bool)
					8 (&gt;L:var_var_StandbyGeneratorResetTimer, number)
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>electricpower_stby_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>electricpower_stby_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Standby Gen Reset</TOOLTIPID>
			</UseTemplate>
		</Component>



		<!-- Big Switches -->

		<Component ID="BatterySwitch" NODE="BatterySwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>BatterySwitch</NODE_ID>
				<ANIM_NAME>BatterySwitch</ANIM_NAME>
				<PART_ID>BatterySwitch</PART_ID>				
				<CODE_POS_0>
					(L:var_crashbar, bool) if{
						2 (&gt;L:BKSQ_SourceSwitch, number)

						2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
							3 2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					}
				</CODE_POS_0>
				<CODE_POS_1>
					(L:var_crashbar, bool) if{
						1 (&gt;L:BKSQ_SourceSwitch, number)

						2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
							3 2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					}
				</CODE_POS_1>
				<CODE_POS_2>
					(L:var_crashbar, bool) if{
						0 (&gt;L:BKSQ_SourceSwitch, number)

						2 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{
							3 2 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
						}
					}
				</CODE_POS_2>
				<OVERRIDE_ANIM_CODE>
					(L:BKSQ_SourceSwitch, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:BKSQ_SourceSwitch, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:BKSQ_SourceSwitch, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>battery_switch</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Source Selector</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="GeneratorSwitch" NODE="GeneratorSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>GeneratorSwitch</NODE_ID>
				<ANIM_NAME>GeneratorSwitch</ANIM_NAME>
				<PART_ID>GeneratorSwitch</PART_ID>				
				<CODE_POS_0>
					(L:var_crashbar, bool) if{
						2 (&gt;L:BKSQ_GeneratorSwitch, number)
					}
				</CODE_POS_0>
				<CODE_POS_1>
					(L:var_crashbar, bool) if{
						1 (&gt;L:BKSQ_GeneratorSwitch, number)
					}
				</CODE_POS_1>
				<CODE_POS_2>
					(L:var_crashbar, bool) if{
						0 (&gt;L:BKSQ_GeneratorSwitch, number)
					}
				</CODE_POS_2>
				<OVERRIDE_ANIM_CODE>
					(L:BKSQ_GeneratorSwitch, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:BKSQ_GeneratorSwitch, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:BKSQ_GeneratorSwitch, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<WWISE_EVENT>alternator_switch</WWISE_EVENT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Generator Switch</TOOLTIPID>
			</UseTemplate>
		</Component>




		<!-- Crash Bar -->

		<Component ID="GangBarHandle" Node="GangBarHandle">
			<UseTemplate Name="ASOBO_GT_Lever_DraggingYAxis_Code">
				<PART_ID>GangBarHandle</PART_ID>
				<ANIM_NAME>GangBar</ANIM_NAME>
				<!-- <SINGLE_STEP/> -->
				<UP_CODE>
					1 (&gt;L:var_crashbar, bool)

					1 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) ! if{
						2 1 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				</UP_CODE>
				<DOWN_CODE>
					0 (&gt;L:var_crashbar, bool)
					0 (&gt;L:BKSQ_SourceSwitch, number)
					0 (&gt;L:BKSQ_GeneratorSwitch, number)

					1 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
						2 1 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				</DOWN_CODE>
				<ANIM_CODE>(L:var_crashbar, bool) 100 *</ANIM_CODE>
				<ANIM_LAG>500</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ALWAYS_USE_ANIM_LAG>True</ALWAYS_USE_ANIM_LAG>
				<WWISE_EVENT_1>electricpower_generatorreset_lever_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>electricpower_generatorreset_lever_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Crash Bar</TOOLTIPID>
			</UseTemplate>
      </Component>




      <!-- Electric Meters -->

      <Component ID="VoltsNeedle" NODE="VoltsNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>VoltsNeedle</NODE_ID>
				<PART_ID>VoltsNeedle</PART_ID>
				<VALUE_CODE>
					(A:ELECTRICAL MAIN BUS VOLTAGE:@MAIN_DISTRIBUTION, volts)
					1 (A:ELECTRICAL BATTERY LOAD:1, amps) 0 max 800 / - * 
					d (&gt;L:var_correctedBusVolts, volts)
				</VALUE_CODE>
				<POWER_CODE>
					(A:ELECTRICAL MAIN BUS VOLTAGE:@MAIN_DISTRIBUTION, volts) 12 &gt;
				</POWER_CODE>
				<MIN_VALUE>11.5</MIN_VALUE>
				<MAX_VALUE>35.5</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>90</END_DEG>
				<TOTAL_DEG>90</TOTAL_DEG>
				
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0.1</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.25</VARIABILITY_RANDOM_MULTI>
				<VARIABILITY_SINE>
						1.0 (E:LOCAL TIME, seconds) 1.3 * sin *    0.5 (E:LOCAL TIME, seconds) 1.1 * cos *   + 
				</VARIABILITY_SINE>
				<USE_BOUNCE>TRUE</USE_BOUNCE>
				<COMPLEXCONSTANTC>0.04588</COMPLEXCONSTANTC>
				<COMPLEXCONSTANTD>1.76412</COMPLEXCONSTANTD>
				<COMPLEXCONSTANTE>-0.81</COMPLEXCONSTANTE>
			</UseTemplate>
		</Component>

		<Component ID="AmpsNeedle" NODE="AmpsNeedle">
			<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
				<NODE_ID>AmpsNeedle</NODE_ID>
				<PART_ID>AmpsNeedle</PART_ID>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<VALUE_CODE>
					(A:ELECTRICAL BATTERY LOAD:1, amps) 95 28.5 (A:ELECTRICAL BATTERY BUS VOLTAGE:1, volt) - 28.5 20 - /  95 70 - *  -
					(A:GENERAL ENG STARTER ACTIVE:1, bool) * -
					(&gt;O:tempCorrectedBatteryLoad, amps)
					(O:tempCorrectedBatteryLoad, amps) 0 &lt;
					if{ (O:tempCorrectedBatteryLoad, amps) 100 (A:ELECTRICAL BATTERY ESTIMATED CAPACITY PCT, percent) - 125 / * } els{ (O:tempCorrectedBatteryLoad, amps) }
					d (&gt;L:var_correctedBatteryLoad, amps)
				</VALUE_CODE>
				<!-- Cheap Electric Calc    (MaxAmps)   -    ((MaxVolts-CurrentVolts) / (MaxVolts-MinVolts) * (MaxAmps-MinAmps))    
											MaxAmps MaxVolts CurrentVolts - MaxVolts MinVolts - /  MaxAmps MinAmps - *  -    -->
				<POWER_CODE>
					(A:ELECTRICAL MAIN BUS VOLTAGE:@MAIN_DISTRIBUTION, volts) 12 &gt;
				</POWER_CODE>
				<MIN_VALUE>-225</MIN_VALUE>
				<MAX_VALUE>225</MAX_VALUE>
				<START_DEG>0</START_DEG>
				<END_DEG>90</END_DEG>
				<TOTAL_DEG>90</TOTAL_DEG>
				<POWER_OFF_DEGREES>45</POWER_OFF_DEGREES>
				
				<USE_VARIABILITY>TRUE</USE_VARIABILITY>
				<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
				<VARIABILITY_SINE_MULTI>0.1</VARIABILITY_SINE_MULTI>
				<VARIABILITY_RANDOM_MULTI>0.25</VARIABILITY_RANDOM_MULTI>
				<VARIABILITY_SINE>
						1.0 (E:LOCAL TIME, seconds) 1.3 * sin *    0.5 (E:LOCAL TIME, seconds) 1.1 * cos *   + 
				</VARIABILITY_SINE>
				<USE_BOUNCE>TRUE</USE_BOUNCE>
				<COMPLEXCONSTANTC>0.04588</COMPLEXCONSTANTC>
				<COMPLEXCONSTANTD>1.76412</COMPLEXCONSTANTD>
				<COMPLEXCONSTANTE>-0.81</COMPLEXCONSTANTE>
			</UseTemplate>
		</Component>
	</Component>






	<!-- Lower Switch Panel -->

	<Component ID="LOWER_SWITCH_PANEL">

		<Component ID="SwitchesLightTest" Node="SwitchesLightTest">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>SwitchesLightTest</ANIM_NAME>
				<PART_ID>SwitchesLightTest</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_SwitchesLightTest</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>fuel_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Switch Light Test</TOOLTIPID>
			</UseTemplate>
		</Component>


		<Component ID="AirframeDeiceSwitch" NODE="AirframeDeiceSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>AirframeDeiceSwitch</ANIM_NAME>
				<NODE_ID>AirframeDeiceSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_airframeDeice, bool) ! (&gt;L:var_airframeDeice, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_airframeDeice, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>deice_airframe_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>deice_airframe_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>deice_airframe_switch_off</WWISE_EVENT_2>

				<PART_ID>AirframeDeiceSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Airframe Deice</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_LIGHTING_Switch_Light_Wing_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>IceLightSwitch</ANIM_NAME>
			<NODE_ID>IceLightSwitch</NODE_ID>
			<PART_ID>IceLightSwitch</PART_ID>
			<WWISE_EVENT>wing_light_switch_on</WWISE_EVENT>
			<WWISE_EVENT_1>wing_light_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>wing_light_switch_off</WWISE_EVENT_2>

			<TT_DESCRIPTION_ID>@TT_Package.LIGHTING_SWITCH_LIGHT_WING_ACTION</TT_DESCRIPTION_ID>
			<TOOLTIP_TITLE>@TT_Package.LIGHTING_SWITCH_LIGHT_WING_TITLE</TOOLTIP_TITLE>
		</UseTemplate>

		<UseTemplate Name="ASOBO_DEICE_Switch_Propeller_Template">
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>PropellerDeiceSwitch</ANIM_NAME>
			<NODE_ID>PropellerDeiceSwitch</NODE_ID>
			<PART_ID>PropellerDeiceSwitch</PART_ID>
			<WWISE_EVENT>deice_propeller_switch_on</WWISE_EVENT>
			<WWISE_EVENT_1>deice_propeller_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>deice_propeller_switch_off</WWISE_EVENT_2>
		</UseTemplate>

		<Component ID="WindshieldHeatSwitch_L" NODE="WindshieldHeatSwitch_L">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<NUM_STATES>2</NUM_STATES>
				<NODE_ID>WindshieldHeatSwitch_L</NODE_ID>
				<PART_ID>WindshieldHeatSwitch_L</PART_ID>
				<ANIM_NAME>WindshieldHeatSwitch_L</ANIM_NAME>
				<ANIM_LAG>800</ANIM_LAG>
				<LEFT_SINGLE_CODE>
					(L:var_windshieldHeatSwitch_L, bool) ! (&gt;L:var_windshieldHeatSwitch_L, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(L:var_windshieldHeatSwitch_L, bool) 100 *
				</ANIM_CODE>
				<WWISE_EVENT>deice_windshield_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>deice_windshield_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>deice_windshield_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>L Windshield Heat</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="WindshieldHeatSwitch_R" NODE="WindshieldHeatSwitch_R">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<NUM_STATES>2</NUM_STATES>
				<NODE_ID>WindshieldHeatSwitch_R</NODE_ID>
				<PART_ID>WindshieldHeatSwitch_R</PART_ID>
				<ANIM_NAME>WindshieldHeatSwitch_R</ANIM_NAME>				
				<ANIM_LAG>800</ANIM_LAG>
				<LEFT_SINGLE_CODE>
					(L:var_windshieldHeatSwitch_R, bool) ! (&gt;L:var_windshieldHeatSwitch_R, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(L:var_windshieldHeatSwitch_R, bool) 100 *
				</ANIM_CODE>
				<WWISE_EVENT>deice_windshield_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>deice_windshield_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>deice_windshield_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>R Windshield Heat</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_DEICE_Switch_Pitot_Template">
			<ID>1</ID>
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>PitotHeatSwitch_1</ANIM_NAME>
			<NODE_ID>PitotHeatSwitch_1</NODE_ID>
			<PART_ID>PitotHeatSwitch_1</PART_ID>
			<WWISE_EVENT>deice_pitot_switch_on</WWISE_EVENT>
			<WWISE_EVENT_1>deice_pitot_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>deice_pitot_switch_off</WWISE_EVENT_2>
		</UseTemplate>

		<UseTemplate Name="ASOBO_DEICE_Switch_Pitot_Template">
			<ID>2</ID>
			<ANIM_LAG>800</ANIM_LAG>
			<ANIM_NAME>PitotHeatSwitch_2</ANIM_NAME>
			<NODE_ID>PitotHeatSwitch_2</NODE_ID>
			<PART_ID>PitotHeatSwitch_2</PART_ID>
			<WWISE_EVENT>deice_pitot_switch_on</WWISE_EVENT>
			<WWISE_EVENT_1>deice_pitot_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>deice_pitot_switch_off</WWISE_EVENT_2>
		</UseTemplate>

		<Component ID="InertialSeparatorSwitch" NODE="InertialSeparatorSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<NUM_STATES>2</NUM_STATES>
				<NODE_ID>InertialSeparatorSwitch</NODE_ID>
				<PART_ID>InertialSeparatorSwitch</PART_ID>
				<ANIM_NAME>InertialSeparatorSwitch</ANIM_NAME>
				<ANIM_LAG>800</ANIM_LAG>
				<LEFT_SINGLE_CODE>
					(L:var_InertialSeparatorSwitch, bool) ! (&gt;L:var_InertialSeparatorSwitch, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>
					(L:var_InertialSeparatorSwitch, bool) 100 *
				</ANIM_CODE>
				<WWISE_EVENT>deice_inertsep_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>deice_inertsep_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>deice_inertsep_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Inertial Separator</TOOLTIPID>
			</UseTemplate>
		</Component>



		<!-- Lights -->

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>AirframeDeiceLight_L</NODE_ID>
			<ON_CONDITION_CODE>
				(A:STRUCTURAL DEICE SWITCH, Bool)
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_SwitchesLightTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>AirframeDeiceLight_R</NODE_ID>
			<ON_CONDITION_CODE>
				(L:var_airframeDeice, bool) (A:STRUCTURAL DEICE SWITCH, Bool) ! and
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_SwitchesLightTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>PropellerDeiceLight</NODE_ID>
			<ON_CONDITION_CODE>
				(A:PROP DEICE SWITCH:1, bool) (E:LOCAL TIME, seconds) 90 % 2 &gt; *
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_SwitchesLightTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>WindshieldHeatLight_L</NODE_ID>
			<ON_CONDITION_CODE>
				(A:CIRCUIT ON:@WindshieldHeat_LCircuit, bool)
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_SwitchesLightTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

		<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
			<NODE_ID>WindshieldHeatLight_R</NODE_ID>
			<ON_CONDITION_CODE>
				(A:CIRCUIT ON:@WindshieldHeat_RCircuit, bool)
			</ON_CONDITION_CODE>
			<ANNUNCIATOR_TEST_VAR>var_SwitchesLightTest</ANNUNCIATOR_TEST_VAR>
			<CIRCUIT>@GeneralPanelCircuit</CIRCUIT>
		</UseTemplate>

	</Component>



	<!-- Right Panel -->

	<Component ID="RIGHT_PANEL">


		<!-- <UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
			<NODE_ID>AirspeedNeedle_R</NODE_ID>
			<PART_ID>AirspeedNeedle_R</PART_ID>
			<VALUE_CODE>
				(A:AIRSPEED INDICATED, KNOTS) 0.501476 pow 0.0778232 * 0.465477 -
				(A:AIRSPEED INDICATED, KNOTS) *
			</VALUE_CODE>
			<MIN_VALUE>35</MIN_VALUE>
			<MAX_VALUE>350</MAX_VALUE>
			<START_DEG>0</START_DEG>
			<END_DEG>360</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>1</POWER_CODE>
			<USE_VARIABILITY>FALSE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
		</UseTemplate> -->

		<Component ID="AirspeedNeedle_R" NODE="AirspeedNeedle_R">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>AirspeedNeedle_R</NODE_ID>
				<ANIM_NAME>AirspeedNeedle_R</ANIM_NAME>
				<PART_ID>AirspeedNeedle_R</PART_ID>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_WRAP>TRUE</ANIM_WRAP>
				<ANIM_CODE>
					(A:AIRSPEED INDICATED, KNOTS) 0.443737 pow  42.6877 * 214.379 -
					0 max
					3.6 /
				</ANIM_CODE>
			</UseTemplate>
		</Component>

		<UseTemplate Name="BKSQ_AttitudeIndicatorWithGyroSimulation">
			<PITCH_LIMIT_DEG>39</PITCH_LIMIT_DEG>
			<GYRO_SPEED_VAR>var_AttitudeGyroSpeed_2</GYRO_SPEED_VAR>
			<COMPONENT_NAME>INSTRUMENT_AttitudeIndicator_2</COMPONENT_NAME>
			<PITCH_DEGREES_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Pitch_2</PITCH_DEGREES_ANIM_NAME>
			<BANK_DEGREES_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Bank_2</BANK_DEGREES_ANIM_NAME>
			<BARS_POSITION_ANIM_NAME>INSTRUMENT_AttitudeIndicator_Bars_2</BARS_POSITION_ANIM_NAME>
			<FLAG_ANIM_ANIM>INSTRUMENT_AttitudeIndicator_Flag_2</FLAG_ANIM_ANIM>
		</UseTemplate>

		<UseTemplate Name="ASOBO_INSTRUMENT_Knob_AttitudeCage_Template">
			<ID>3</ID>
			<ANIM_NAME_KNOB>INSTRUMENT_AttitudeIndicator_Knob_2</ANIM_NAME_KNOB>
			<NODE_ID>INSTRUMENT_AttitudeIndicator_Knob_2</NODE_ID>
			<NO_CAGE>True</NO_CAGE> 
		</UseTemplate>

		<UseTemplate Name="ASOBO_INSTRUMENT_Altimeter_Template">
			<ID>2</ID>
			<BARO_ID>2</BARO_ID>
			<SIMVAR>KOHLSMAN SETTING HG:2</SIMVAR>
			<MIN_VALUE_STRIP>27.0</MIN_VALUE_STRIP>
			<MAX_VALUE_STRIP>32.0</MAX_VALUE_STRIP>
			<MIN_VALUE_KNOB>27.0</MIN_VALUE_KNOB>
			<MAX_VALUE_KNOB>32.0</MAX_VALUE_KNOB>
			<ANIM_NAME_100_FEET>INSTRUMENT_Needle_Altimeter_100_2</ANIM_NAME_100_FEET>
			<NODE_ID_100_FEET>INSTRUMENT_Needle_Altimeter_100_2</NODE_ID_100_FEET>
			<ANIM_NAME_1000_FEET>INSTRUMENT_Needle_Altimeter_1000_2</ANIM_NAME_1000_FEET>
			<NODE_ID_1000_FEET>INSTRUMENT_Needle_Altimeter_1000_2</NODE_ID_1000_FEET>
			<ANIM_NAME_10000_FEET>INSTRUMENT_Needle_Altimeter_10000_2</ANIM_NAME_10000_FEET>
			<NODE_ID_10000_FEET>INSTRUMENT_Needle_Altimeter_10000_2</NODE_ID_10000_FEET>
			<ANIM_NAME_STRIP>INSTRUMENT_Altimeter_strip_2</ANIM_NAME_STRIP>
			<NODE_ID_STRIP>INSTRUMENT_Altimeter_strip_2</NODE_ID_STRIP>
			<KNOB_ANIM_NAME>INSTRUMENT_Knob_Altimeter_2</KNOB_ANIM_NAME>
			<KNOB_NODE_ID>INSTRUMENT_Knob_Altimeter_2</KNOB_NODE_ID>
		</UseTemplate>

		<Component ID="COPILOT_RADAR_ALTIMETER">
			<Component ID="RadarAltimeterDecisionAdjustKnob" NODE="RadarAltimeterDecisionAdjustKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<NODE_ID>RadarAltimeterDecisionAdjustKnob</NODE_ID>
					<ANIM_NAME>RadarAltimeterDecisionAdjustKnob</ANIM_NAME>
					<PART_ID>RadarAltimeterDecisionAdjustKnob</PART_ID>
					<ANIM_WRAP>TRUE</ANIM_WRAP>
					<ANIM_CODE>(L:var_copilotDecisionHeight, number)</ANIM_CODE>
					<CLOCKWISE_CODE>
						(L:var_copilotDecisionHeight, number) 2500 &lt; if{
							(L:var_copilotDecisionHeight, number) 500 &lt; if{
								(L:var_copilotDecisionHeight, number) 5 + (&gt;L:var_copilotDecisionHeight, number)
							}
							els{
								(L:var_copilotDecisionHeight, number) 50 + (&gt;L:var_copilotDecisionHeight, number)
							}
						}
					</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>
						(L:var_copilotDecisionHeight, number) 0 &gt; if{
							(L:var_copilotDecisionHeight, number) 500 &lt; if{
								(L:var_copilotDecisionHeight, number) 5 - (&gt;L:var_copilotDecisionHeight, number)
							}
							els{
								(L:var_copilotDecisionHeight, number) 50 - (&gt;L:var_copilotDecisionHeight, number)
							}
						}
					</ANTICLOCKWISE_CODE>
					<!-- <WWISE_EVENT>gtn750_outer_rotary_notch</WWISE_EVENT> -->
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Copilot Decision Height</TOOLTIPID>
				</UseTemplate>
			</Component>


			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>RadarAltimeterDecisionNeedle</NODE_ID>
				<ANIM_NAME>RadarAltimeterDecisionNeedle</ANIM_NAME>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>

				<ANIM_CODE>
					(L:var_copilotDecisionHeight, number) 500 &lt; if{
						(L:var_copilotDecisionHeight, number) 0 &lt; if{
							0 100 360 / *
						}
						els{
							(L:var_copilotDecisionHeight, number) 500 &gt; if{
								170 100 360 / *
							}
							els{
								(L:var_copilotDecisionHeight, number) 0 - 500 0 - / 170 0 - * 0 + 100 360 / *
							}
						}
					}
					els{
						(L:var_copilotDecisionHeight, number) 500 &lt; if{
							170 100 360 / *
						}
						els{
							(L:var_copilotDecisionHeight, number) 2500 &gt; if{
								240 100 360 / *
							}
							els{
								(L:var_copilotDecisionHeight, number) 500 - 2500 500 - / 240 170 - * 170 + 100 360 / *
							}
						}
					}
				</ANIM_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>RadarAltimeterNeedle</NODE_ID>
				<ANIM_NAME>RadarAltimeterNeedle</ANIM_NAME>
				<PART_ID>RadarAltimeterNeedle</PART_ID>
				<ANIM_LAG>100</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>

				<ANIM_CODE>
					(A:CIRCUIT ON:@RadioAltimeter2Circuit, bool) if{
						(L:var_RadarAltimeterTest, bool) ! if{
							(A:RADIO HEIGHT,feet) 3252 &lt; if{
								(A:RADIO HEIGHT,feet) 500 &lt;= if{
									(A:RADIO HEIGHT,feet) 0 &lt; if{
										0 100 360 / *
									}
									els{
										(A:RADIO HEIGHT,feet) 500 &gt; if{
											170 100 360 / *
										}
										els{
											(A:RADIO HEIGHT,feet) 0 - 500 0 - / 170 0 - * 0 + 100 360 / *
										}
									}
								}
								els{
									(A:RADIO HEIGHT,feet) 500 &lt; if{
										170 100 360 / *
									}
									els{
										(A:RADIO HEIGHT,feet) 2500 &gt; if{
											240 100 360 / *
										}
										els{
											(A:RADIO HEIGHT,feet) 500 - 2500 500 - / 240 170 - * 170 + 100 360 / *
										}
									}
								}
							}
							els{
								0 100 360 / *
							}
						}
						els{
							500 0 - 500 0 - / 170 0 - * 0 + 100 360 / *
						}
					}
					els{
						0 100 360 / *
					}

					(O:lastAnimValue_radarAltimter, number) - 0.05 * (O:lastAnimValue_radarAltimter, number) + 
					(&gt;O:lastAnimValue_radarAltimter, number)
					(O:lastAnimValue_radarAltimter, number)
				</ANIM_CODE>
			</UseTemplate>


			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>RadarAltimeterDecisionHeightIndicator</NODE_ID>
				<ON_CONDITION_CODE>
					(L:var_RadarAltimeterTest, bool) ! if{
						(A:RADIO HEIGHT,feet) 2500 &lt; (A:RADIO HEIGHT,feet) 20 &gt; and (A:VERTICAL SPEED,ft/min) 100 &lt; and if{
							(A:RADIO HEIGHT,feet) (L:var_copilotDecisionHeight, number) &lt;
							(A:RADIO HEIGHT,feet) (L:var_copilotDecisionHeight, number) 250 - &gt;
							and
						}
					}
					els{
						1
					}
				</ON_CONDITION_CODE>
				<BRIGHTNESS_FACTOR>2</BRIGHTNESS_FACTOR>
				<CIRCUIT>@RadioAltimeter2Circuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>RadarAltimeterFlag</NODE_ID>
				<ANIM_NAME>RadarAltimeterFlag</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>500</ANIM_LAG>
				<ANIM_CODE>(A:CIRCUIT ON:@RadioAltimeter2Circuit, bool) 100 *</ANIM_CODE>
			</UseTemplate>

			<Component ID="RadarAltimeterTest" Node="RadarAltimeterTest">
				<UseTemplate Name="ASOBO_GT_Push_Button_Held">
					<ANIM_NAME>RadarAltimeterTest</ANIM_NAME>
					<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
					<SWITCH_POSITION_VAR>var_RadarAltimeterTest</SWITCH_POSITION_VAR>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_DURATION>0.1</ANIM_DURATION>
					<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Altimeter Test</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>


		<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
			<NODE_ID>VerticalSpeedNeedle_R</NODE_ID>
			<PART_ID>VerticalSpeedNeedle_R</PART_ID>
			<VALUE_CODE>
				(A:VERTICAL SPEED, ft/min) abs 2000 &lt; if{
					(A:VERTICAL SPEED, ft/min)
				}
				els{
					(A:VERTICAL SPEED, ft/min) 0 &gt; if{
						(A:VERTICAL SPEED, ft/min) 2000 - 2 /
					}
					els{
						(A:VERTICAL SPEED, ft/min) 2000 + 2 / 
					}
				}

				(A:PROP RPM:1, RPM) 1000 /    1 (L:BKSQ_PersistentIndicatedAirspeed, knots) 100 / 1.0 min 0.0 max -   *
				rand 2 * 1 - *
				265 *
				+

				0.012 * (L:BKSQ_TBM_VerticalSpeed_2, number) 1.891 * + (O:secondLastAnimValue_VerticalSpeed2, number) -0.903 * +
				(L:BKSQ_TBM_VerticalSpeed_2, number) (&gt;O:secondlastAnimValue_VerticalSpeed2, number)
				d (&gt;L:BKSQ_TBM_VerticalSpeed_2, number)
			</VALUE_CODE>
			<MIN_VALUE>-180</MIN_VALUE>
			<MAX_VALUE>180</MAX_VALUE>
			<START_DEG>0</START_DEG>
			<END_DEG>360</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>1</POWER_CODE>
			<USE_VARIABILITY>FALSE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>0.5</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
		</UseTemplate>



		<Component ID="COPILOT_HSI">

			<!-- Compass Card -->
			<UseTemplate Name="ASOBO_GT_Anim_Sim">
				<FAILURE>(A:CIRCUIT ON:@HSI2Circuit, bool)</FAILURE>
				<NODE_ID>INSTRUMENT_Needle_Heading_Cylinder_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_Needle_Heading_Cylinder_1</ANIM_NAME>
				<ANIM_LENGTH>360</ANIM_LENGTH>
				<ANIM_WRAP>TRUE</ANIM_WRAP>
				<ANIM_SIMVAR>PLANE HEADING DEGREES GYRO</ANIM_SIMVAR>
				<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
			</UseTemplate>

			<!-- Rotating Knob -->
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_Knob_Heading_Compass_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_Knob_Heading_Compass_1</ANIM_NAME>
				<ANIM_LENGTH>360</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_WRAP>TRUE</ANIM_WRAP>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<ANIM_CODE>(A:PLANE HEADING DEGREES GYRO, degrees) 5 * 360 %</ANIM_CODE>
			</UseTemplate>

			<!-- Heading Failure Flag -->
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_Flag_Heading_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_Flag_Heading_1</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_CODE>(A:CIRCUIT ON:@RemoteCompassCircuit, bool) (A:CIRCUIT ON:@GyroSlavingCircuit, Bool) and 100 *</ANIM_CODE>
			</UseTemplate>

			<!-- Heading Bug Knob -->
			<Component ID="INSTRUMENT_Knob_Heading_1" NODE="INSTRUMENT_Knob_Heading_1">
				<UseTemplate Name="ASOBO_INSTRUMENT_Base_Template">
					<ANIM_NEVER_FAILS>TRUE</ANIM_NEVER_FAILS>
					<ANIM_NAME>INSTRUMENT_Knob_Heading_1</ANIM_NAME>
					<NODE_ID>INSTRUMENT_Knob_Heading_1</NODE_ID>
					<PART_ID>INSTRUMENT_Knob_Heading_1</PART_ID>
					<IE_NAME>Heading_Bug</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>1 p0 dnor 360 / @16k * (&gt;K:2:AP_HEADING_BUG_SET_EX1)</SET_STATE_EXTERNAL>
					<CLAMP_VALUE>dnor</CLAMP_VALUE>
					<GET_STATE_EXTERNAL>(A:AUTOPILOT HEADING LOCK DIR:1, degrees)</GET_STATE_EXTERNAL>
					<SIMVAR_TO_WATCH_0>AUTOPILOT HEADING LOCK DIR:1</SIMVAR_TO_WATCH_0>
					<FORMAT_VALUE>'%d°' @sprintf</FORMAT_VALUE>
					<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL>
					<WWISE_PREFIX>hdg</WWISE_PREFIX>
					<TT_DESCRIPTION_ID>@TT_Package.INSTRUMENT_KNOB_HEADING_BUG_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.INSTRUMENT_KNOB_HEADING_BUG_TITLE</TOOLTIP_TITLE>
					<THRESHOLD_INPUT>0.00005</THRESHOLD_INPUT>
					<THRESHOLD_MOUSE>0.001</THRESHOLD_MOUSE>
				</UseTemplate>
			</Component>

			<!-- <Component ID="INSTRUMENT_Knob_Heading_1" NODE="INSTRUMENT_Knob_Heading_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>1</ROTATION_SPEED>
					<NODE_ID>INSTRUMENT_Knob_Heading_1</NODE_ID>
					<ANIM_NAME>INSTRUMENT_Knob_Heading_1</ANIM_NAME>
					<ANIM_CODE>(L:var_INSTRUMENT_Knob_Heading_1, number)</ANIM_CODE>
		        	<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		        	<ANTICLOCKWISE_CODE>(L:var_INSTRUMENT_Knob_Heading_1, number) 0.005 - (&gt;L:var_INSTRUMENT_Knob_Heading_1, number)</ANTICLOCKWISE_CODE>
		        	<CLOCKWISE_CODE>(L:var_INSTRUMENT_Knob_Heading_1, number) 0.005 + (&gt;L:var_INSTRUMENT_Knob_Heading_1, number)</CLOCKWISE_CODE>

					<PART_ID>INSTRUMENT_Knob_Heading_1</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Heading Bug</TOOLTIPID>
				</UseTemplate>
			</Component> -->

			<!-- Heading Bug -->
			<UseTemplate Name="ASOBO_GT_Anim_Sim">
				<NODE_ID>INSTRUMENT_Needle_Heading_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_Needle_Heading_1</ANIM_NAME>
				<ANIM_LENGTH>360</ANIM_LENGTH>
				<ANIM_WRAP>TRUE</ANIM_WRAP>
				<ANIM_SIMVAR>AUTOPILOT HEADING LOCK DIR</ANIM_SIMVAR>
				<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
				<ANIM_WRAP>True</ANIM_WRAP>
			</UseTemplate>

			<Component ID="INSTRUMENT_CDI_Needle_Localizer_1" NODE="INSTRUMENT_CDI_Needle_Localizer_1">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>INSTRUMENT_CDI_Needle_Localizer_1</ANIM_NAME>
					<ANIM_LENGTH>254</ANIM_LENGTH>
					<!-- <ANIM_LAG>600</ANIM_LAG> -->
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_CODE>
						(A:CIRCUIT ON:@Com1Circuit, bool) (A:CIRCUIT ON:@Nav1Circuit, bool) (A:NAV HAS NAV:1, bool) and and if{ (L:BKSQ_VOR_CDI_1_Degraded, Number) 127 + } els{ 120 }

						(A:PLANE HEADING DEGREES GYRO, degrees) (A:NAV OBS:1, degrees) + 90 + 360 % 180 - abs 90 / 1 -
						(A:ACCELERATION BODY Y, feet per second squared) 0.2 * * +

						(A:PLANE HEADING DEGREES GYRO, degrees) (A:NAV OBS:1, degrees) + 360 % 180 - abs 90 / 1 -
						(A:ACCELERATION BODY X, feet per second squared) 0.5 * * +

						0.02 * (L:BKSQ_TBM_HSI_LOC, number) 1.82 * + (O:secondLastAnimValue_cdiLoc1, number) -0.84 * +
						(L:BKSQ_TBM_HSI_LOC, number) (&gt;O:secondlastAnimValue_cdiLoc1, number)
						(&gt;L:BKSQ_TBM_HSI_LOC, number)
						(L:BKSQ_TBM_HSI_LOC, number)
					</ANIM_CODE>
					<FAILURE>(A:CIRCUIT ON:@HSI2Circuit, bool)</FAILURE>
				</UseTemplate>
			</Component>

			<Component ID="INSTRUMENT_CDI_Flag_To_1" NODE="INSTRUMENT_CDI_Flag_To_1">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>INSTRUMENT_CDI_Flag_To_1</ANIM_NAME>
					<ANIM_CODE>
						(L:BKSQ_VOR_TO_1_Degraded, Number) (A:NAV HAS NAV:1, bool) (A:CIRCUIT ON:@HSI2Circuit, Bool) (A:CIRCUIT ON:@Com1Circuit, Bool) (A:CIRCUIT ON:@Nav1Circuit, Bool) * * * * 100 *
					</ANIM_CODE>
					<ANIM_LAG>800</ANIM_LAG>
				</UseTemplate>
			</Component>
			<Component ID="INSTRUMENT_CDI_Flag_From_1" NODE="INSTRUMENT_CDI_Flag_From_1">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>INSTRUMENT_CDI_Flag_From_1</ANIM_NAME>
					<ANIM_CODE>
						(L:BKSQ_VOR_FROM_1_Degraded, Number) (A:NAV HAS NAV:1, bool) (A:CIRCUIT ON:@HSI2Circuit, Bool) (A:CIRCUIT ON:@Com1Circuit, Bool) (A:CIRCUIT ON:@Nav1Circuit, Bool) * * * * 100 *
					</ANIM_CODE>
					<ANIM_LAG>800</ANIM_LAG>
				</UseTemplate>
			</Component>

			<Component ID="INSTRUMENT_CDI_Compass_1" NODE="INSTRUMENT_CDI_Compass_1">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>INSTRUMENT_CDI_Compass_1</ANIM_NAME>
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_LENGTH>360</ANIM_LENGTH>
					<ANIM_CODE>
						(A:NAV OBS:1, degrees)
					</ANIM_CODE>
					<ANIM_WRAP>TRUE</ANIM_WRAP>
				</UseTemplate>
			</Component>


			<Component ID="INSTRUMENT_CDI_Knob_Course_1" NODE="INSTRUMENT_CDI_Knob_Course_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<NODE_ID>INSTRUMENT_CDI_Knob_Course_1</NODE_ID>
					<ANIM_NAME>INSTRUMENT_CDI_Knob_Course_1</ANIM_NAME>
					<CLOCKWISE_CODE_DEFAULT_IM>1 (&gt;K:VOR1_OBI_INC) (A:NAV OBS:1, degrees) (&gt;L:var_RNAV_OBS, number) </CLOCKWISE_CODE_DEFAULT_IM>
					<ANTICLOCKWISE_CODE_DEFAULT_IM>1 (&gt;K:VOR1_OBI_DEC) (A:NAV OBS:1, degrees) (&gt;L:var_RNAV_OBS, number) </ANTICLOCKWISE_CODE_DEFAULT_IM>
					<CLOCKWISE_CODE_DRAG_IM>1 (&gt;K:VOR1_OBI_INC) (A:NAV OBS:1, degrees) (&gt;L:var_RNAV_OBS, number) </CLOCKWISE_CODE_DRAG_IM>
					<ANTICLOCKWISE_CODE_DRAG_IM>1 (&gt;K:VOR1_OBI_DEC) (A:NAV OBS:1, degrees) (&gt;L:var_RNAV_OBS, number) </ANTICLOCKWISE_CODE_DRAG_IM>
				</UseTemplate>
			</Component>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>INSTRUMENT_CDI_Flag_Localizer_1</NODE_ID>
				<ANIM_NAME>INSTRUMENT_CDI_Flag_Localizer_1</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_CODE>
					(A:CIRCUIT ON:@HSI2Circuit, bool) (A:CIRCUIT ON:@Com1Circuit, Bool) (A:CIRCUIT ON:@Nav1Circuit, Bool) and and (A:NAV HAS NAV:1, Bool) and 100 *	
				</ANIM_CODE>
			</UseTemplate>


			<!-- Glideslope Indicator -->
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_CDI_Needle_Glide_1</ANIM_NAME>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_CODE>
					(A:NAV HAS GLIDE SLOPE:1, bool) (A:CIRCUIT ON:@HSI2Circuit, bool) (A:CIRCUIT ON:@Com1Circuit, Bool) (A:CIRCUIT ON:@Nav1Circuit, Bool) and and and if{
						50 (A:NAV GSI:1, Number) -0.275 * +
					}
					els{
						100
					}

					(A:ACCELERATION BODY Y, feet per second squared) 0.1 * -

					0.02 * (L:BKSQ_TBM_HSI_GLIDE, number) 1.82 * + (O:secondLastAnimValue_cdiGlide1, number) -0.84 * +
					(L:BKSQ_TBM_HSI_GLIDE, number) (&gt;O:secondlastAnimValue_cdiGlide1, number)
					(&gt;L:BKSQ_TBM_HSI_GLIDE, number)
					(L:BKSQ_TBM_HSI_GLIDE, number)
				</ANIM_CODE>
				<ANIM_LAG>0</ANIM_LAG>
			</UseTemplate>


		</Component>


	</Component>





	<!-- Fuel Panel -->

	<Component ID="FUEL_PANEL">

		<Component ID="AutoFuelSelectorSwitch" NODE="AutoFuelSelectorSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
    			<ANIM_NAME>AutoFuelSelectorSwitch</ANIM_NAME>
    			<NODE_ID>AutoFuelSelectorSwitch</NODE_ID>
    			<LEFT_SINGLE_CODE>
    				(L:var_AutoFuelSelectorSwitch, bool) ! d (&gt;L:var_AutoFuelSelectorSwitch, bool)
    				(&gt;A:CIRCUIT SWITCH ON:@FuelSelectorCircuit, bool)

    				(A:SIM ON GROUND, bool) (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; and or if{
						75 (&gt;L:var_fuelSelectTimer, number)
					}
					els{
						600 (&gt;L:var_fuelSelectTimer, number)
					}
    			</LEFT_SINGLE_CODE>
    			<ANIM_CODE>(L:var_AutoFuelSelectorSwitch, bool) 100 *</ANIM_CODE>
    			<ANIM_LENGTH>100</ANIM_LENGTH>
    			<ANIM_LAG>800</ANIM_LAG>
    			<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
    			<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

    			<PART_ID>AutoFuelSelectorSwitch</PART_ID>
    			<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Fuel Selector Auto/Man</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="FuelSelectorShiftSwitch" NODE="FuelSelectorShiftSwitch">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>FuelSelectorShiftSwitch</NODE_ID>
				<ANIM_NAME>FuelSelectorShiftSwitch</ANIM_NAME>
				<PART_ID>FuelSelectorShiftSwitch</PART_ID>
				<LEFT_SINGLE_CODE>
					(A:CIRCUIT ON:@FuelSelectorCircuit, bool) if{
						(A:FUEL TANK SELECTOR:1, enum) 0 != if{
							0 (&gt;L:var_FuelStopDown, bool)

							(A:FUEL TANK SELECTOR:1, enum) 19 == if{
								(&gt;K:FUEL_SELECTOR_RIGHT_MAIN)
							}
							els{
								(A:FUEL TANK SELECTOR:1, enum) 20 == if{
									(&gt;K:FUEL_SELECTOR_LEFT_MAIN)
								}
							}

							(A:SIM ON GROUND, bool) (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; (A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 9.1 &lt; and or if{
								75 (&gt;L:var_fuelSelectTimer, number)
							}
							els{
								600 (&gt;L:var_fuelSelectTimer, number)
							}
						}
					}

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>button_switch_metal</WWISE_EVENT_1>
				<WWISE_EVENT_2>button_push</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Fuel Selector Shift</TOOLTIPID>
			</UseTemplate>
		</Component>


		<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE">
			<NODE_ID>FuelQuantityNeedle_L</NODE_ID>
			<PART_ID>FuelQuantityNeedle_L</PART_ID>
			<SIMVAR>FUEL TANK LEFT MAIN QUANTITY</SIMVAR>
			<UNITS>GALLONS</UNITS>
			<MIN_VALUE>0</MIN_VALUE>
			<MAX_VALUE>150</MAX_VALUE>
			<START_DEG>55</START_DEG>
			<END_DEG>305</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>(A:CIRCUIT ON:@FuelSender1Circuit, Bool)</POWER_CODE>
			<USE_VARIABILITY>TRUE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>1.0</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0.5</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
			<LOWPASSCONSTANT>0.175</LOWPASSCONSTANT>
			<VARIABILITY_SINE>
				(A:TOTAL VELOCITY, feet per second) 800 /   (E:LOCAL TIME, seconds) 0.4 * sin *    0.2 (E:LOCAL TIME, seconds) 0.5 * cos *   + 
			</VARIABILITY_SINE>

			<USE_BOUNCE>TRUE</USE_BOUNCE>
			<COMPLEXCONSTANTC>0.03021</COMPLEXCONSTANTC>
			<COMPLEXCONSTANTD>1.77979</COMPLEXCONSTANTD>
			<COMPLEXCONSTANTE>-0.81000</COMPLEXCONSTANTE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE">
			<NODE_ID>FuelQuantityNeedle_R</NODE_ID>
			<PART_ID>FuelQuantityNeedle_R</PART_ID>
			<SIMVAR>FUEL TANK RIGHT MAIN QUANTITY</SIMVAR>
			<UNITS>GALLONS</UNITS>
			<MIN_VALUE>0</MIN_VALUE>
			<MAX_VALUE>150</MAX_VALUE>
			<START_DEG>55</START_DEG>
			<END_DEG>305</END_DEG>
			<TOTAL_DEG>360</TOTAL_DEG>
			<POWER_CODE>(A:CIRCUIT ON:@FuelSender2Circuit, Bool)</POWER_CODE>
			<USE_VARIABILITY>TRUE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>1.0</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0.5</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
			<LOWPASSCONSTANT>0.175</LOWPASSCONSTANT>
			<VARIABILITY_SINE>
				(A:TOTAL VELOCITY, feet per second) 700 /   (E:LOCAL TIME, seconds) 0.5 * sin *    0.5 (E:LOCAL TIME, seconds) 0.6 * cos *   + 
			</VARIABILITY_SINE>

			<USE_BOUNCE>TRUE</USE_BOUNCE>
			<COMPLEXCONSTANTC>0.03595</COMPLEXCONSTANTC>
			<COMPLEXCONSTANTD>1.77405</COMPLEXCONSTANTD>
			<COMPLEXCONSTANTE>-0.81000</COMPLEXCONSTANTE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_NEEDLE_TEMPLATE_CODE">
			<NODE_ID>FuelPressureNeedle</NODE_ID>
			<PART_ID>FuelPressureNeedle</PART_ID>
			<VALUE_CODE>
				(A:CIRCUIT ON:@BoostPumpCircuit, bool) 20 * (L:BKSQ_fuelPumpSwitch, number) 2 == if{ 6 / }

				(A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) 5 &gt; (A:FUEL TANK SELECTOR:1, enum) 19 == and
				(A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) 5 &gt; (A:FUEL TANK SELECTOR:1, enum) 20 == and or *

				(A:GENERAL ENG FUEL PRESSURE:1, PSI) +
				d (&gt;L:BKSQ_TBM_FUELPRESSURE, PSI)
			</VALUE_CODE>
			<MIN_VALUE>-5</MIN_VALUE>
			<MAX_VALUE>55</MAX_VALUE>
			<START_DEG>0</START_DEG>
			<END_DEG>90</END_DEG>
			<TOTAL_DEG>90</TOTAL_DEG>
			<POWER_CODE>(A:ELECTRICAL MAIN BUS VOLTAGE:@BUS3, Volts) 22 &gt; (A:FUEL TANK SELECTOR:1, enum) 0 != and</POWER_CODE>
			<USE_VARIABILITY>TRUE</USE_VARIABILITY>
			<VARIABILITY_ENGINE_MULTI>1.0</VARIABILITY_ENGINE_MULTI>
			<VARIABILITY_SINE_MULTI>0.5</VARIABILITY_SINE_MULTI>
			<VARIABILITY_RANDOM_MULTI>0.1</VARIABILITY_RANDOM_MULTI>
			<LOWPASSCONSTANT>0.175</LOWPASSCONSTANT>
			<VARIABILITY_SINE>
				(A:TOTAL VELOCITY, feet per second) 375 /   (E:LOCAL TIME, seconds) 0.5 * sin *    0.5 (E:LOCAL TIME, seconds) 0.6 * cos *   + 
			</VARIABILITY_SINE>

			<USE_BOUNCE>TRUE</USE_BOUNCE>
			<COMPLEXCONSTANTC>0.03595</COMPLEXCONSTANTC>
			<COMPLEXCONSTANTD>1.77405</COMPLEXCONSTANTD>
			<COMPLEXCONSTANTE>-0.81000</COMPLEXCONSTANTE>
		</UseTemplate>


		<Component ID="BoostPumpSwitch" NODE="BoostPumpSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>BoostPumpSwitch</NODE_ID>
				<PART_ID>BoostPumpSwitch</PART_ID>
				<ANIM_NAME>BoostPumpSwitch</ANIM_NAME>
				<CODE_POS_0>
					2 (&gt;L:BKSQ_fuelPumpSwitch, number) 
				</CODE_POS_0>
				<CODE_POS_1>
					1 (&gt;L:BKSQ_fuelPumpSwitch, number)  
				</CODE_POS_1>
				<CODE_POS_2>
					0 (&gt;L:BKSQ_fuelPumpSwitch, number) 
				</CODE_POS_2>
				<ANIM_LAG>800</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<OVERRIDE_ANIM_CODE>
					(L:BKSQ_fuelPumpSwitch, number) 0 == if{
						2 (&gt;O:switchstate)
						200
					}
					els{
						(L:BKSQ_fuelPumpSwitch, number) 1 == if{
							1 (&gt;O:switchstate)
							100
						}
						els{
							(L:BKSQ_fuelPumpSwitch, number) 2 == if{
								0 (&gt;O:switchstate)
								0
							}
						}
					}
				</OVERRIDE_ANIM_CODE>

				<WWISE_EVENT>ac_ctrl_switch</WWISE_EVENT>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Aux Fuel Pump</TOOLTIPID>
			</UseTemplate>
		</Component>

	</Component>



	<!-- Lower Right Panel -->

	<Component ID="LOWER_RIGHT_PANEL">

		<Component ID="CabinTemperatureDisplay">
			<UseTemplate Name="BKSQ_CARD_TEMP">
				<POWER_CODE>(A:CIRCUIT ON:@GeneralPanelCircuit, bool)</POWER_CODE>
				<CABIN_TEMP_VAR>var_cabinTemperature</CABIN_TEMP_VAR>
				<MODE_BUTTON_NODE>CabinTempUnitButton</MODE_BUTTON_NODE>
				<BUTTON_PRESS_SOUND>as3000_knob_push_button_on</BUTTON_PRESS_SOUND>
				<BUTTON_RELEASE_SOUND>as3000_knob_push_button_off</BUTTON_RELEASE_SOUND>
				<ANNUNCIATOR_DIMMING_MACRO>@BatteryDimmingAnnunciatorBrightness 0.5 *</ANNUNCIATOR_DIMMING_MACRO>
				<SCREEN_EMISSIVE_CODE>(L:LIGHTING_PANEL_1) 450 / (A:CIRCUIT ON:@GeneralPanelCircuit, bool) * </SCREEN_EMISSIVE_CODE>
				<DIGIT_PREFIX>CT_</DIGIT_PREFIX>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_SAFETY_Switch_ELT_Template">
			<NODE_ID>EltSwitch</NODE_ID>
			<PART_ID>EltSwitch</PART_ID>
			<ANIM_NAME>EltSwitch</ANIM_NAME>
			<ANIM_LAG>1000</ANIM_LAG>
			<TYPE>ON_ARM_TEST</TYPE>
			<WWISE_EVENT>safety_elt_switch</WWISE_EVENT>
		</UseTemplate>
		<Component ID="EltLight" NODE="EltLight">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:XMLVAR_ELT_STATE, number) 2 == if{
						(E:SIMULATION TIME, second) 6 * 2 % 1 &lt; 5 * (A:CIRCUIT ON:@ELTCircuit, bool) *
					}
					els{
						(L:XMLVAR_ELT_STATE, number) 3 == if{
							5 (A:CIRCUIT ON:@ELTCircuit, bool) *
						}
					}
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>








		<Component ID="DmeSelectorKnob" NODE="DmeSelectorKnob">

			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<THRESHOLD_MOUSE>0.03</THRESHOLD_MOUSE>
				<THRESHOLD_INPUT>0.05</THRESHOLD_INPUT>
        		<WRAP>False</WRAP>
        		<PART_ID>DmeSelectorKnob</PART_ID>
        		<ANIM_CODE>(L:var_dmeMode, number) 25.0 *</ANIM_CODE>
        		<ANIM_NAME>DmeSelectorKnob</ANIM_NAME>
        		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
        		<ANIM_LAG>500</ANIM_LAG>
        		<ANTICLOCKWISE_CODE> 
	        		(L:var_dmeMode, number) 0 &gt; if{ (L:var_dmeMode, number) 1 - (&gt;L:var_dmeMode, number) }
	        		(L:var_dmeMode, number) 0 == if{ (&gt;H:dmeMode0) }
	        		els{
						(L:var_dmeMode, number) 1 == if{ (&gt;H:dmeMode1) }
						els{
	        				(L:var_dmeMode, number) 2 == if{ (&gt;H:dmeMode2) }
	        				els{
	        					(L:var_dmeMode, number) 3 == if{ (&gt;H:dmeMode3) }
	        				}
	        			}
	        		}
	        	</ANTICLOCKWISE_CODE>
	        	<CLOCKWISE_CODE> 
	        		(L:var_dmeMode, number) 3 &lt; if{ (L:var_dmeMode, number) 1 + (&gt;L:var_dmeMode, number) }
	        		(L:var_dmeMode, number) 0 == if{ (&gt;H:dmeMode0) }
	        		els{
						(L:var_dmeMode, number) 1 == if{ (&gt;H:dmeMode1) }
						els{
	        				(L:var_dmeMode, number) 2 == if{ (&gt;H:dmeMode2) }
	        				els{
	        					(L:var_dmeMode, number) 3 == if{ (&gt;H:dmeMode3) }
	        				}
	        			}
	        		}
	        	</CLOCKWISE_CODE>
	        	<COUNT>4</COUNT>
	        	<WWISE_EVENT>light_cabin_switch_off</WWISE_EVENT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
	        	<TOOLTIPID>DME Mode Selector</TOOLTIPID>
        	</UseTemplate>

    	</Component>








		<Component ID="CrewMusicSwitch" NODE="CrewMusicSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Dummy">
				<NUM_STATES>2</NUM_STATES>
				<NODE_ID>CrewMusicSwitch</NODE_ID>
				<PART_ID>CrewMusicSwitch</PART_ID>
				<ANIM_NAME>CrewMusicSwitch</ANIM_NAME>
				<ANIM_LAG>800</ANIM_LAG>
				<LEFT_SINGLE_CODE>(O:SwitchState) (&gt;L:var_CrewMusicSwitch, bool)</LEFT_SINGLE_CODE>
				<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Crew Music Source</TOOLTIPID>
			</UseTemplate>
		</Component>

		
		





		<Component ID="HobbsTimer">

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HobbsDigit2</NODE_ID>
				<ANIM_NAME>HobbsDigit2</ANIM_NAME>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_CODE>(A:GENERAL ENG HOBBS ELAPSED TIME:1, hours) 1000 div 10 %</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HobbsDigit3</NODE_ID>
				<ANIM_NAME>HobbsDigit3</ANIM_NAME>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_CODE>(A:GENERAL ENG HOBBS ELAPSED TIME:1, hours) 100 div 10 %</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HobbsDigit4</NODE_ID>
				<ANIM_NAME>HobbsDigit4</ANIM_NAME>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_CODE>(A:GENERAL ENG HOBBS ELAPSED TIME:1, hours)  10 div 10 %</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HobbsDigit5</NODE_ID>
				<ANIM_NAME>HobbsDigit5</ANIM_NAME>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_CODE>(A:GENERAL ENG HOBBS ELAPSED TIME:1, hours) flr 10 %</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>HobbsDigit6</NODE_ID>
				<ANIM_NAME>HobbsDigit6</ANIM_NAME>
				<ANIM_LENGTH>10</ANIM_LENGTH>
				<ANIM_CODE>(A:GENERAL ENG HOBBS ELAPSED TIME:1, hours) 10 * 10 %</ANIM_CODE>
			</UseTemplate>

		</Component>








		<Component ID="AlternateAir" NODE="AlternateAir">
			<UseTemplate Name="ASOBO_PASSENGER_Lever_Cabin_Air_Template">
				<ID>2</ID>
				<NODE_ID>AlternateAir</NODE_ID>
				<ANIM_NAME>AlternateAir</ANIM_NAME>
				<PART_ID>AlternateAir</PART_ID>
				<LEVER_ANIM_SCOPE>L</LEVER_ANIM_SCOPE>
				<HIGHLIGHT_NODE_ID>AlternateAir</HIGHLIGHT_NODE_ID>
				<WWISE_EVENT_1_LEVER>pressurization_deploy_switch_on</WWISE_EVENT_1_LEVER>
				<WWISE_EVENT_2_LEVER>pressurization_deploy_switch_off</WWISE_EVENT_2_LEVER>
				<WWISE_EVENT_1_LEVER_BUTTON>fuel_cutoff_switch_on</WWISE_EVENT_1_LEVER_BUTTON>
				<WWISE_EVENT_2_LEVER_BUTTON>fuel_cutoff_switch_off</WWISE_EVENT_2_LEVER_BUTTON>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Alternate Static</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="RamAir_Handle" NODE="RamAir_Handle">
			<UseTemplate Name="ASOBO_PASSENGER_Lever_Cabin_Air_Template">
				<ID>3</ID>
				<NODE_ID>RamAir_Handle</NODE_ID>
				<ANIM_NAME>RamAir</ANIM_NAME>
				<PART_ID>RamAir_Handle</PART_ID>
				<LEVER_ANIM_SCOPE>L</LEVER_ANIM_SCOPE>
				<BUTTON_NODE_ID>RamAir_Button</BUTTON_NODE_ID>
				<HIGHLIGHT_NODE_ID>RamAir_Handle</HIGHLIGHT_NODE_ID>
				<WWISE_EVENT_1_LEVER>pressurization_deploy_switch_on</WWISE_EVENT_1_LEVER>
				<WWISE_EVENT_2_LEVER>pressurization_deploy_switch_off</WWISE_EVENT_2_LEVER>
				<WWISE_EVENT_1_LEVER_BUTTON>yoke_push_button_on</WWISE_EVENT_1_LEVER_BUTTON>
				<WWISE_EVENT_2_LEVER_BUTTON>yoke_push_button_off</WWISE_EVENT_2_LEVER_BUTTON>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Ram Air</TOOLTIPID>
			</UseTemplate>
		</Component>




	</Component>




	<!-- AFT OVERHEAD -->

	<Component ID="AFT_OVERHEAD">


		<UseTemplate Name="ASOBO_INSTRUMENT_Dial_Compass_Template">
		</UseTemplate>

		<Component ID="PassengerOxygenSwitch" NODE="PassengerOxygenSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>PassengerOxygenSwitch</ANIM_NAME>
				<NODE_ID>PassengerOxygenSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_passengerOxygen, bool) ! (&gt;L:var_passengerOxygen, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_passengerOxygen, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>pressurization_oxygen_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>pressurization_oxygen_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>pressurization_oxygen_switch_off</WWISE_EVENT_2>

				<PART_ID>PassengerOxygenSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Passenger Oxygen Supply</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="CrewOxygenSwitch" NODE="CrewOxygenSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CrewOxygenSwitch</ANIM_NAME>
				<NODE_ID>CrewOxygenSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_oxygenMaster, bool) ! (&gt;L:var_oxygenMaster, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_oxygenMaster, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>pressurization_oxygen_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>pressurization_oxygen_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>pressurization_oxygen_switch_off</WWISE_EVENT_2>

				<PART_ID>CrewOxygenSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Crew Oxygen Supply</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="OxygenPressureNeedle" NODE="OxygenPressureNeedle">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>OxygenPressureNeedle</NODE_ID>
				<ANIM_NAME>OxygenPressureNeedle</ANIM_NAME>
				<PART_ID>OxygenPressureNeedle</PART_ID>
				<ANIM_CODE>
					(L:var_oxygenPressure, number) 0 &lt; if{
						0 100 180 / *
					}
					els{
						(L:var_oxygenPressure, number) 2000 &gt; if{
							180 100 180 / *
						}
						els{
							(L:var_oxygenPressure, number) 0 - 2000 0 - / 180 0 - * 0 + 100 180 / *
							rand 2 * 1 - 0.05 * +
						}
					}
				</ANIM_CODE>
				<ANIM_LAG>2</ANIM_LAG>
			</UseTemplate>
		</Component>



		<Component ID="PilotOxygenSwitch_1" NODE="PilotOxygenSwitch_1">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>PilotOxygenSwitch_1</ANIM_NAME>
				<NODE_ID>PilotOxygenSwitch_1</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_pilotOxygen, bool) ! (&gt;L:var_pilotOxygen, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_pilotOxygen, bool) 20 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
				<WWISE_EVENT_2>button_switch_plastic</WWISE_EVENT_2>
				<PART_ID>PilotOxygenSwitch_1</PART_ID>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Pilot Oxygen</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="PilotOxygenSwitch_2" NODE="PilotOxygenSwitch_2">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>PilotOxygenSwitch_2</ANIM_NAME>
				<NODE_ID>PilotOxygenSwitch_2</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_pilotOxygen, bool) ! (&gt;L:var_pilotOxygen, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_pilotOxygen, bool) 20 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<PART_ID>PilotOxygenSwitch_2</PART_ID>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Pilot Oxygen</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="CoPilotOxygenSwitch_1" NODE="CoPilotOxygenSwitch_1">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CoPilotOxygenSwitch_1</ANIM_NAME>
				<NODE_ID>CoPilotOxygenSwitch_1</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_coPilotOxygen, bool) ! (&gt;L:var_coPilotOxygen, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_coPilotOxygen, bool) 20 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
				<WWISE_EVENT_2>button_switch_plastic</WWISE_EVENT_2>
				<PART_ID>CoPilotOxygenSwitch_1</PART_ID>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Copilot Oxygen</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="CoPilotOxygenSwitch_2" NODE="CoPilotOxygenSwitch_2">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CoPilotOxygenSwitch_2</ANIM_NAME>
				<NODE_ID>CoPilotOxygenSwitch_2</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_coPilotOxygen, bool) ! (&gt;L:var_coPilotOxygen, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_coPilotOxygen, bool) 20 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<PART_ID>CoPilotOxygenSwitch_2</PART_ID>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Copilot Oxygen</TOOLTIPID>
			</UseTemplate>
		</Component>

	</Component>




	<!-- Engine Monitor -->

	<Component ID="ENGINE_TREND_MONITOR">

		<Component ID="Etm_Knob" NODE="Etm_Knob">
			<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
				<THRESHOLD_MOUSE>0.03</THRESHOLD_MOUSE>
				<THRESHOLD_INPUT>0.05</THRESHOLD_INPUT>
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>600</ANIM_LAG>
	        	<PART_ID>Etm_Knob</PART_ID>
	        	<ANIM_CODE>(L:var_EtmMode, number) 33.33 *</ANIM_CODE>
	        	<ANIM_NAME>Etm_Knob</ANIM_NAME>
	        	<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
	    		<ANTICLOCKWISE_CODE> 
	    			(L:var_EtmMode, number) 0 &gt; if{ (L:var_EtmMode, number) 1 - (&gt;L:var_EtmMode, number) }
	    		</ANTICLOCKWISE_CODE>
	    		<CLOCKWISE_CODE> 
	    			(L:var_EtmMode, number) 3 &lt; if{ (L:var_EtmMode, number) 1 + (&gt;L:var_EtmMode, number) }
	    		</CLOCKWISE_CODE>
	    		<COUNT>3</COUNT>
	    		<WWISE_EVENT>push_light_top_switch_off</WWISE_EVENT>

	    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
	    		<TOOLTIPID>Engine Monitor Mode</TOOLTIPID>
	        </UseTemplate>
    	</Component>

    	<Component ID="Etm_EnterTest" NODE="Etm_EnterTest">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Etm_EnterTest</NODE_ID>
				<ANIM_NAME>Etm_EnterTest</ANIM_NAME>
				<PART_ID>Etm_EnterTest</PART_ID>
				<LEFT_SINGLE_CODE>
					(&gt;H:Etm_EnterTest)

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Enter/Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Etm_Record" NODE="Etm_Record">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Etm_Record</NODE_ID>
				<ANIM_NAME>Etm_Record</ANIM_NAME>
				<PART_ID>Etm_Record</PART_ID>
				<LEFT_SINGLE_CODE>
					(&gt;H:Etm_Record)

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Record</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Etm_ClockReset" NODE="Etm_ClockReset">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>Etm_ClockReset</NODE_ID>
				<ANIM_NAME>Etm_ClockReset</ANIM_NAME>
				<PART_ID>Etm_ClockReset</PART_ID>
				<LEFT_SINGLE_CODE>
					(&gt;H:Etm_ClockReset)

					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Record</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Etm_IncDec" NODE="Etm_IncDec">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>Etm_IncDec</NODE_ID>
				<ANIM_NAME>Etm_IncDec</ANIM_NAME>
				<CODE_POS_2>(&gt;H:Etm_Dec)</CODE_POS_2>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_0>(&gt;H:Etm_Inc)</CODE_POS_0>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>autopilot_heading_knob</WWISE_EVENT>

				<PART_ID>Etm_IncDec</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Inc/Dec</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Etm_PageUpDown" NODE="Etm_PageUpDown">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>Etm_PageUpDown</NODE_ID>
				<ANIM_NAME>Etm_PageUpDown</ANIM_NAME>
				<CODE_POS_2>(&gt;H:Etm_PageDown)</CODE_POS_2>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_0>(&gt;H:Etm_PageUp)</CODE_POS_0>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>autopilot_heading_knob</WWISE_EVENT>

				<PART_ID>Etm_PageUpDown</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Page Up/Down</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Etm_ClockStartStop" NODE="Etm_ClockStartStop">
			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>Etm_ClockStartStop</NODE_ID>
				<ANIM_NAME>Etm_ClockStartStop</ANIM_NAME>
				<CODE_POS_2>(&gt;H:Etm_ClockStop)</CODE_POS_2>
				<CODE_POS_1></CODE_POS_1>
				<CODE_POS_0>(&gt;H:Etm_ClockStart)</CODE_POS_0>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<MOMENTARY_SWITCH>True</MOMENTARY_SWITCH>
				<STATE0_TIMER>0.01</STATE0_TIMER>
				<STATE_MAX_TIMER>0.01</STATE_MAX_TIMER>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>autopilot_heading_knob</WWISE_EVENT>

				<PART_ID>Etm_ClockStartStop</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Clock Start/Stop</TOOLTIPID>
			</UseTemplate>
		</Component>


	</Component>



	<!-- AVIONICS -->

	<Component ID="AVIONICS">

		<Component ID="GmaAudioPanel">
			<Parameters Type="Default">
				<NODE_ID>AS340</NODE_ID>
				<MY_SUFFIX_ID>_1</MY_SUFFIX_ID>
				<SUFFIX_ID>_1</SUFFIX_ID>
				<POTENTIOMETER>1</POTENTIOMETER>
				<COM_COUNT>3</COM_COUNT>
				<NAV_COUNT>2</NAV_COUNT>
				<DME_COUNT>1</DME_COUNT>
				<ADF_COUNT>1</ADF_COUNT>
				<!-- <FAILURE>(A:CIRCUIT ON:73, bool)</FAILURE> -->
			</Parameters>
			<UseTemplate Name="ASOBO_AudioPanel_Composite_Template">
				<!-- Marker Mute -->
				<USE_MUTE>True</USE_MUTE>
				<MUTE_NODE_ID>AS340_Push_mkr_mute#MY_SUFFIX_ID#</MUTE_NODE_ID>
				<MUTE_ANIM_NAME>AS340_Push_mkr_mute#MY_SUFFIX_ID#</MUTE_ANIM_NAME>
				<MUTE_INDICATOR_NODE_ID>DummyPlaceholder</MUTE_INDICATOR_NODE_ID>
				<!-- Marker Sensitivity -->
				<USE_MARKER_SENSITIVITY>TRUE</USE_MARKER_SENSITIVITY>
				<MARKER_SENSITIVITY_NODE_ID>AS340_Push_sens#MY_SUFFIX_ID#</MARKER_SENSITIVITY_NODE_ID>
				<MARKER_SENSITIVITY_ANIM_NAME>AS340_Push_sens#MY_SUFFIX_ID#</MARKER_SENSITIVITY_ANIM_NAME>
				<MARKER_SENSITIVITY_INDICATOR_NODE_ID>DummyPlaceholder</MARKER_SENSITIVITY_INDICATOR_NODE_ID>
				<!-- OMI Indicator -->
				<!-- <USE_OMI_INDICATOR>True</USE_OMI_INDICATOR> -->
				<!-- <O_INDICATOR_NODE_ID>AS340_LED_O#MY_SUFFIX_ID#</O_INDICATOR_NODE_ID> -->
				<!-- <M_INDICATOR_NODE_ID>AS340_LED_M#MY_SUFFIX_ID#</M_INDICATOR_NODE_ID> -->
				<!-- <I_INDICATOR_NODE_ID>AS340_LED_I#MY_SUFFIX_ID#</I_INDICATOR_NODE_ID> -->
				<!-- COM1 Receive Button and LED -->
				<COM1_RECEIVE_NODE_ID>DummyPlaceholder</COM1_RECEIVE_NODE_ID>
				<COM1_RECEIVE_ANIM_NAME>DummyPlaceholder</COM1_RECEIVE_ANIM_NAME>
				<COM1_RECEIVE_INDICATOR_NODE_ID>DummyPlaceholder</COM1_RECEIVE_INDICATOR_NODE_ID>
				<!-- COM2 Receive Button and LED -->
				<COM2_RECEIVE_NODE_ID>DummyPlaceholder</COM2_RECEIVE_NODE_ID>
				<COM2_RECEIVE_ANIM_NAME>DummyPlaceholder</COM2_RECEIVE_ANIM_NAME>
				<COM2_RECEIVE_INDICATOR_NODE_ID>DummyPlaceholder</COM2_RECEIVE_INDICATOR_NODE_ID>
				<!-- COM3 Receive Button and LED -->
				<COM3_RECEIVE_NODE_ID>DummyPlaceholder</COM3_RECEIVE_NODE_ID>
				<COM3_RECEIVE_ANIM_NAME>DummyPlaceholder</COM3_RECEIVE_ANIM_NAME>
				<COM3_RECEIVE_INDICATOR_NODE_ID>DummyPlaceholder</COM3_RECEIVE_INDICATOR_NODE_ID>
				<!-- NAV1 Receive Button and LED -->
				<NAV1_RECEIVE_NODE_ID>AS340_Push_nav1#MY_SUFFIX_ID#</NAV1_RECEIVE_NODE_ID>
				<NAV1_RECEIVE_ANIM_NAME>AS340_Push_nav1#MY_SUFFIX_ID#</NAV1_RECEIVE_ANIM_NAME>
				<NAV1_RECEIVE_INDICATOR_NODE_ID>DummyPlaceholder</NAV1_RECEIVE_INDICATOR_NODE_ID>
				<!-- NAV2 Receive Button and LED -->
				<NAV2_RECEIVE_NODE_ID>AS340_Push_nav2#MY_SUFFIX_ID#</NAV2_RECEIVE_NODE_ID>
				<NAV2_RECEIVE_ANIM_NAME>AS340_Push_nav2#MY_SUFFIX_ID#</NAV2_RECEIVE_ANIM_NAME>
				<NAV2_RECEIVE_INDICATOR_NODE_ID>DummyPlaceholder</NAV2_RECEIVE_INDICATOR_NODE_ID>
				<!-- DME1 Receive Button and LED -->
				<DME1_NODE_ID>AS340_Push_dme1#MY_SUFFIX_ID#</DME1_NODE_ID>
				<DME1_ANIM_NAME>AS340_Push_dme1#MY_SUFFIX_ID#</DME1_ANIM_NAME>
				<DME1_INDICATOR_NODE_ID>DummyPlaceholder</DME1_INDICATOR_NODE_ID>
				<!-- ADF1 Receive Button and LED -->
				<ADF1_NODE_ID>AS340_Push_adf1#MY_SUFFIX_ID#</ADF1_NODE_ID>
				<ADF1_ANIM_NAME>AS340_Push_adf1#MY_SUFFIX_ID#</ADF1_ANIM_NAME>
				<ADF1_INDICATOR_NODE_ID>DummyPlaceholder</ADF1_INDICATOR_NODE_ID>
				<!-- Intercom Receive Button and LED -->
				<!-- <USE_INTERCOM>True</USE_INTERCOM>
				<INTERCOM_NODE_ID>AS340_Push_pass_1</INTERCOM_NODE_ID>
				<INTERCOM_ANIM_NAME>AS340_Push_pass_1</INTERCOM_ANIM_NAME>
				<INTERCOM_INDICATOR_NODE_ID>DummyPlaceholder</INTERCOM_INDICATOR_NODE_ID> -->
				<!-- Speaker Button and LED -->
				<USE_SPEAKER>True</USE_SPEAKER>
				<SPKR_NODE_ID>AS340_Push_spkr_1</SPKR_NODE_ID>
				<SPKR_ANIM_NAME>AS340_Push_spkr_1</SPKR_ANIM_NAME>
				<SPKR_INDICATOR_NODE_ID>DummyPlaceholder</SPKR_INDICATOR_NODE_ID>
				<!-- ICS Button and LED -->
				<USE_ICS>TRUE</USE_ICS>
				<ICS_NODE_ID>AS340_Push_pilot_1</ICS_NODE_ID>
				<ICS_ANIM_NAME>AS340_Push_pilot_1</ICS_ANIM_NAME>
				<ICS_INDICATOR_NODE_ID>DummyPlaceholder</ICS_INDICATOR_NODE_ID>
				<!-- AUX Button and LED -->
				<!-- <USE_AUX>TRUE</USE_AUX>
				<AUX_NODE_ID>AS340_Push_coplt_1</AUX_NODE_ID>
				<AUX_ANIM_NAME>AS340_Push_coplt_1</AUX_ANIM_NAME>
				<AUX_INDICATOR_NODE_ID>DummyPlaceholder</AUX_INDICATOR_NODE_ID> -->
				<!-- Volume Knob -->
				<USE_AUDIO_VOLUME>True</USE_AUDIO_VOLUME>
				<AUDIO_KNOB_NODE_ID>AS340_2#MY_SUFFIX_ID#</AUDIO_KNOB_NODE_ID>
				<AUDIO_KNOB_ANIM_NAME>AS340_2#MY_SUFFIX_ID#</AUDIO_KNOB_ANIM_NAME>
				<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>
				<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
			</UseTemplate>

			<Component ID="AS340_1_1" Node="AS340_1_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>AS340_1_1</ANIM_NAME>
					<WWISE_EVENT>autopilot_verticalspeed_knob</WWISE_EVENT>	
					<COUNT>36</COUNT>
					<CLOCKWISE_CODE>(L:var_AS340_1_1, number) 1 + (&gt;L:var_AS340_1_1, number)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(L:var_AS340_1_1, number) 1 - (&gt;L:var_AS340_1_1, number)</ANTICLOCKWISE_CODE>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Pilot Squelch</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="AS340_2_1" Node="AS340_2_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>AS340_2_1</ANIM_NAME>
					<WWISE_EVENT>autopilot_verticalspeed_knob</WWISE_EVENT>	
					<COUNT>36</COUNT>
					<CLOCKWISE_CODE>(L:var_AS340_2_1, number) 1 + (&gt;L:var_AS340_2_1, number)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(L:var_AS340_2_1, number) 1 - (&gt;L:var_AS340_2_1, number)</ANTICLOCKWISE_CODE>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Pilot Volume</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="AS340_3_1" Node="AS340_3_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>AS340_3_1</ANIM_NAME>
					<WWISE_EVENT>autopilot_verticalspeed_knob</WWISE_EVENT>	
					<COUNT>36</COUNT>
					<CLOCKWISE_CODE>(L:var_AS340_3_1, number) 1 + (&gt;L:var_AS340_3_1, number)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(L:var_AS340_3_1, number) 1 - (&gt;L:var_AS340_3_1, number)</ANTICLOCKWISE_CODE>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Copilot Squelch</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="AS340_4_1" Node="AS340_4_1">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>AS340_4_1</ANIM_NAME>
					<WWISE_EVENT>autopilot_verticalspeed_knob</WWISE_EVENT>
					<COUNT>36</COUNT>
					<CLOCKWISE_CODE>(L:var_AS340_4_1, number) 1 + (&gt;L:var_AS340_4_1, number)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(L:var_AS340_4_1, number) 1 - (&gt;L:var_AS340_4_1, number)</ANTICLOCKWISE_CODE>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Copilot Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_I_1</NODE_ID>
				<ON_CONDITION_CODE>(A:INNER MARKER,bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<BRIGHTNESS_FACTOR>1.0 (L:var_AnnunciatorDim, bool) 0.8 * -</BRIGHTNESS_FACTOR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_O_1</NODE_ID>
				<ON_CONDITION_CODE>(A:OUTER MARKER,bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<BRIGHTNESS_FACTOR>1.0 (L:var_AnnunciatorDim, bool) 0.8 * -</BRIGHTNESS_FACTOR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_M_1</NODE_ID>
				<ON_CONDITION_CODE>(A:MIDDLE MARKER,bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<BRIGHTNESS_FACTOR>1.0 (L:var_AnnunciatorDim, bool) 0.8 * -</BRIGHTNESS_FACTOR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AudioHiSensitivityIndicator</NODE_ID>
				<ON_CONDITION_CODE>(A:MARKER BEACON SENSITIVITY HIGH, Bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AudioLoSensitivityIndicator</NODE_ID>
				<ON_CONDITION_CODE>(A:MARKER BEACON SENSITIVITY HIGH, Bool) !</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<!-- Replacement Indicator LEDs -->

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_nav1_1</NODE_ID>
				<ON_CONDITION_CODE>(A:NAV SOUND:1, bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_nav2_1</NODE_ID>
				<ON_CONDITION_CODE>(A:NAV SOUND:2, bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_mkr_mute_1</NODE_ID>
				<ON_CONDITION_CODE>(A:MARKER BEACON TEST MUTE, Bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_dme_1</NODE_ID>
				<ON_CONDITION_CODE>(A:DME SOUND:1, Bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_adf_1</NODE_ID>
				<ON_CONDITION_CODE>(A:ADF SOUND:1, Bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_pass_1</NODE_ID>
				<ON_CONDITION_CODE>(L:var_cabinIntercom, bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_spkr_1</NODE_ID>
				<ON_CONDITION_CODE>(A:SPEAKER ACTIVE, Bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_pilot_1</NODE_ID>
				<ON_CONDITION_CODE>(A:INTERCOM SYSTEM ACTIVE, bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
				<NODE_ID>AS340_led_coplt_1</NODE_ID>
				<ON_CONDITION_CODE>(L:var_crewIsolate, bool)</ON_CONDITION_CODE>
				<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
				<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			</UseTemplate>

			<!-- Replacement COM Recieve Buttons -->

			<Component ID="AS340_Push_com1_1" Node="AS340_Push_com1_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_com1_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(A:COM RECEIVE EX1:1, bool) ! if{
							1 (&gt;K:COM1_RECEIVE_SELECT)
						}
						els{
							(A:COM TRANSMIT:1, bool) ! if{ 0 (&gt;K:COM1_RECEIVE_SELECT) }
						}
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 1 Receive</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS340_led_com1_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM RECEIVE EX1:1, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>

			<Component ID="AS340_Push_com2_1" Node="AS340_Push_com2_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_com2_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(A:COM RECEIVE EX1:2, bool) ! if{
							1 (&gt;K:COM2_RECEIVE_SELECT)
						}
						els{
							(A:COM TRANSMIT:2, bool) ! if{ 0 (&gt;K:COM2_RECEIVE_SELECT) }
						}
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 2 Receive</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS340_led_com2_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM RECEIVE EX1:2, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>

			<Component ID="AS340_Push_com3_1" Node="AS340_Push_com3_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_com3_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(A:COM RECEIVE EX1:3, bool) ! if{
							1 (&gt;K:COM3_RECEIVE_SELECT)
						}
						els{
							(A:COM TRANSMIT:3, bool) ! if{ 0 (&gt;K:COM3_RECEIVE_SELECT) }
						}
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 3 Receive</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS340_led_com3_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM RECEIVE EX1:3, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>

			<!-- Replacement Aux Buttons -->

			<Component ID="AS340_Push_pass_1" Node="AS340_Push_pass_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_pass_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:var_cabinIntercom, bool) ! (&gt;L:var_cabinIntercom, bool)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Passenger Intercom</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AS340_Push_coplt_1" Node="AS340_Push_coplt_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_coplt_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:var_crewIsolate, bool) ! (&gt;L:var_crewIsolate, bool)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Crew Isolation</TOOLTIPID>
				</UseTemplate>
			</Component>

			<!-- COM Transmit Buttons -->

			<Component ID="AS340_Push_mic1_1" Node="AS340_Push_mic1_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_mic1_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						0 (&gt;K:PILOT_TRANSMITTER_SET)
						1 (&gt;K:COM1_RECEIVE_SELECT)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 1 Transmit</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS350_led_mic1_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM TRANSMIT:1, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>



			<Component ID="AS340_Push_mic2_1" Node="AS340_Push_mic2_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_mic2_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						1 (&gt;K:PILOT_TRANSMITTER_SET)
						1 (&gt;K:COM2_RECEIVE_SELECT)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 2 Transmit</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS350_led_mic2_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM TRANSMIT:2, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>



			<Component ID="AS340_Push_mic3_1" Node="AS340_Push_mic3_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_mic3_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						2 (&gt;K:PILOT_TRANSMITTER_SET)
						1 (&gt;K:COM3_RECEIVE_SELECT)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 3 Transmit</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS350_led_mic3_1</NODE_ID>
					<ON_CONDITION_CODE>(A:COM TRANSMIT:3, bool)</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>



			<Component ID="AS340_Push_mic1and2_1" Node="AS340_Push_mic1and2_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>AS340_Push_mic1and2_1</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						0 (&gt;K:PILOT_TRANSMITTER_SET)
						1 (&gt;K:COPILOT_TRANSMITTER_SET)
						1 (&gt;K:COM1_RECEIVE_SELECT)
						1 (&gt;K:COM2_RECEIVE_SELECT)
						0 (&gt;K:COM3_RECEIVE_SELECT)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>


					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Split Com Mode</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="BKSQ_DIMMABLE_ANNUNCIATOR">
					<NODE_ID>AS340_led_mic1and2_1</NODE_ID>
					<ON_CONDITION_CODE>(A:PILOT TRANSMITTER TYPE, enum) 0 == (A:COPILOT TRANSMITTER TYPE, enum) 1 == and</ON_CONDITION_CODE>
					<ANNUNCIATOR_TEST_VAR>var_AudioTestButton</ANNUNCIATOR_TEST_VAR>
					<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
				</UseTemplate>
			</Component>

			<!-- Test Button-->

			<Component ID="AS340_Push_mansq_1" Node="AS340_Push_mansq_1">
				<UseTemplate Name="ASOBO_GT_Push_Button_Held">
					<ANIM_NAME>AS340_Push_mansq_1</ANIM_NAME>
					<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
					<SWITCH_POSITION_VAR>var_AudioTestButton</SWITCH_POSITION_VAR>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_DURATION>0.1</ANIM_DURATION>
					<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
					<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Audio Panel Test</TOOLTIPID>
				</UseTemplate>
			</Component>

		</Component>


		<Component ID="GTN750">
			<Component ID="GTN750_Vol" Node="GTN_750_smallknob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ANIM_NAME_KNOB>GTN750_Vol</ANIM_NAME_KNOB>
					<ANIM_NAME_PUSH>GTN750_VolPush</ANIM_NAME_PUSH>
					<WWISE_EVENT_1>AS580_knob_turn</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>AS580_knob_turn</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.3</NORMALIZED_TIME_2>
					<CLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_VolInc)
							(L:GTN750_Vol, enum) ++ 10 min (&gt;L:GTN750_Vol, enum)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_LKnobInc,bool)
						}
						1 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool)
					</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_VolDec)
							(L:GTN750_Vol, enum) -- 0 max (&gt;L:GTN750_Vol, enum)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_LKnobDec,bool)
						}
						1 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool)
					</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_VolPush)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_LKnobCRSR,bool)
						}
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) if{
							0 (&gt;L:TDSGTNXI750U1_LKnobCRSR,bool)
						}
					</LEFT_LEAVE_CODE>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>GTN750 Volume/Power</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="GTN750_KnobSmall" Node="GTN_750_inknob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ANIM_NAME_KNOB>GTN750_KnobSmall</ANIM_NAME_KNOB>
					<ANIM_NAME_PUSH>GTN750_KnobSmallPush</ANIM_NAME_PUSH>
					<WWISE_EVENT_1>GTN750_inner_rotary_button_press</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>GTN750_inner_rotary_button_release</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.3</NORMALIZED_TIME_2>
					<CLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_KnobSmallInc)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_RKnobInnerInc,bool)
						}
					</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_KnobSmallDec)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_RKnobInnerDec,bool)
						}
					</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_KnobPush)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_RKnobCRSR,bool)
						}
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) if{
							0 (&gt;L:TDSGTNXI750U1_RKnobCRSR,bool)
						}
					</LEFT_LEAVE_CODE>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>GTN750 Page</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="GTN750_KnobLarge" Node="GTN_750_outknob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>GTN750_KnobLarge</ANIM_NAME>
					<CLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_KnobLargeInc)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_RKnobOuterInc,bool)
						}
					</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_KnobLargeDec)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_RKnobOuterDec,bool)
						}
					</ANTICLOCKWISE_CODE>
					<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>GTN750 Group</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="GTN750_HomePush" Node="GTN_750_Home">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>GTN_750_Home</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_HomePush)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_HomeKey,bool)
						}
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) if{
							0 (&gt;L:TDSGTNXI750U1_HomeKey,bool)
						}
					</LEFT_LEAVE_CODE>
					<WWISE_EVENT>as3000_push_button_on</WWISE_EVENT>	
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>GTN750 Direct To</TOOLTIPID>
				</UseTemplate>
			</Component>
			<Component ID="GTN750_DirectToPush" Node="GTN_750_Direct_To">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>GTN_750_Direct_To</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) ! if{
							(&gt;H:GTN750_DirectToPush)
						}
						els{
							1 (&gt;L:TDSGTNXI750U1_DTOKey,bool)
						}
					</LEFT_SINGLE_CODE>
					<LEFT_LEAVE_CODE>
						(L:TDSGTNXI_INSTALLED, bool) if{
							0 (&gt;L:TDSGTNXI750U1_DTOKey,bool)
						}
					</LEFT_LEAVE_CODE>
					<WWISE_EVENT>as3000_push_button_on</WWISE_EVENT>	
					<WWISE_EVENT_1>as3000_push_button_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>as3000_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>GTN750 Direct To</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>


		<!-- GNS530 1 -->

		<Component ID="AS530_1">

			<Parameters Type="Default">
				<ID>1</ID>
				<AS430>AS530_1</AS430>
				<POTENTIOMETER>1</POTENTIOMETER>
				<FAILURE>(A:CIRCUIT ON:@Com1Circuit, bool)</FAILURE>
				<CIRCUIT_ID>@Com1Circuit</CIRCUIT_ID>
				<NAV_INDEX>1</NAV_INDEX>
				<COM_INDEX>1</COM_INDEX>
				<DONT_OVERRIDE_BASE_EMISSIVE>True</DONT_OVERRIDE_BASE_EMISSIVE>
			</Parameters>

			<UseTemplate Name="ASOBO_AS530_Template">
				<WWISE_PREFIX>as3000</WWISE_PREFIX>
				<EXTERNAL_AUTOPILOT_BEHAVIOR_CONTROL />
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<NORMALIZED_TIME_2>0.1</NORMALIZED_TIME_2>
			</UseTemplate>

		</Component>

		<!-- GNS530 KNOB SOUND REPLACEMENTS -->
		<Component ID="AS530_1_SOUND_REPLACEMENTS">

			<Component ID="AS530_1_Knob_Mhz_1_SOUND_REPLACEMENT" NODE="AS530_1_Knob_Mhz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<AS430>AS530_1</AS430>
					<NAV_INDEX>1</NAV_INDEX>
					<COM_INDEX>1</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_1_Knob_Mhz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>AS530_1_Knob_Mhz_1_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_LeftLargeKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_LeftLargeKnob_Left)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_MHZ_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_MHZ_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_1_knob_GPS_1_SOUND_REPLACEMENT" NODE="AS530_1_knob_GPS_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<AS430>AS530_1</AS430>
					<NAV_INDEX>1</NAV_INDEX>
					<COM_INDEX>1</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_1_knob_GPS_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>AS530_1_knob_GPS_1_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_RightLargeKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_RightLargeKnob_Left)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_GPS_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_GPS_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>


			<Component ID="AS530_1_Knob_Khz_1_SOUND_REPLACEMENT" NODE="AS530_1_Knob_Khz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<AS430>AS530_1</AS430>
					<NAV_INDEX>1</NAV_INDEX>
					<COM_INDEX>1</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_1_Knob_Khz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>AS530_1_Knob_Khz_1_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Left)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Push)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_KHZ_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_KHZ_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_1_Knob_Crsr_1_SOUND_REPLACEMENT" NODE="AS530_1_Knob_Crsr_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<AS430>AS530_1</AS430>
					<NAV_INDEX>1</NAV_INDEX>
					<COM_INDEX>1</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_1_Knob_Crsr_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>AS530_1_Knob_Crsr_1_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_RightSmallKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_RightSmallKnob_Left)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:#AS430#_RightSmallKnob_Push)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_CRSR_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_CRSR_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_1_Knob_COM_Volume_1" NODE="AS530_1_Knob_COM_Volume_1">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>AS530_1_Knob_COM_Volume_1</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>AS530_1_Knob_COM_Volume_1</PART_ID>
					<KNOB_ANIM_CODE>(A:COM VOLUME:1, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>AS530_Knob_COM_Volume_1</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:COM1_VOLUME_INC) (&gt;K:COM1_VOLUME_INC) (A:COM VOLUME:1, percent) 5 &gt; if{ 1 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool) }</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:COM1_VOLUME_DEC) (&gt;K:COM1_VOLUME_DEC) (A:COM VOLUME:1, percent) 5 &lt; if{ 0 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool) }</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_COMMNAV1_TEST_TOGGLE)</LEFT_SINGLE_CODE>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM1 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AS530_1_Knob_NAV_Volume_1_REPLACEMENT" NODE="AS530_1_Knob_NAV_Volume_1_REPLACEMENT">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>AS530_1_Knob_NAV_Volume_1_REPLACEMENT</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>AS530_1_Knob_NAV_Volume_1_REPLACEMENT</PART_ID>
					<KNOB_ANIM_CODE>(A:NAV VOLUME:1, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>AS530_1_Knob_NAV_Volume_1_REPLACEMENT</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:NAV1_VOLUME_INC) (&gt;K:NAV1_VOLUME_INC)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:NAV1_VOLUME_DEC) (&gt;K:NAV1_VOLUME_DEC)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_VOR1_IDENT_TOGGLE)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV1 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>


		<!-- GNS530 2 -->

		<Component ID="AS530_2">

			<Parameters Type="Default">
				<ID>2</ID>
				<AS430>AS530_2</AS430>
				<POTENTIOMETER>1</POTENTIOMETER>
				<FAILURE>(A:CIRCUIT ON:@Com2Circuit, bool)</FAILURE>
				<CIRCUIT_ID>@Com2Circuit</CIRCUIT_ID>
				<NAV_INDEX>2</NAV_INDEX>
				<COM_INDEX>2</COM_INDEX>
				<DONT_OVERRIDE_BASE_EMISSIVE>True</DONT_OVERRIDE_BASE_EMISSIVE>
			</Parameters>

			<UseTemplate Name="ASOBO_AS530_Template">
				<WWISE_PREFIX>as3000</WWISE_PREFIX>
				<EXTERNAL_AUTOPILOT_BEHAVIOR_CONTROL />
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<NORMALIZED_TIME_2>0.1</NORMALIZED_TIME_2>
			</UseTemplate>

		</Component>

		<!-- GNS530 KNOB SOUND REPLACEMENTS -->
		<Component ID="AS530_2_SOUND_REPLACEMENTS">

			<Component ID="AS530_2_Knob_Mhz_2_SOUND_REPLACEMENT" NODE="AS530_2_Knob_Mhz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>2</ID>
					<AS430>AS530_2</AS430>
					<NAV_INDEX>2</NAV_INDEX>
					<COM_INDEX>2</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_2_Knob_Mhz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>AS530_2_Knob_Mhz_2_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_LeftLargeKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_LeftLargeKnob_Left)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_MHZ_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_MHZ_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_2_knob_GPS_2_SOUND_REPLACEMENT" NODE="AS530_2_knob_GPS_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>2</ID>
					<AS430>AS530_2</AS430>
					<NAV_INDEX>2</NAV_INDEX>
					<COM_INDEX>2</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_2_knob_GPS_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>AS530_2_knob_GPS_2_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_RightLargeKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_RightLargeKnob_Left)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_GPS_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_GPS_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>


			<Component ID="AS530_2_Knob_Khz_2_SOUND_REPLACEMENT" NODE="AS530_2_Knob_Khz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>2</ID>
					<AS430>AS530_2</AS430>
					<NAV_INDEX>2</NAV_INDEX>
					<COM_INDEX>2</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_2_Knob_Khz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>AS530_2_Knob_Khz_2_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Left)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:#AS430#_LeftSmallKnob_Push)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_KHZ_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_KHZ_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_2_Knob_Crsr_2_SOUND_REPLACEMENT" NODE="AS530_2_Knob_Crsr_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>2</ID>
					<AS430>AS530_2</AS430>
					<NAV_INDEX>2</NAV_INDEX>
					<COM_INDEX>2</COM_INDEX>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>AS530_2_Knob_Crsr_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>AS530_2_Knob_Crsr_2_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:#AS430#_RightSmallKnob_Right)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:#AS430#_RightSmallKnob_Left)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:#AS430#_RightSmallKnob_Push)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TT_DESCRIPTION_ID>@TT_Package.AS430_KNOB_CRSR_ACTION</TT_DESCRIPTION_ID>
					<TOOLTIP_TITLE>@TT_Package.AS430_KNOB_CRSR_TITLE</TOOLTIP_TITLE>
				</UseTemplate>
			</Component>

			<Component ID="AS530_2_Knob_COM_Volume_2" NODE="AS530_2_Knob_COM_Volume_2">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>AS530_2_Knob_COM_Volume_2</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>AS530_2_Knob_COM_Volume_2</PART_ID>
					<KNOB_ANIM_CODE>(A:COM VOLUME:2, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>AS530_Knob_COM_Volume_2</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:COM2_VOLUME_INC) (&gt;K:COM2_VOLUME_INC) (A:COM VOLUME:2, percent) 5 &gt; if{ 1 (&gt;A:CIRCUIT SWITCH ON:@Com2Circuit, bool) }</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:COM2_VOLUME_DEC) (&gt;K:COM2_VOLUME_DEC) (A:COM VOLUME:2, percent) 5 &lt; if{ 0 (&gt;A:CIRCUIT SWITCH ON:@Com2Circuit, bool) }</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_COMMNAV2_TEST_TOGGLE)</LEFT_SINGLE_CODE>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM2 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="AS530_2_Knob_NAV_Volume_2_REPLACEMENT" NODE="AS530_2_Knob_NAV_Volume_2_REPLACEMENT">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>AS530_2_Knob_NAV_Volume_2_REPLACEMENT</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>AS530_2_Knob_NAV_Volume_2_REPLACEMENT</PART_ID>
					<KNOB_ANIM_CODE>(A:NAV VOLUME:2, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>AS530_2_Knob_NAV_Volume_2_REPLACEMENT</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:NAV2_VOLUME_INC) (&gt;K:NAV2_VOLUME_INC)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:NAV2_VOLUME_DEC) (&gt;K:NAV2_VOLUME_DEC)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_VOR2_IDENT_TOGGLE)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV2 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>



		<!-- KX155B 1 KNOB SOUND REPLACEMENTS -->
		<Component ID="KX155B_1">

			<Component ID="COM_Knob_Mhz_1_SOUND_REPLACEMENT" NODE="COM_Knob_Mhz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>COM_Knob_Mhz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>COM_Knob_Mhz_1_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO1_COM_Knob_Large_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO1_COM_Knob_Large_DEC)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 1 MHz</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="COM_Knob_Khz_1_SOUND_REPLACEMENT" NODE="COM_Knob_Khz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>COM_Knob_Khz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>COM_Knob_Khz_1_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO1_COM_Knob_Small_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO1_COM_Knob_Small_DEC)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:RADIO1_COM_Knob_Small_PUSH)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 1 kHz</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>Com1Pull_L</NODE_ID>
					<ANIM_NAME>Com1Pull_L</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:COM_1_KNOB_PULLED, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="Com1Pull_L">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

			<Component ID="NAV_Knob_Mhz_1_SOUND_REPLACEMENT" NODE="NAV_Knob_Mhz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>NAV_Knob_Mhz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>NAV_Knob_Mhz_1_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO1_NAV_Knob_Large_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO1_NAV_Knob_Large_DEC)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV 1 MHz</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Knob_Khz_1_SOUND_REPLACEMENT" NODE="NAV_Knob_Khz_1_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>NAV_Knob_Khz_1_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>NAV_Knob_Khz_1_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO1_NAV_Knob_Small_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO1_NAV_Knob_Small_DEC)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:RADIO1_NAV_Knob_Small_PUSH)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV 1 kHz</TOOLTIPID>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>Com1Pull_R</NODE_ID>
					<ANIM_NAME>Com1Pull_R</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:NAV_1_KNOB_PULLED, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="Com1Pull_R">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

			<Component ID="COM_Knob_OnOff_1" NODE="COM_Knob_OnOff_1">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>COM_Knob_OnOff_1</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>COM_Knob_OnOff_1</PART_ID>
					<KNOB_ANIM_CODE>(A:COM VOLUME:1, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>COM_Knob_OnOff_1</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:COM1_VOLUME_INC) (&gt;K:COM1_VOLUME_INC) (A:COM VOLUME:1, percent) 5 &gt; if{ 1 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool) }</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:COM1_VOLUME_DEC) (&gt;K:COM1_VOLUME_DEC) (A:COM VOLUME:1, percent) 5 &lt; if{ 0 (&gt;A:CIRCUIT SWITCH ON:@Com1Circuit, bool) }</ANTICLOCKWISE_CODE>
					<!-- <LEFT_SINGLE_CODE>(&gt;K:RADIO_COMMNAV1_TEST_TOGGLE)</LEFT_SINGLE_CODE> -->
					<LEFT_SINGLE_CODE>(&gt;H:RADIO1_COM_Freq_Spacing_PUSH)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM1 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Knob_OnOff_1" NODE="NAV_Knob_OnOff_1">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>NAV_Knob_OnOff_1</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>NAV_Knob_OnOff_1</PART_ID>
					<KNOB_ANIM_CODE>(A:NAV VOLUME:1, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>NAV_Knob_OnOff_1</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:NAV1_VOLUME_INC) (&gt;K:NAV1_VOLUME_INC)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:NAV1_VOLUME_DEC) (&gt;K:NAV1_VOLUME_DEC)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_VOR1_IDENT_TOGGLE)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV1 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="COM_Push_Swap_1" NODE="COM_Push_Swap_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>COM_Push_Swap_1</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;K:COM1_RADIO_SWAP) </LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM1 Swap</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Push_Swap_1" NODE="NAV_Push_Swap_1">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>NAV_Push_Swap_1</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;K:NAV1_RADIO_SWAP) </LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV1 Swap</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>



		<!-- KX155B 2 KNOB SOUND REPLACEMENTS -->
		<Component ID="KX155B_2">

			<Component ID="COM_Knob_Mhz_2_SOUND_REPLACEMENT" NODE="COM_Knob_Mhz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>COM_Knob_Mhz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>COM_Knob_Mhz_2_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO2_COM_Knob_Large_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO2_COM_Knob_Large_DEC)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 2 MHz</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="COM_Knob_Khz_2_SOUND_REPLACEMENT" NODE="COM_Knob_Khz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>COM_Knob_Khz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>COM_Knob_Khz_2_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO2_COM_Knob_Small_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO2_COM_Knob_Small_DEC)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:RADIO2_COM_Knob_Small_PUSH)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 2 kHz</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>Com2Pull_L</NODE_ID>
					<ANIM_NAME>Com2Pull_L</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:COM_2_KNOB_PULLED, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="Com2Pull_L">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

			<Component ID="NAV_Knob_Mhz_2_SOUND_REPLACEMENT" NODE="NAV_Knob_Mhz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>NAV_Knob_Mhz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME>NAV_Knob_Mhz_2_SOUND_REPLACEMENT</ANIM_NAME>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO2_NAV_Knob_Large_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO2_NAV_Knob_Large_DEC)</ANTICLOCKWISE_CODE>
		    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV 2 MHz</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Knob_Khz_2_SOUND_REPLACEMENT" NODE="NAV_Knob_Khz_2_SOUND_REPLACEMENT">
				<Parameters Type="Default">
					<ID>1</ID>
					<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
					<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
				</Parameters>

				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ROTATION_SPEED>10</ROTATION_SPEED>
					<NODE_ID>NAV_Knob_Khz_2_SOUND_REPLACEMENT</NODE_ID>
					<ANIM_NAME_KNOB>NAV_Knob_Khz_2_SOUND_REPLACEMENT</ANIM_NAME_KNOB>
		    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<CLOCKWISE_CODE>(&gt;H:RADIO2_NAV_Knob_Small_INC)</CLOCKWISE_CODE>
		    		<ANTICLOCKWISE_CODE>(&gt;H:RADIO2_NAV_Knob_Small_DEC)</ANTICLOCKWISE_CODE>
		    		<LEFT_SINGLE_CODE>(&gt;H:RADIO2_NAV_Knob_Small_PUSH)</LEFT_SINGLE_CODE>
		    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM 2 kHz</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>Com2Pull_R</NODE_ID>
					<ANIM_NAME>Com2Pull_R</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:NAV_2_KNOB_PULLED, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="Com2Pull_R">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

			<Component ID="COM_Knob_OnOff_2" NODE="COM_Knob_OnOff_2">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>COM_Knob_OnOff_2</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>COM_Knob_OnOff_2</PART_ID>
					<KNOB_ANIM_CODE>(A:COM VOLUME:2, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>COM_Knob_OnOff_2</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:COM2_VOLUME_INC) (&gt;K:COM2_VOLUME_INC) (A:COM VOLUME:2, percent) 5 &gt; if{ 1 (&gt;A:CIRCUIT SWITCH ON:@Com2Circuit, bool) }</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:COM2_VOLUME_DEC) (&gt;K:COM2_VOLUME_DEC) (A:COM VOLUME:2, percent) 5 &lt; if{ 0 (&gt;A:CIRCUIT SWITCH ON:@Com2Circuit, bool) }</ANTICLOCKWISE_CODE>
					<!-- <LEFT_SINGLE_CODE>(&gt;K:RADIO_COMMNAV2_TEST_TOGGLE)</LEFT_SINGLE_CODE> -->
					<LEFT_SINGLE_CODE>(&gt;H:RADIO2_COM_Freq_Spacing_PUSH)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM2 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Knob_OnOff_2" NODE="NAV_Knob_OnOff_2">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>NAV_Knob_OnOff_2</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>NAV_Knob_OnOff_2</PART_ID>
					<KNOB_ANIM_CODE>(A:NAV VOLUME:2, percent)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>NAV_Knob_OnOff_2</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>(&gt;K:NAV2_VOLUME_INC) (&gt;K:NAV2_VOLUME_INC)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;K:NAV2_VOLUME_DEC) (&gt;K:NAV2_VOLUME_DEC)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_VOR2_IDENT_TOGGLE)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV2 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="COM_Push_Swap_2" NODE="COM_Push_Swap_2">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>COM_Push_Swap_2</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;K:COM2_RADIO_SWAP) </LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>COM2 Swap</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="NAV_Push_Swap_2" NODE="NAV_Push_Swap_2">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>NAV_Push_Swap_2</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;K:NAV2_RADIO_SWAP) </LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV2 Swap</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>

		<Component ID="AS87">
			<UseTemplate Name="ASOBO_ADF_AS87_Template">
				<ID>1</ID>
				<CIRCUIT_ADF>@ADFCircuit</CIRCUIT_ADF>
				<DONT_APPEND_ID>false</DONT_APPEND_ID>
				<EMISSIVE_POTENTIOMETER>11</EMISSIVE_POTENTIOMETER>
				<BUTTON_EMISSIVE_FACTOR>0</BUTTON_EMISSIVE_FACTOR>
				
				<NODE_ID_100_KHZ>DummyPlaceholder</NODE_ID_100_KHZ>
				<ANIM_NAME_100_KHZ>DummyPlaceholder</ANIM_NAME_100_KHZ>
				<NODE_ID_1_10_KHZ>DummyPlaceholder</NODE_ID_1_10_KHZ>
				<ANIM_NAME_1_10_KHZ>DummyPlaceholder</ANIM_NAME_1_10_KHZ>
				<ANIM_NAME_1_10_KHZ_PUSH>DummyPlaceholder</ANIM_NAME_1_10_KHZ_PUSH>

				<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>
				<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
			</UseTemplate>
		</Component>

		<!-- AS87 KR87 SOUND REPLACEMENTS -->
		<Component ID="ADF_Knob_Frequency_MHz_1" NODE="ADF_Knob_Frequency_MHz_1">
			<Parameters Type="Default">
				<ID>1</ID>
				<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
				<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
			</Parameters>

			<UseTemplate Name="ASOBO_GT_Knob_Infinite">
				<ROTATION_SPEED>10</ROTATION_SPEED>
				<NODE_ID>ADF_Knob_Frequency_MHz_1</NODE_ID>
				<ANIM_NAME>ADF_Knob_Frequency_MHz_1</ANIM_NAME>
	    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
	    		<CLOCKWISE_CODE>(&gt;K:ADF_100_INC)</CLOCKWISE_CODE>
	    		<ANTICLOCKWISE_CODE>(&gt;K:ADF_100_DEC)</ANTICLOCKWISE_CODE>
	    		<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
				<COUNT>36</COUNT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ADF MHz</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="ADF_Knob_Frequency_KHz_1" NODE="ADF_Knob_Frequency_KHz_1">
			<Parameters Type="Default">
				<ID>1</ID>
				<ANIM_LAG_SWITCH>500</ANIM_LAG_SWITCH>
				<ANIM_NEVER_FAILS>True</ANIM_NEVER_FAILS>
			</Parameters>

			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
				<ROTATION_SPEED>10</ROTATION_SPEED>
				<NODE_ID>ADF_Knob_Frequency_KHz_1</NODE_ID>
				<ANIM_NAME_KNOB>ADF_Knob_Frequency_KHz_1</ANIM_NAME_KNOB>
	    		<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
	    		<CLOCKWISE_CODE>
	    			(L:var_adfKnobPulled, bool) if{
	    				(&gt;K:ADF_10_INC)
	    			}
	    			els{
	    				(&gt;K:ADF_1_INC)
	    			}
	    		</CLOCKWISE_CODE>
	    		<ANTICLOCKWISE_CODE>
	    			(L:var_adfKnobPulled, bool) if{
	    				(&gt;K:ADF_10_DEC)
	    			}
	    			els{
	    				(&gt;K:ADF_1_DEC)
	    			}
	    		</ANTICLOCKWISE_CODE>
	    		<LEFT_SINGLE_CODE>(L:var_adfKnobPulled, bool) ! (&gt;L:var_adfKnobPulled, bool)</LEFT_SINGLE_CODE>
	    		<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
				<COUNT>36</COUNT>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>ADF kHz</TOOLTIPID>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<NODE_ID>ADF_Knob_Pull</NODE_ID>
				<ANIM_NAME>ADF_Knob_Pull</ANIM_NAME>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>250</ANIM_LAG>
				<ANIM_CODE>(L:var_adfKnobPulled, bool) 100 *</ANIM_CODE>
			</UseTemplate>

			<AnimationTriggers Animation="ADF_Knob_Pull">
				<EventTrigger NormalizedTime="0.5" Direction="Forward">
					<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.1" Direction="Backward">
					<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>
		</Component>

		<Component ID="AS330">
			<UseTemplate Name="ASOBO_AS330_Template">
				<ID>1</ID>
				<!-- <FAILURE>(A:CIRCUIT ON:68, Bool)</FAILURE> -->
				<!-- <CIRCUIT_ID>68</CIRCUIT_ID> -->
				<DONT_APPEND_ID>false</DONT_APPEND_ID>
				<EMISSIVE_CODE_FACTOR>0</EMISSIVE_CODE_FACTOR>
				<WWISE_EVENT>autopilot_push_button_on</WWISE_EVENT>
				<WWISE_EVENT_1>autopilot_push_button_on</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			</UseTemplate>
		</Component>


		<Component ID="KNS80_RNAV">
			<Component ID="EfisSourceSwitch" Node="EfisSourceSwitch">
				<UseTemplate Name="ASOBO_GT_Switch_Code">
					<NODE_ID>EfisSourceSwitch</NODE_ID>
					<ANIM_NAME>EfisSourceSwitch</ANIM_NAME>
					<PART_ID>EfisSourceSwitch</PART_ID>
					<ANIM_CODE>(L:var_efisSource, bool) 100 *</ANIM_CODE>
					<ANIM_LAG>800</ANIM_LAG>
					<LEFT_SINGLE_CODE>
						(L:var_efisSource, bool) ! (&gt;L:var_efisSource, bool)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>EFIS Source</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="StormScopeSwitch" NODE="StormScopeSwitch">
				<UseTemplate Name="ASOBO_GT_Switch_3States">
					<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
					<SWITCH_POSITION_VAR>var_stormScopeSwitch</SWITCH_POSITION_VAR>
					<NODE_ID>StormScopeSwitch</NODE_ID>
					<ANIM_NAME>StormScopeSwitch</ANIM_NAME>
					<INVERT_ANIM>TRUE</INVERT_ANIM>
					<ANIM_LAG>800</ANIM_LAG>
					<WWISE_EVENT>light_cabin_switch_on</WWISE_EVENT>
					<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
					<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>

					<PART_ID>DEICE_Switch_Airframe</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Storm Scope</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RnavMhzKnob" Node="RnavMhzKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite">
					<ANIM_NAME>RnavMhzKnob</ANIM_NAME>
					<CLOCKWISE_CODE>(&gt;H:KNS80_bigInc)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;H:KNS80_bigDec)</ANTICLOCKWISE_CODE>
					<WWISE_EVENT>AS580_big_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV Data Adjust</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RnavKhzKnob" Node="RnavKhzKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
					<ANIM_NAME_KNOB>RnavKhzKnob</ANIM_NAME_KNOB>
					<CLOCKWISE_CODE>(&gt;H:KNS80_smallInc)</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>(&gt;H:KNS80_smallDec)</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(L:var_rnavKnobPulled, bool) ! (&gt;L:var_rnavKnobPulled, bool)</LEFT_SINGLE_CODE>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>	
					<COUNT>36</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV Data Adjust</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<NODE_ID>RnavKhzKnobPull</NODE_ID>
					<ANIM_NAME>RnavKhzKnobPull</ANIM_NAME>
					<ANIM_LENGTH>20</ANIM_LENGTH>
					<ANIM_LAG>250</ANIM_LAG>
					<ANIM_CODE>(L:var_rnavKnobPulled, bool) 100 *</ANIM_CODE>
				</UseTemplate>

				<AnimationTriggers Animation="RnavKhzKnobPull">
					<EventTrigger NormalizedTime="0.5" Direction="Forward">
						<SoundEvent WwiseEvent="yoke_push_button_on" Action="Play"/>
					</EventTrigger>
					<EventTrigger NormalizedTime="0.1" Direction="Backward">
						<SoundEvent WwiseEvent="yoke_push_button_off" Action="Play"/>
					</EventTrigger>
				</AnimationTriggers>
			</Component>

			<Component ID="RnavPowerKnob" NODE="RnavPowerKnob">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Switch">
					<NODE_ID>RnavPowerKnob</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>RnavPowerKnob</PART_ID>
					<KNOB_ANIM_CODE>(L:var_RNAV_VOLUME, number)</KNOB_ANIM_CODE>
					<ANIM_NAME_KNOB>RnavPowerKnob</ANIM_NAME_KNOB>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<CLOCKWISE_CODE>
						(L:var_RNAV_VOLUME, number) 100 &lt; if{
							(L:var_RNAV_VOLUME, number) 5 + (&gt;L:var_RNAV_VOLUME, number)
							(L:var_RNAV_VOLUME, number) 5 &gt; if{ 1 (&gt;A:CIRCUIT SWITCH ON:@RNAVCircuit, bool) }
						}
					</CLOCKWISE_CODE>
					<ANTICLOCKWISE_CODE>
						(L:var_RNAV_VOLUME, number) 0 &gt; if{
							(L:var_RNAV_VOLUME, number) 5 - (&gt;L:var_RNAV_VOLUME, number)
							(L:var_RNAV_VOLUME, number) 5 &lt; if{ 0 (&gt;A:CIRCUIT SWITCH ON:@RNAVCircuit, bool) }
						}
					</ANTICLOCKWISE_CODE>
					<LEFT_SINGLE_CODE>(&gt;K:RADIO_VOR3_IDENT_TOGGLE)</LEFT_SINGLE_CODE>
					<COUNT>100</COUNT>
					<ANIM_LAG>0</ANIM_LAG>
					<WWISE_EVENT>AS580_knob_turn</WWISE_EVENT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>NAV3 Volume</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RnavVorButton" NODE="RnavVorButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavVorButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_vorModeButton) </LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV VOR Mode</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="RnavRnavButton" NODE="RnavRnavButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavRnavButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_rnavModeButton) </LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV RNAV Mode</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="RnavHoldButton" NODE="RnavHoldButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavHoldButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_dmeHoldButton) (L:var_RNAV_DMEHOLD, bool) ! (&gt;L:var_RNAV_DMEHOLD, bool)</LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.9</NORMALIZED_TIME_2>
					<OVERRIDE_ANIM_CODE>(L:var_RNAV_DMEHOLD, bool) 100 *</OVERRIDE_ANIM_CODE>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV DME Hold</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="RnavUseButton" NODE="RnavUseButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavUseButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_useButton) </LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV Use</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="RnavDisplayButton" NODE="RnavDisplayButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavDisplayButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_displayButton) </LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV Display Mode</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="RnavDataButton" NODE="RnavDataButton">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RnavDataButton</ANIM_NAME>
					<LEFT_SINGLE_CODE> (&gt;H:KNS80_dataButton) </LEFT_SINGLE_CODE>
					<ANIM_LAG>300</ANIM_LAG>
					<WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>RNAV Data Mode</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(L:LIGHTING_PANEL_1, number) (A:CIRCUIT ON:@RNAVCircuit, bool) (A:CIRCUIT ON:@InstrumentLightsCircuit, bool) * * 1000 /</EMISSIVE_CODE>
				</UseTemplate>
			</Component>

		</Component>



		<!-- Weather Radar -->

		<Component ID="WEATHER_RADAR">

			<Component ID="RadarMode" NODE="RadarMode">

				<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
					<THRESHOLD_MOUSE>0.03</THRESHOLD_MOUSE>
					<THRESHOLD_INPUT>0.05</THRESHOLD_INPUT>
		        	<WRAP>False</WRAP>
		        	<ANIM_LAG>300</ANIM_LAG>
		        	<PART_ID>RadarMode</PART_ID>
		        	<ANIM_CODE>(L:var_radarMode, number) 20.0 *</ANIM_CODE>
		        	<ANIM_NAME>RadarMode</ANIM_NAME>
		        	<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
		    		<ANTICLOCKWISE_CODE> 
	    				(L:var_radarMode, number) 0 &gt; if{ (L:var_radarMode, number) 5 min 1 - (&gt;L:var_radarMode, number) }
	    				(L:var_radarMode, number) 0 == (A:CIRCUIT SWITCH ON:@WeatherRadarControllerCircuit, Boolean) and if{ @WeatherRadarControllerCircuit (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }
	    			</ANTICLOCKWISE_CODE>
	    			<CLOCKWISE_CODE> 
	    				(L:var_radarMode, number) 5 &lt; if{ (L:var_radarMode, number) 1 + (&gt;L:var_radarMode, number) }
	    				(L:var_radarMode, number) 0 &gt; (A:CIRCUIT SWITCH ON:@WeatherRadarControllerCircuit, Boolean) ! if{ @WeatherRadarControllerCircuit (&gt;K:ELECTRICAL_CIRCUIT_TOGGLE) }
	    			</CLOCKWISE_CODE>
		    		<!-- <WWISE_EVENT>intlights_knob</WWISE_EVENT> -->
		    		<COUNT>5</COUNT>
		    		<WWISE_EVENT>push_light_top_switch_off</WWISE_EVENT>

		    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
		    		<TOOLTIPID>Radar Mode Selector</TOOLTIPID>
		        </UseTemplate>

		    </Component>

		    <Component ID="RadarBrightness" NODE="RadarBrightness">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
					<NODE_ID>RadarBrightness</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>RadarBrightness</PART_ID>
					<ANIM_CODE>(L:var_RadarBrightness, number)</ANIM_CODE>
					<ANIM_NAME>RadarBrightness</ANIM_NAME>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANTICLOCKWISE_CODE> (L:var_RadarBrightness, number) 0 &gt; if{ (L:var_RadarBrightness, number) 1 - (&gt;L:var_RadarBrightness, number) }</ANTICLOCKWISE_CODE>
					<CLOCKWISE_CODE> (L:var_RadarBrightness, number) 100 &lt; if{ (L:var_RadarBrightness, number) 1 + (&gt;L:var_RadarBrightness, number) } </CLOCKWISE_CODE>
					<!-- <WWISE_EVENT>intlights_knob</WWISE_EVENT> -->
					<COUNT>100</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Brightness</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
					<ANIM_NAME>RadarBrightness</ANIM_NAME>
					<WWISE_EVENT_1>autopilot_heading_knob</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
					<DIRECTION_1>Forward</DIRECTION_1>
					<WWISE_EVENT_2>autopilot_heading_knob</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
					<DIRECTION_2>Backward</DIRECTION_2>
				</UseTemplate>
			</Component>

			<Component ID="RadarGain" NODE="RadarGain">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
					<NODE_ID>RadarGain</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>RadarGain</PART_ID>
					<ANIM_CODE>(L:var_RadarGain, number)</ANIM_CODE>
					<ANIM_NAME>RadarGain</ANIM_NAME>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANTICLOCKWISE_CODE> (L:var_RadarGain, number) 0 &gt; if{ (L:var_RadarGain, number) 1 - (&gt;L:var_RadarGain, number) }</ANTICLOCKWISE_CODE>
					<CLOCKWISE_CODE> (L:var_RadarGain, number) 100 &lt; if{ (L:var_RadarGain, number) 1 + (&gt;L:var_RadarGain, number) } </CLOCKWISE_CODE>
					<!-- <WWISE_EVENT>intlights_knob</WWISE_EVENT> -->
					<COUNT>100</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Gain</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
					<ANIM_NAME>RadarGain</ANIM_NAME>
					<WWISE_EVENT_1>autopilot_heading_knob</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
					<DIRECTION_1>Forward</DIRECTION_1>
					<WWISE_EVENT_2>autopilot_heading_knob</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
					<DIRECTION_2>Backward</DIRECTION_2>
				</UseTemplate>
			</Component>

			<Component ID="RadarTilt" NODE="RadarTilt">
				<UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
					<NODE_ID>RadarTilt</NODE_ID>
					<WRAP>False</WRAP>
					<PART_ID>RadarTilt</PART_ID>
					<ANIM_CODE>(L:var_RadarTilt, number)</ANIM_CODE>
					<ANIM_NAME>RadarTilt</ANIM_NAME>
					<ANIMCURSOR_DIR>-1.0</ANIMCURSOR_DIR>
					<ANTICLOCKWISE_CODE> (L:var_RadarTilt, number) 0 &gt; if{ (L:var_RadarTilt, number) 1 - (&gt;L:var_RadarTilt, number) }</ANTICLOCKWISE_CODE>
					<CLOCKWISE_CODE> (L:var_RadarTilt, number) 100 &lt; if{ (L:var_RadarTilt, number) 1 + (&gt;L:var_RadarTilt, number) } </CLOCKWISE_CODE>
					<!-- <WWISE_EVENT>intlights_knob</WWISE_EVENT> -->
					<COUNT>100</COUNT>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Tilt</TOOLTIPID>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_AnimTriggers_2SoundEvents">
					<ANIM_NAME>RadarTilt</ANIM_NAME>
					<WWISE_EVENT_1>autopilot_heading_knob</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
					<DIRECTION_1>Forward</DIRECTION_1>
					<WWISE_EVENT_2>autopilot_heading_knob</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
					<DIRECTION_2>Backward</DIRECTION_2>
				</UseTemplate>
			</Component>

			<Component ID="RadarAlert" Node="RadarAlert">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarAlert</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						<!-- (&gt;H:radarAlertToggle) -->
						(&gt;H:bksq_wradar1_radarAlertToggle)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Alert Mode</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarVerticalProfile" Node="RadarVerticalProfile">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarVerticalProfile</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarProfile)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Profile Mode</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarMap" Node="RadarMap">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarMap</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarMap)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Map Mode</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarHold" Node="RadarHold">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarHold</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarHold)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Hold Mode</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarRangeUp" Node="RadarRangeUp">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarRangeUp</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarRangeInc)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Range Increase</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarRangeDown" Node="RadarRangeDown">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarRangeDown</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarRangeDec)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Range Decrease</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarTrackLeft" Node="RadarTrackLeft">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarTrackLeft</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarTrackLeft)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Track Left</TOOLTIPID>
				</UseTemplate>
			</Component>

			<Component ID="RadarTrackRight" Node="RadarTrackRight">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<ANIM_NAME>RadarTrackRight</ANIM_NAME>
					<LEFT_SINGLE_CODE>
						(&gt;H:bksq_wradar1_radarTrackRight)
					</LEFT_SINGLE_CODE>
					<WWISE_EVENT_1>pressurization_dump_push_button_on</WWISE_EVENT_1>
					<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
					<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
					<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Radar Track Right</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>



		<!-- Composite Screen Switcheroo -->
		<Component ID="COMPOSITE_SCREENS">
			<Component ID="HsiScreen" Node="HsiScreen">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>
						(L:var_EfisCompositeMode, number) !
					</VISIBILITY_CODE>
				</UseTemplate>	
			</Component>

			<Component ID="HsiScreen_Composite" Node="HsiScreen_Composite">
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>
						(L:var_EfisCompositeMode, number)
					</VISIBILITY_CODE>
				</UseTemplate>	
			</Component>
		</Component>




		<!-- Screen Emissives Brightness -->

		<Component ID="SCREEN_BRIGHTNESSES">

			<!-- <UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>AttitudeScreen</NODE_ID>
				<POWER_CODE>(A:CIRCUIT ON:@EADICircuit, bool)</POWER_CODE>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>HsiScreen</NODE_ID>
				<POWER_CODE>(A:CIRCUIT ON:@EHSICircuit, bool)</POWER_CODE>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>HsiScreen_Composite</NODE_ID>
				<POWER_CODE>(A:CIRCUIT ON:@EHSICircuit, bool)</POWER_CODE>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate> -->

			<Component ID="AttitudeScreen" NODE="AttitudeScreen">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>0.02   (L:var_EADI_Brightness, number) (L:var_EADI_BrightnessWarmup, number) - 0 max   0.0098 * +   (A:CIRCUIT ON:@EADICircuit, bool) * </EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiScreen" NODE="HsiScreen">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>0.02   (L:var_EHSI_Brightness, number) (L:var_EHSI_BrightnessWarmup, number) - 0 max   0.0098 * +   (A:CIRCUIT ON:@EHSICircuit, bool) * </EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<Component ID="HsiScreen_Composite" NODE="HsiScreen_Composite">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>0.02   (L:var_EHSI_Brightness, number) (L:var_EHSI_BrightnessWarmup, number) - 0 max   0.0098 * +   (A:CIRCUIT ON:@EHSICircuit, bool) * </EMISSIVE_CODE>
				</UseTemplate>
			</Component>

			<UseTemplate Name="ASOBO_GT_Update">
				<FREQUENCY>10</FREQUENCY>
				<UPDATE_CODE>
					(A:CIRCUIT ON:@EADICircuit, bool) if{
						(L:var_EADI_BrightnessWarmup, number)      0.999   (L:var_cabinTemperature, number) 30 + 0 max 200 / 0.04 *    -      * (&gt;L:var_EADI_BrightnessWarmup, number)
					}
					els{
						100 (&gt;L:var_EADI_BrightnessWarmup, number)
					}

					(A:CIRCUIT ON:@EHSICircuit, bool) if{
						(L:var_EHSI_BrightnessWarmup, number)      0.999   (L:var_cabinTemperature, number) 30 + 0 max 200 / 0.04 *    -     * (&gt;L:var_EHSI_BrightnessWarmup, number)
					}
					els{
						100 (&gt;L:var_EHSI_BrightnessWarmup, number)
					}
				</UPDATE_CODE>
			</UseTemplate>

			

			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>GTN_750_screen</NODE_ID>
				<POWER_CODE>(A:CIRCUIT ON:@Com1Circuit, bool)</POWER_CODE>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>GTN_750_screen_TDS</NODE_ID>
				<POWER_CODE>(A:CIRCUIT ON:@Com1Circuit, bool)</POWER_CODE>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Gns530Screen_1</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.15</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.0</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Gns530Screen_2</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.15</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.0</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Radio1ComScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Radio2ComScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>TransponderScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>AdfScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Kns80Screen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>RadarScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>Kas297Screen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
    			<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>DmeScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>FreeAirTempScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>AltimeterScreen</NODE_ID>				
				<POTENTIOMETER>13</POTENTIOMETER>
				<DAY_FACTOR>1.50</DAY_FACTOR>
				<DUSK_FACTOR>0.50</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.120</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>TurbineTempScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DAY_FACTOR>1.50</DAY_FACTOR>
				<DUSK_FACTOR>0.50</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.120</NIGHT_FACTOR>
			</UseTemplate>
			<UseTemplate Name="BKSQ_PHOTOCELL_SCREEN_DIMMER">
				<NODE_ID>EtmScreen</NODE_ID>
				<POTENTIOMETER>13</POTENTIOMETER>
				<DUSK_FACTOR>0.20</DUSK_FACTOR>
    			<NIGHT_FACTOR>0.065</NIGHT_FACTOR>
			</UseTemplate>
		</Component>


	</Component>








	<!-- RADIO BUILDER -->


	<Component ID="RADIO_BUILDER">

		<Component ID="GTN_750_SD" Node="GTN_750_SD">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<NODE_ID>GTN_750_SD</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:TDSGTNXI_INSTALLED, bool) ! (&gt;L:TDSGTNXI_INSTALLED, bool)
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>as3000_big_knob_turn</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_on</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>

				<PART_ID>GTN_750_SD</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Swap PMS/TDS</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="Com1SelectSwitch" NODE="Com1SelectSwitch">

			<UseTemplate Name="ASOBO_GT_Switch_3States">
				<NODE_ID>Com1SelectSwitch</NODE_ID>
				<ANIM_NAME>Com1SelectSwitch</ANIM_NAME>
				<PART_ID>Com1SelectSwitch</PART_ID>
				<CODE_POS_0>
					0 (&gt;L:var_radio1Mode, number)
					0 (&gt;L:GTN750_INT_HIDDEN,bool) 0 (&gt;L:XMLVAR_GPS_DISABLED_GTN750, bool) 1 (&gt;L:AS530_1_HIDDEN,bool) 1 (&gt;L:KX155B_1_HIDDEN,bool)
				</CODE_POS_0>
				<CODE_POS_1>
					1 (&gt;L:var_radio1Mode, number)
					1 (&gt;L:GTN750_INT_HIDDEN,bool) 1 (&gt;L:XMLVAR_GPS_DISABLED_GTN750, bool) 0 (&gt;L:AS530_1_HIDDEN,bool) 1 (&gt;L:KX155B_1_HIDDEN,bool)
				</CODE_POS_1>
				<CODE_POS_2>
					2 (&gt;L:var_radio1Mode, number)
					1 (&gt;L:GTN750_INT_HIDDEN,bool) 1 (&gt;L:XMLVAR_GPS_DISABLED_GTN750, bool) 1 (&gt;L:AS530_1_HIDDEN,bool) 0 (&gt;L:KX155B_1_HIDDEN,bool) (A:GPS DRIVES NAV1, Bool) if{ (&gt;K:TOGGLE_GPS_DRIVES_NAV1) }
				</CODE_POS_2>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<OVERRIDE_ANIM_CODE>
					(L:var_radio1Mode, number) (&gt;O:switchstate)
					(L:var_radio1Mode, number) 100 *
				</OVERRIDE_ANIM_CODE>
				<WWISE_EVENT>safety_elt_switch</WWISE_EVENT>
				<WWISE_EVENT_1>safety_elt_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_elt_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Radio 1 Selector</TOOLTIPID>
			</UseTemplate>

	    </Component>

	    <Component ID="Com2SelectSwitch" NODE="Com2SelectSwitch">

	        <UseTemplate Name="ASOBO_GT_Switch_Code">
				<NODE_ID>Com2SelectSwitch</NODE_ID>
				<ANIM_NAME>Com2SelectSwitch</ANIM_NAME>
				<PART_ID>Com2SelectSwitch</PART_ID>
				<ANIM_CODE>(L:var_radio2Mode, number) 100 *</ANIM_CODE>
				<LEFT_SINGLE_CODE>
					(L:var_radio2Mode, number) 0 == if{
						1 (&gt;L:var_radio2Mode, number)
						1 (&gt;L:AS530_2_HIDDEN,bool) 0 (&gt;L:KX155B_2_HIDDEN,bool)
					}
					els{
						0 (&gt;L:var_radio2Mode, number)
						0 (&gt;L:AS530_2_HIDDEN,bool) 1 (&gt;L:KX155B_2_HIDDEN,bool)
					}
				</LEFT_SINGLE_CODE>
				<INVERT_ANIM>TRUE</INVERT_ANIM>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>safety_elt_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_elt_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Radio 2 Selector</TOOLTIPID>
			</UseTemplate>

	    </Component>

	    <Component ID="Gma340Location" Node="Gma340Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					1
				</VISIBILITY_CODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Gma340Location</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>
		</Component>

		<Component ID="Gtn750Location" Node="Gtn750Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:var_radio1Mode, number) 0 ==</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Gtn750Location</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>
		</Component>
		<Component ID="GTN_750_screen" Node="GTN_750_screen">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:TDSGTNXI_INSTALLED, bool) ! (L:var_radio1Mode, number) 0 == and</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>GTN_Screen_Anim</ANIM_NAME>
	    		<ANIM_CODE>
	    			(L:TDSGTNXI_INSTALLED, bool) 100 *
	    		</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="GTN_750_screen_TDS" Node="GTN_750_screen_TDS">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:TDSGTNXI_INSTALLED, bool) (L:var_radio1Mode, number) 0 == and</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>GTN_Screen_Anim</ANIM_NAME>
	    		<ANIM_CODE>
	    			(L:TDSGTNXI_INSTALLED, bool) 100 *
	    		</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Gns530Location1" Node="Gns530Location1">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:var_radio1Mode, number) 1 ==</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Gns530Location1</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>
		</Component>

		<Component ID="Gns530Location2" Node="Gns430Location2">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:var_radio2Mode, number) 0 ==</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Gns530Location2</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>
		</Component>

		<Component ID="Radio1Location" Node="Radio1Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:var_radio1Mode, number) 2 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Radio2Location" Node="Radio2Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:var_radio2Mode, number) 1 ==</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Radio2Location</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>		
		</Component>

		<Component ID="Kns80Location" Node="Kns81Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					@RadioBuilderAnimationFrame 4 &lt;
				</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Kns80Location</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>		
		</Component>

		<Component ID="Kr87Location" Node="Kr87Location">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					1
				</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>Kr87Location</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>		
		</Component>

		<Component ID="WeatherRadarLocation" Node="WeatherRadarLocation">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					1
				</VISIBILITY_CODE>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
	    		<ANIM_NAME>WeatherRadarLocation</ANIM_NAME>
	    		<ANIM_CODE>
	    			@RadioBuilderAnimationFrame
	    		</ANIM_CODE>
	    		<ANIM_LENGTH>5</ANIM_LENGTH>
			</UseTemplate>		
		</Component>

	</Component>










	<Component ID="LIGHTING_CONTROLS">

		<!-- Main Knobs -->

		<Component ID="InstrumentLightingKnob" NODE="InstrumentLightingKnob">
		    <UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>250</ANIM_LAG>
	        	<PART_ID>InstrumentLightingKnob</PART_ID>
	        	<ANIM_NAME>InstrumentLightingKnob</ANIM_NAME>
	        	<ANIM_CODE>(L:var_InstrumentLightingKnob, number)</ANIM_CODE>
	        	<CLOCKWISE_CODE>
        			(L:var_InstrumentLightingKnob, number) 4 + 100 min (&gt;L:var_InstrumentLightingKnob, number) 
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
	        		(L:var_InstrumentLightingKnob, number) 4 - 0 max (&gt;L:var_InstrumentLightingKnob, number) 
	        	</ANTICLOCKWISE_CODE>
	        	<WWISE_EVENT>intlights_knob</WWISE_EVENT>
	        	<COUNT>25</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Instrument Lighting</TOOLTIPID>
	        </UseTemplate>

	        <AnimationTriggers Animation="InstrumentLightingKnob">
				<EventTrigger NormalizedTime="0.98" Direction="Forward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.02" Direction="Backward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>

	        <UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_InstrumentLightingKnob</LIGHTING_KNOB_VAR>
	        	<LIGHT_TYPE>PANEL</LIGHT_TYPE>
				<SIMVAR_INDEX>1</SIMVAR_INDEX>
				<POTENTIOMETER>2</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BUS2</VOLTAGE_SENSE_BUS>
				<VOLTAGE_DROP_MAX_AMPS>400</VOLTAGE_DROP_MAX_AMPS>
				<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
	        </UseTemplate>

	    </Component>



	    <Component ID="PanelLightingKnob" NODE="PanelLightingKnob">
		    <UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>250</ANIM_LAG>
	        	<PART_ID>PanelLightingKnob</PART_ID>
	        	<ANIM_NAME>PanelLightingKnob</ANIM_NAME>
	        	<ANIM_CODE>(L:var_PanelLightingKnob, number)</ANIM_CODE>
	        	<CLOCKWISE_CODE>
        			(L:var_PanelLightingKnob, number) 4 + 100 min (&gt;L:var_PanelLightingKnob, number) 
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
	        		(L:var_PanelLightingKnob, number) 4 - 0 max (&gt;L:var_PanelLightingKnob, number) 
	        	</ANTICLOCKWISE_CODE>
	        	<WWISE_EVENT>intlights_knob</WWISE_EVENT>
	        	<COUNT>25</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Panel Lighting</TOOLTIPID>
	        </UseTemplate>

	        <AnimationTriggers Animation="PanelLightingKnob">
				<EventTrigger NormalizedTime="0.98" Direction="Forward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.02" Direction="Backward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>

	        <UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_PanelLightingKnob</LIGHTING_KNOB_VAR>
	        	<LIGHT_TYPE>GLARESHIELD</LIGHT_TYPE>
				<SIMVAR_INDEX>1</SIMVAR_INDEX>
				<POTENTIOMETER>1</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@ESS2</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@PanelLightsCircuit</CIRCUIT>
	        </UseTemplate>

	    </Component>



		<!-- Yokes -->

		<Component ID="YokeLightKnob_L" NODE="YokeLightKnob_L">
		    <UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>250</ANIM_LAG>
	        	<PART_ID>YokeLightKnob_L</PART_ID>
	        	<ANIM_NAME>YokeLightKnob_L</ANIM_NAME>
	        	<ANIM_CODE>(L:var_YokeLightKnob_L, number)</ANIM_CODE>
	        	<CLOCKWISE_CODE>
        			(L:var_YokeLightKnob_L, number) 4 + 100 min (&gt;L:var_YokeLightKnob_L, number) 
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
	        		(L:var_YokeLightKnob_L, number) 4 - 0 max (&gt;L:var_YokeLightKnob_L, number) 
	        	</ANTICLOCKWISE_CODE>
	        	<WWISE_EVENT>intlights_knob</WWISE_EVENT>
	        	<COUNT>25</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Yoke Light</TOOLTIPID>
	        </UseTemplate>

	        <AnimationTriggers Animation="YokeLightKnob_L">
				<EventTrigger NormalizedTime="0.98" Direction="Forward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.02" Direction="Backward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>

	        <UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_YokeLightKnob_L</LIGHTING_KNOB_VAR>
	        	<LIGHT_TYPE>PANEL</LIGHT_TYPE>
				<SIMVAR_INDEX>4</SIMVAR_INDEX>
				<POTENTIOMETER>17</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BUS3</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@YokeLight_LCircuit</CIRCUIT>
	        </UseTemplate>

	    </Component>

	    <Component ID="YokeLightKnob_R" NODE="YokeLightKnob_R">
		    <UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>250</ANIM_LAG>
	        	<PART_ID>YokeLightKnob_R</PART_ID>
	        	<ANIM_NAME>YokeLightKnob_R</ANIM_NAME>
	        	<ANIM_CODE>(L:var_YokeLightKnob_R, number)</ANIM_CODE>
	        	<CLOCKWISE_CODE>
        			(L:var_YokeLightKnob_R, number) 4 + 100 min (&gt;L:var_YokeLightKnob_R, number) 
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
	        		(L:var_YokeLightKnob_R, number) 4 - 0 max (&gt;L:var_YokeLightKnob_R, number) 
	        	</ANTICLOCKWISE_CODE>
	        	<WWISE_EVENT>intlights_knob</WWISE_EVENT>
	        	<COUNT>25</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Yoke Light</TOOLTIPID>
	        </UseTemplate>

	        <AnimationTriggers Animation="YokeLightKnob_R">
				<EventTrigger NormalizedTime="0.98" Direction="Forward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.02" Direction="Backward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>

	        <UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_YokeLightKnob_R</LIGHTING_KNOB_VAR>
	        	<LIGHT_TYPE>PANEL</LIGHT_TYPE>
				<SIMVAR_INDEX>5</SIMVAR_INDEX>
				<POTENTIOMETER>18</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BUS3</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@YokeLight_RCircuit</CIRCUIT>
	        </UseTemplate>

	    </Component>





		<!-- Panel Emergency Lights -->

		<Component ID="EmergencyLightsKnob" NODE="EmergencyLightsKnob">
		    <UseTemplate Name="ASOBO_GT_Knob_Finite_Code">
	        	<WRAP>False</WRAP>
	        	<ANIM_LAG>250</ANIM_LAG>
	        	<PART_ID>EmergencyLightsKnob</PART_ID>
	        	<ANIM_NAME>EmergencyLightsKnob</ANIM_NAME>
	        	<ANIM_CODE>(L:var_EmergencyLightsKnob, number)</ANIM_CODE>
	        	<CLOCKWISE_CODE>
        			(L:var_EmergencyLightsKnob, number) 4 + 100 min (&gt;L:var_EmergencyLightsKnob, number) 
	        	</CLOCKWISE_CODE>
	        	<ANTICLOCKWISE_CODE>
	        		(L:var_EmergencyLightsKnob, number) 4 - 0 max (&gt;L:var_EmergencyLightsKnob, number) 
	        	</ANTICLOCKWISE_CODE>
	        	<WWISE_EVENT>intlights_knob</WWISE_EVENT>
	        	<COUNT>25</COUNT>

	        	<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Panel Emergency Lights</TOOLTIPID>
	        </UseTemplate>

	        <AnimationTriggers Animation="EmergencyLightsKnob">
				<EventTrigger NormalizedTime="0.98" Direction="Forward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_on" Action="Play"/>
				</EventTrigger>
				<EventTrigger NormalizedTime="0.02" Direction="Backward">
					<SoundEvent WwiseEvent="landing_gear_checkdown_push_button_off" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>

	        <UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_EmergencyLightsKnob</LIGHTING_KNOB_VAR>
	        	<LIGHT_TYPE>GLARESHIELD</LIGHT_TYPE>
				<SIMVAR_INDEX>2</SIMVAR_INDEX>
				<POTENTIOMETER>5</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BATTERY</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@EmergencyLightsCircuit</CIRCUIT>
	        </UseTemplate>

	    </Component>



		<Component ID="WarningHornTestButton" Node="WarningHornTestButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>WarningHornTestButton</ANIM_NAME>
				<PART_ID>WarningHornTestButton</PART_ID>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_HornTest</SWITCH_POSITION_VAR>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
				<WWISE_EVENT_1>button_switch_generic</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Horn Test</TOOLTIPID>
			</UseTemplate>
		</Component>

		<!-- Pilot Reading Lights -->

		<Component ID="ReadingLightSwitch_L" Node="ReadingLightSwitch_L">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>ReadingLightSwitch_L</ANIM_NAME>
				<NODE_ID>ReadingLightSwitch_L</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_ReadingLightSwitch_L, bool) ! (&gt;L:var_ReadingLightSwitch_L, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_ReadingLightSwitch_L, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT>fuel_pump_switch</WWISE_EVENT>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Reading Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_ReadingLightSwitch_L</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>PANEL</LIGHT_TYPE>
				<SIMVAR_INDEX>2</SIMVAR_INDEX>
				<POTENTIOMETER>3</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BUS3</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@ReadingLight_LCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="ReadingLightSwitch_R" Node="ReadingLightSwitch_R">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>ReadingLightSwitch_R</ANIM_NAME>
				<NODE_ID>ReadingLightSwitch_R</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_ReadingLightSwitch_R, bool) ! (&gt;L:var_ReadingLightSwitch_R, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_ReadingLightSwitch_R, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT>fuel_pump_switch</WWISE_EVENT>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Reading Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_ReadingLightSwitch_R</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>PANEL</LIGHT_TYPE>
				<SIMVAR_INDEX>3</SIMVAR_INDEX>
				<POTENTIOMETER>4</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BUS3</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@ReadingLight_RCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<!-- Cabin Lights -->

		<Component ID="CabinLights_Middle_L_Button" Node="CabinLights_Middle_L_Button">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CabinLights_Middle_L_Button</ANIM_NAME>
				<NODE_ID>CabinLights_Middle_L_Button</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_CabinLights_Middle_L_Button, bool) ! (&gt;L:var_CabinLights_Middle_L_Button, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_CabinLights_Middle_L_Button, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_CabinLights_Middle_L_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>1</SIMVAR_INDEX>
				<POTENTIOMETER>6</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@CABINLIGHTS</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@CabinLight_FLCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="CabinLights_Middle_R_Button" Node="CabinLights_Middle_R_Button">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CabinLights_Middle_R_Button</ANIM_NAME>
				<NODE_ID>CabinLights_Middle_R_Button</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_CabinLights_Middle_R_Button, bool) ! (&gt;L:var_CabinLights_Middle_R_Button, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_CabinLights_Middle_R_Button, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_CabinLights_Middle_R_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>2</SIMVAR_INDEX>
				<POTENTIOMETER>7</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@CABINLIGHTS</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@CabinLight_FRCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="CabinLights_Aft_L_Button" Node="CabinLights_Aft_L_Button">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CabinLights_Aft_L_Button</ANIM_NAME>
				<NODE_ID>CabinLights_Aft_L_Button</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_CabinLights_Aft_L_Button, bool) ! (&gt;L:var_CabinLights_Aft_L_Button, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_CabinLights_Aft_L_Button, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_CabinLights_Aft_L_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>3</SIMVAR_INDEX>
				<POTENTIOMETER>8</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@CABINLIGHTS</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@CabinLight_RLCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="CabinLights_Aft_R_Button" Node="CabinLights_Aft_R_Button">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>CabinLights_Aft_R_Button</ANIM_NAME>
				<NODE_ID>CabinLights_Aft_R_Button</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_CabinLights_Aft_R_Button, bool) ! (&gt;L:var_CabinLights_Aft_R_Button, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_CabinLights_Aft_R_Button, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_CabinLights_Aft_R_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>4</SIMVAR_INDEX>
				<POTENTIOMETER>9</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@CABINLIGHTS</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@CabinLight_RRCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="BaggageLights_Button" Node="BaggageLights_Button">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>BaggageLights_Button</ANIM_NAME>
				<NODE_ID>BaggageLights_Button</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_BaggageLights_Button, bool) ! (&gt;L:var_BaggageLights_Button, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_BaggageLights_Button, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_LAG>1200</ANIM_LAG>
				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Cabin Light</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_BaggageLights_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>5</SIMVAR_INDEX>
				<POTENTIOMETER>11</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@CABINLIGHTS</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@BaggageLightCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<!-- Access Lights -->

		<Component ID="AccessLightPanelButton" Node="AccessLightPanelButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>AccessLightPanelButton</NODE_ID>
				<ANIM_NAME>AccessLightPanelButton</ANIM_NAME>
				<PART_ID>AccessLightPanelButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AccessLights_Button, bool) ! (&gt;L:var_AccessLights_Button, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>button_switch_metal</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>pressurization_dump_push_button_off</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Access Lights</TOOLTIPID>
			</UseTemplate>

			<UseTemplate Name="BKSQ_Voltage_Dimming_Light_Template">
	        	<LIGHTING_KNOB_VAR>var_AccessLights_Button</LIGHTING_KNOB_VAR>
	        	<INPUT_MULTIPLIER>100</INPUT_MULTIPLIER>
	        	<LIGHT_TYPE>CABIN</LIGHT_TYPE>
				<SIMVAR_INDEX>6</SIMVAR_INDEX>
				<POTENTIOMETER>10</POTENTIOMETER>
				<BATTERY_INDEX>1</BATTERY_INDEX>
				<VOLTAGE_SENSE_BUS>@BATTERY</VOLTAGE_SENSE_BUS>
				<CIRCUIT>@AccessLightingCircuit</CIRCUIT>
	        </UseTemplate>
		</Component>

		<Component ID="AccessLights_Forward_Button" Node="AccessLights_Forward_Button">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>AccessLights_Forward_Button</NODE_ID>
				<ANIM_NAME>AccessLights_Forward_Button</ANIM_NAME>
				<PART_ID>AccessLights_Forward_Button</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AccessLights_Button, bool) ! (&gt;L:var_AccessLights_Button, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Access Lights</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AccessLights_Aft_Button" Node="AccessLights_Aft_Button">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>AccessLights_Aft_Button</NODE_ID>
				<ANIM_NAME>AccessLights_Aft_Button</ANIM_NAME>
				<PART_ID>AccessLights_Aft_Button</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AccessLights_Button, bool) ! (&gt;L:var_AccessLights_Button, bool)
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>fuel_pump_switch</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>fuel_pump_switch</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Access Lights</TOOLTIPID>
			</UseTemplate>
		</Component>

		<!-- Emissives -->

		<!-- Pilot Reading Lights -->
		<Component ID="ReadingLight_EM_L" NODE="ReadingLight_EM_L">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_PANEL_2, number) 0.003 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="ReadingLight_EM_R" NODE="ReadingLight_EM_R">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_PANEL_3, number) 0.003 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- Panel Emergency Lights -->
		<Component ID="EmergencyPanelLights_EM" NODE="EmergencyPanelLights_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_GLARESHIELD_2, number) 0.0035 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- Access Lights -->
		<Component ID="AccessLights_Forward_EM" NODE="AccessLights_Forward_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_6, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="AccessLights_Aft_EM" NODE="AccessLights_Aft_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_6, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- Baggage -->
		<Component ID="BaggageAccessLight_EM" NODE="BaggageAccessLight_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_5, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="BaggageLights_EM" NODE="BaggageLights_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_5, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- Passenger Reading Lights -->		
		<Component ID="CabinLights_Middle_L_EM" NODE="CabinLights_Middle_L_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_1, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CabinLights_Middle_R_EM" NODE="CabinLights_Middle_R_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_2, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CabinLights_Aft_L_EM" NODE="CabinLights_Aft_L_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_3, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CabinLights_Aft_R_EM" NODE="CabinLights_Aft_R_EM">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					(L:LIGHTING_CABIN_4, number) 0.01 *
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>

		<!-- Emergency Exit Sign -->
		<Component ID="EmergencyExitGlowSign" NODE="EmergencyExitGlowSign">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>
					0.004
				</EMISSIVE_CODE>
			</UseTemplate>
		</Component>



		<!-- Screen Bounce -->

		<UseTemplate Name="BKSQ_LIGHTING_Ambient_Template_No_Failure">
			<ID>1</ID>
			<BOUNCE_POTENTIOMETER_PERCENT>

				(A:CIRCUIT ON:@Com1Circuit, bool) 100 * (L:var_radio1Mode, number) 2 != *

				(A:CIRCUIT ON:@Com2Circuit, bool) 50 *  (L:var_radio2Mode, number) 2 != *

				+ 2 /

				(E:TIME OF DAY, enum) 1 ==
				if{
					1.0 0.95 * 0.05 +
				}
				els{
					(E:TIME OF DAY, enum) 3 ==
					if{
						0.1 0.95 * 0.05 +
					}
					els{
						0.35 0.95 * 0.05 +
					}
				}

				*
			</BOUNCE_POTENTIOMETER_PERCENT>
			<POTENTIOMETER>12</POTENTIOMETER>
		</UseTemplate>


		<UseTemplate Name="BKSQ_LIGHTING_Ambient_Template_No_Failure">
			<ID>2</ID>
			<BOUNCE_POTENTIOMETER_PERCENT>
				(L:LIGHTING_PANEL_1, number) 0.10 *

				(L:LIGHTING_PANEL_2, number) 0.10 *
				(L:LIGHTING_PANEL_3, number) 0.10 *

				(L:LIGHTING_GLARESHIELD_1, number) 0.45 *
				(L:LIGHTING_GLARESHIELD_2, number) 0.35 *

				(L:LIGHTING_PANEL_4, number) (L:XMLVAR_YokeHidden1, bool) ! 0.035 * *
				(L:LIGHTING_PANEL_5, number) (L:XMLVAR_YokeHidden2, bool) ! 0.035 * *
				
				+ + + + + +

				(L:LIGHTING_CABIN_6, number) 0.30 *
				+
				(L:LIGHTING_CABIN_1, number) 0.12 *
				+
				(L:LIGHTING_CABIN_2, number) 0.12 *
				+
				(L:LIGHTING_CABIN_3, number) 0.08 *
				+
				(L:LIGHTING_CABIN_4, number) 0.08 *
				+
				(L:LIGHTING_CABIN_5, number) 0.00 *
				+
			</BOUNCE_POTENTIOMETER_PERCENT>
			<POTENTIOMETER>13</POTENTIOMETER>
		</UseTemplate>

		<UseTemplate Name="BKSQ_LIGHTING_Ambient_Template_No_Failure">
			<ID>3</ID>
			<BOUNCE_POTENTIOMETER_PERCENT>
				(L:LIGHTING_CABIN_6, number) 0.30 *
				+
				(L:LIGHTING_CABIN_1, number) 0.12 *
				+
				(L:LIGHTING_CABIN_2, number) 0.12 *
				+
				(L:LIGHTING_CABIN_3, number) 0.08 *
				+
				(L:LIGHTING_CABIN_4, number) 0.08 *
				+
				(L:LIGHTING_CABIN_5, number) 0.00 *
				+
			</BOUNCE_POTENTIOMETER_PERCENT>
			<POTENTIOMETER>14</POTENTIOMETER>
		</UseTemplate>

		<UseTemplate Name="BKSQ_LIGHTING_Ambient_Template_No_Failure">
			<ID>4</ID>
			<BOUNCE_POTENTIOMETER_PERCENT>
				(L:LIGHTING_CABIN_6, number) 0.30 *
				+
				(L:LIGHTING_CABIN_1, number) 0.08 *
				+
				(L:LIGHTING_CABIN_2, number) 0.08 *
				+
				(L:LIGHTING_CABIN_3, number) 0.12 *
				+
				(L:LIGHTING_CABIN_4, number) 0.12 *
				+
				(L:LIGHTING_CABIN_5, number) 0.05 *
				+
			</BOUNCE_POTENTIOMETER_PERCENT>
			<POTENTIOMETER>15</POTENTIOMETER>
		</UseTemplate>

		<UseTemplate Name="BKSQ_LIGHTING_Ambient_Template_No_Failure">
			<ID>6</ID>
			<BOUNCE_POTENTIOMETER_PERCENT>
				(L:LIGHTING_CABIN_6, number) 0.20 *
				+
				(L:LIGHTING_CABIN_1, number) 0.00 *
				+
				(L:LIGHTING_CABIN_2, number) 0.00 *
				+
				(L:LIGHTING_CABIN_3, number) 0.12 *
				+
				(L:LIGHTING_CABIN_4, number) 0.12 *
				+
				(L:LIGHTING_CABIN_5, number) 0.25 *
				+
			</BOUNCE_POTENTIOMETER_PERCENT>
			<POTENTIOMETER>16</POTENTIOMETER>
		</UseTemplate>

	</Component>







	<Component ID="INTEGRITY_LIGHTING">

		<!-- <UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadioSelectorLabel</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 250 /</LIGHT_CODE>
		</UseTemplate> -->

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>EngineInstrumentBackgrounds</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 500 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RemoteCompassBacklighting_L</NODE_ID>
			<CIRCUIT>@RemoteCompassCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RemoteCompassBacklighting_R</NODE_ID>
			<CIRCUIT>@RemoteCompassCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>FuelSelectorLabel</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 1000 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>FUEL_Knob_Selector_1_EM</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 1000 /</LIGHT_CODE>
		</UseTemplate>

		<!-- Engine Needles -->
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TorqueNeedle_EM</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 800 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>PropRpmNeedle_EM</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 800 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>GasGeneratorNeedle_EM</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 800 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TurbineTempNeedle_EM</NODE_ID>
			<CIRCUIT>@InstrumentLightsCircuit</CIRCUIT>
			<LIGHT_CODE>(L:LIGHTING_PANEL_1, number) 800 /</LIGHT_CODE>
		</UseTemplate>

	</Component>








	<Component ID="RADIO_BACKLIGHTING">

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AudioBacklighting</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mkr_mute_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_sens_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_com1_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_com2_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_com3_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_nav1_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_nav2_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_dme1_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_adf1_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mansq_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mic1_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mic2_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mic3_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_mic1and2_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_spkr_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_pass_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_pilot_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS340_Push_coplt_1_EM</NODE_ID>
			<CIRCUIT>@AudioControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>GTN_750_Home_Decal</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>GTN_750_Direct_To_Decal</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530Backlighting</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_COM_Volume_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_NAV_Volume_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_COM_Swap_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_NAV_Swap_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_Khz_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_CRSR_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530OuterKnob_L_Light</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 350 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530OuterKnob_R_Light</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 350 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_CDI_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_OBS_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Message_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_FlightPlan_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_VerticalNavigation_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Procedure_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Switch_Range_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_DirectTo_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Menu_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Clear_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Enter_1_EM</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>



		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530Backlighting2</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_COM_Volume_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_NAV_Volume_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_COM_Swap_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_NAV_Swap_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_Khz_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Knob_CRSR_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530OuterKnob_L_Light_2</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 350 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Gns530OuterKnob_R_Light_2</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 350 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_CDI_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_OBS_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Message_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_FlightPlan_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_VerticalNavigation_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Procedure_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Switch_Range_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_DirectTo_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Menu_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Clear_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>AS530_Push_Enter_2_EM</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

















		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>COM_Push_Swap_1</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>NAV_Push_Swap_1</NODE_ID>
			<CIRCUIT>@Com1Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>COM_Push_Swap_2</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>NAV_Push_Swap_2</NODE_ID>
			<CIRCUIT>@Com2Circuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>ADF_Push_Adf_1</NODE_ID>
			<CIRCUIT>@ADFCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>ADF_Push_Bfo_1</NODE_ID>
			<CIRCUIT>@ADFCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>ADF_Push_Frq_1</NODE_ID>
			<CIRCUIT>@ADFCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>ADF_Push_Flt_1</NODE_ID>
			<CIRCUIT>@ADFCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>ADF_Push_SetReset_1</NODE_ID>
			<CIRCUIT>@ADFCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 650 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>DmeBacklighting</NODE_ID>
			<CIRCUIT>@DMECircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:var_dmeMode, number) 0 &gt; and (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_IDT_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_VFR_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_ON_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_ALT_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_STBY_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_OFF_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_0_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_1_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_2_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_3_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_4_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_5_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_6_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_7_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_8_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_9_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_STARTSTOP_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_CLR_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_FUNC_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>TRANSPONDER_Push_CRSR_1_EM</NODE_ID>
			<CIRCUIT>@TransponderCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarBacklighting</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarAlert_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarVerticalProfile_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarMap_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarHold_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarRangeUp_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarRangeDown_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarTrackLeft_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>RadarTrackRight_EM</NODE_ID>
			<CIRCUIT>@WeatherRadarControllerCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>

		<!-- Autopilot -->
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_VsSwitch_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_HeadingButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_NavButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_ApproachButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_BackCourseButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_YawDamperButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_MasterButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_AltitudeButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_AirspeedButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_FlightDirectorButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_SoftRideButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_HalfBankButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>
		<UseTemplate Name="BKSQ_PANEL_BACKLIGHTING">
			<NODE_ID>Autopilot_TestButton_EM</NODE_ID>
			<CIRCUIT>@AutopilotCircuit</CIRCUIT>
			<LIGHT_CODE>(A:CIRCUIT ON:@InstrumentLightsCircuit, bool) (L:LIGHTING_PANEL_1, number) * 250 /</LIGHT_CODE>
		</UseTemplate>



	</Component>





















	<!-- Emergency Gear Extension -->

	<Component ID="EmergencyGearDoorHandle" NODE="EmergencyGearDoorHandle">
		<UseTemplate Name="ASOBO_GT_Switch_Code">
    		<ANIM_NAME>GearCrankSlide</ANIM_NAME>
    		<NODE_ID>EmergencyGearDoorHandle</NODE_ID>
    		<PART_ID>EmergencyGearDoorHandle</PART_ID>
    		<LEFT_SINGLE_CODE>
    			(L:var_EmergencyGearDoor, bool) ! (&gt;L:var_EmergencyGearDoor, bool)
    			(L:XMLVAR_Cabin_Air_1_Position, number) 52 min (&gt;L:XMLVAR_Cabin_Air_1_Position, number)
    		</LEFT_SINGLE_CODE>
    		<ANIM_CODE>(L:var_EmergencyGearDoor, bool) 100 *</ANIM_CODE>
    		<ANIM_LENGTH>100</ANIM_LENGTH>
    		<ANIM_LAG>350</ANIM_LAG>
    		<WWISE_EVENT_1>cabin_heat_lever_on</WWISE_EVENT_1>
    		<WWISE_EVENT_2>cabin_heat_lever_off</WWISE_EVENT_2>

    		
    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Floor Panel</TOOLTIPID>
		</UseTemplate>
	</Component>


	<Component ID="EmergencyGearBypass_Handle" NODE="EmergencyGearBypass_Handle">
		<UseTemplate Name="ASOBO_PASSENGER_Lever_Cabin_Air_Template">
			<ID>1</ID>
			<NODE_ID>EmergencyGearBypass_Handle</NODE_ID>
			<ANIM_NAME>EmergencyGearBypass</ANIM_NAME>
			<PART_ID>EmergencyGearBypass_Handle</PART_ID>
			<LEVER_ANIM_SCOPE>L</LEVER_ANIM_SCOPE>
			<BUTTON_NODE_ID>EmergencyGearBypass_Button</BUTTON_NODE_ID>
			<HIGHLIGHT_NODE_ID>EmergencyGearBypass_Handle</HIGHLIGHT_NODE_ID>
			<WWISE_EVENT_1_LEVER>pressurization_deploy_switch_on</WWISE_EVENT_1_LEVER>
			<WWISE_EVENT_2_LEVER>pressurization_deploy_switch_off</WWISE_EVENT_2_LEVER>
			<WWISE_EVENT_1_LEVER_BUTTON>yoke_push_button_on</WWISE_EVENT_1_LEVER_BUTTON>
			<WWISE_EVENT_2_LEVER_BUTTON>yoke_push_button_off</WWISE_EVENT_2_LEVER_BUTTON>

			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Gear Bypass</TOOLTIPID>
		</UseTemplate>
	</Component>


	<Component ID="EmergencyGearHandle" NODE="EmergencyGearHandle">

		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_LAG>60</ANIM_LAG>
			<ANIM_NAME>EmergencyGearDoor</ANIM_NAME>
			<ANIM_CODE>
				(L:var_EmergencyGearDoor, bool) 100 *
			</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>

		<Component ID="EmergencyGearHandle" Node="EmergencyGearHandle">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held">
				<ANIM_NAME>EmergencyGearHandle</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>var_EmergencyGearHandle</SWITCH_POSITION_VAR>
				<LEFT_LEAVE_CODE>
					(L:var_EmergencyGearHandle, number) 0.8 &gt; (L:XMLVAR_Cabin_Air_1_Position, number) 50 &gt; and
					if{
						(&gt;K:GEAR_PUMP)
					}
				</LEFT_LEAVE_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>175</ANIM_LAG>
				<ANIM_DURATION>0.01</ANIM_DURATION>
				<MIN_HELD_DURATION>0.01</MIN_HELD_DURATION>
				<WWISE_EVENT_1>handling_yawpitch_joystick</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>lever_flaps</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.9</NORMALIZED_TIME_2>

				<PART_ID>EmergencyGearHandle</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Emergency Gear Extension</TOOLTIPID>
			</UseTemplate>
		</Component>

	</Component>
	



	<!-- Sun Visors -->

	<Component ID="VisorSlide_L" NODE="VisorSlide_L">
		<UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
			<ANIM_NAME>Visor_L</ANIM_NAME>
			<NODE_ID>Visor_L</NODE_ID>
			<PART_ID>Visor_L</PART_ID>
	
			<USE_TRAJECTORY_DRAG_MODE>true</USE_TRAJECTORY_DRAG_MODE>
			<DRAG_AXIS_SCALE>-140</DRAG_AXIS_SCALE>
			<CURSOR>Grab</CURSOR>
			<NO_ARROWS/>
			<DRAG_ANIM_NAME>Visor_L</DRAG_ANIM_NAME>
			<HIGHLIGHT_NODE_ID>VisorSlide_L</HIGHLIGHT_NODE_ID>
	
			<ANIM_CODE>(L:var_Visor_L, number)</ANIM_CODE>
			<DRAG_CODE>(M:DragPercent) 100 * (&gt;L:var_Visor_L, number)</DRAG_CODE>
			<POSITIVE_AXIS_CODE>(L:var_Visor_L, number) 1 + (&gt;L:var_Visor_L, number)</POSITIVE_AXIS_CODE>
			<NEGATIVE_AXIS_CODE>(L:var_Visor_L, number) 1 - (&gt;L:var_Visor_L, number)</NEGATIVE_AXIS_CODE>
			<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
		</UseTemplate>
	</Component>

	<Component ID="VisorSlide_R" NODE="VisorSlide_R">
		<UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
			<ANIM_NAME>Visor_R</ANIM_NAME>
			<NODE_ID>Visor_R</NODE_ID>
			<PART_ID>Visor_R</PART_ID>
	
			<USE_TRAJECTORY_DRAG_MODE>true</USE_TRAJECTORY_DRAG_MODE>
			<DRAG_AXIS_SCALE>-140</DRAG_AXIS_SCALE>
			<CURSOR>Grab</CURSOR>
			<NO_ARROWS/>
			<DRAG_ANIM_NAME>Visor_R</DRAG_ANIM_NAME>
			<HIGHLIGHT_NODE_ID>VisorSlide_R</HIGHLIGHT_NODE_ID>
	
			<ANIM_CODE>(L:var_Visor_R, number)</ANIM_CODE>
			<DRAG_CODE>(M:DragPercent) 100 * (&gt;L:var_Visor_R, number)</DRAG_CODE>
			<POSITIVE_AXIS_CODE>(L:var_Visor_R, number) 1 + (&gt;L:var_Visor_R, number)</POSITIVE_AXIS_CODE>
			<NEGATIVE_AXIS_CODE>(L:var_Visor_R, number) 1 - (&gt;L:var_Visor_R, number)</NEGATIVE_AXIS_CODE>
			<WWISE_EVENT_1>light_cabin_switch_on</WWISE_EVENT_1>
			<WWISE_EVENT_2>light_cabin_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_1>0.99</NORMALIZED_TIME_1>
			<NORMALIZED_TIME_2>0.01</NORMALIZED_TIME_2>
		</UseTemplate>
	</Component>

	<!-- Armrests -->

	<Component ID="Armrest_L" NODE="Armrest_L">
		<UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
			<ANIM_NAME>Armrest_L</ANIM_NAME>
			<NODE_ID>Armrest_L</NODE_ID>
			<PART_ID>Armrest_L</PART_ID>
	
			<USE_TRAJECTORY_DRAG_MODE>true</USE_TRAJECTORY_DRAG_MODE>
			<DRAG_AXIS_SCALE>-140</DRAG_AXIS_SCALE>
			<CURSOR>Grab</CURSOR>
			<NO_ARROWS/>
			<DRAG_ANIM_NAME>Armrest_L</DRAG_ANIM_NAME>
	
			<ANIM_CODE>(L:var_Armrest_L, number)</ANIM_CODE>
			<DRAG_CODE>(M:DragPercent) 100 * (&gt;L:var_Armrest_L, number)</DRAG_CODE>
			<POSITIVE_AXIS_CODE>(L:var_Armrest_L, number) 1 + (&gt;L:var_Armrest_L, number)</POSITIVE_AXIS_CODE>
			<NEGATIVE_AXIS_CODE>(L:var_Armrest_L, number) 1 - (&gt;L:var_Armrest_L, number)</NEGATIVE_AXIS_CODE>
			<WWISE_EVENT_1>lever_flaps</WWISE_EVENT_1>
			<WWISE_EVENT_2>lever_flaps</WWISE_EVENT_2>
		</UseTemplate>
	</Component>

	<Component ID="Armrest_R" NODE="Armrest_R">
		<UseTemplate Name="ASOBO_GT_Lever_DraggingWheelLeftDrag_Axis">
			<ANIM_NAME>Armrest_R</ANIM_NAME>
			<NODE_ID>Armrest_R</NODE_ID>
			<PART_ID>Armrest_R</PART_ID>
	
			<USE_TRAJECTORY_DRAG_MODE>true</USE_TRAJECTORY_DRAG_MODE>
			<DRAG_AXIS_SCALE>-140</DRAG_AXIS_SCALE>
			<CURSOR>Grab</CURSOR>
			<NO_ARROWS/>
			<DRAG_ANIM_NAME>Armrest_R</DRAG_ANIM_NAME>
	
			<ANIM_CODE>(L:var_Armrest_R, number)</ANIM_CODE>
			<DRAG_CODE>(M:DragPercent) 100 * (&gt;L:var_Armrest_R, number)</DRAG_CODE>
			<POSITIVE_AXIS_CODE>(L:var_Armrest_R, number) 1 + (&gt;L:var_Armrest_R, number)</POSITIVE_AXIS_CODE>
			<NEGATIVE_AXIS_CODE>(L:var_Armrest_R, number) 1 - (&gt;L:var_Armrest_R, number)</NEGATIVE_AXIS_CODE>
			<WWISE_EVENT_1>lever_flaps</WWISE_EVENT_1>
			<WWISE_EVENT_2>lever_flaps</WWISE_EVENT_2>
		</UseTemplate>
	</Component>

	<!-- Rudder Pedal Adjustments -->

	<Component ID="RudderPedalAdjustment_L" Node="RudderPedalAdjustment_L">
		<UseTemplate Name="ASOBO_GT_Push_Button_Held">
			<ANIM_NAME>RudderPedalAdjustment_L</ANIM_NAME>
			<PART_ID>RudderPedalAdjustment_L</PART_ID>
			<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
			<SWITCH_POSITION_VAR>var_RudderPedalAdjustment_L</SWITCH_POSITION_VAR>
			<ANIM_LENGTH>20</ANIM_LENGTH>
			<ANIM_LAG>100</ANIM_LAG>
			<ANIM_DURATION>0.1</ANIM_DURATION>
			<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
			<WWISE_EVENT_1>pressurization_deploy_switch_on</WWISE_EVENT_1>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>pressurization_deploy_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Open Engine Compartment L (Rudder Pedal Adjust)</TOOLTIPID>
		</UseTemplate>
	</Component>
	<Component ID="RudderPedalAdjustment_R" Node="RudderPedalAdjustment_R">
		<UseTemplate Name="ASOBO_GT_Push_Button_Held">
			<ANIM_NAME>RudderPedalAdjustment_R</ANIM_NAME>
			<PART_ID>RudderPedalAdjustment_R</PART_ID>
			<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
			<SWITCH_POSITION_VAR>var_RudderPedalAdjustment_R</SWITCH_POSITION_VAR>
			<ANIM_LENGTH>20</ANIM_LENGTH>
			<ANIM_LAG>100</ANIM_LAG>
			<ANIM_DURATION>0.1</ANIM_DURATION>
			<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>
			<WWISE_EVENT_1>pressurization_deploy_switch_on</WWISE_EVENT_1>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>pressurization_deploy_switch_off</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>

			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Open Engine Compartment R (Rudder Pedal Adjust)</TOOLTIPID>
		</UseTemplate>
	</Component>


	<!-- Doors -->

	<Component ID="Doors">

		<!-- Pilot Door -->
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>PilotDoor</ANIM_NAME>
			<ANIM_CODE>(A:EXIT OPEN:0, Percent)</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>PilotDoorLatchIndicator</ANIM_NAME>
			<ANIM_LAG>1000</ANIM_LAG>
			<ANIM_CODE>(L:var_PilotDoorLockedLatching, bool) 2 == (L:var_pilotDoorLatchingFailure, bool) ! and 100 *</ANIM_CODE>
		</UseTemplate>

		<!-- Aft Door -->
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>AftDoor</ANIM_NAME>
			<ANIM_CODE>(A:EXIT OPEN:1, Percent)</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>AftDoorLatchIndicator</ANIM_NAME>
			<ANIM_LAG>1000</ANIM_LAG>
			<ANIM_CODE>(L:var_AftDoorLockedLatching, bool) 2 == (L:var_aftDoorLatchingFailure, bool) ! and  100 *</ANIM_CODE>
		</UseTemplate>

		<!-- Door Handles -->

		<Component ID="PilotDoorUnlockButton" NODE="PilotDoorUnlockButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>PilotDoorUnlockButton</NODE_ID>
				<ANIM_NAME>PilotDoorUnlockButton</ANIM_NAME>
				<PART_ID>PilotDoorUnlockButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_PilotDoorLockedLatching, bool) 2 == (L:var_cabinPressureDifferential, PSI) 0.25 &lt; and if{
						0 (&gt;L:var_PilotDoorLockedLatching, bool)
					}
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Door Unlock</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="PilotDoorHandle" NODE="PilotDoorHandle">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<LEFT_SINGLE_CODE>
					(L:var_PilotDoorLockedLatching, bool) 0 == if{
						0 (&gt;K:TOGGLE_AIRCRAFT_EXIT_FAST)
						1 (&gt;L:var_PilotDoorLockedLatching, bool)
					}
					els{
						(A:EXIT OPEN:0, Percent) 50 &gt; (L:var_PilotLadder, bool) ! and if{
							0 (&gt;K:TOGGLE_AIRCRAFT_EXIT_FAST)
							1 (&gt;L:var_PilotDoorLockedLatching, bool)
						}
					}
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>AS580_big_knob_turn</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_on</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>

				<PART_ID>PilotDoorHandle</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Pilot Door Handle</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(A:EXIT OPEN:0, Percent) 1 &lt;  (L:var_PilotDoorLockedLatching, bool) 1 == and (L:var_pilotDoorLatchingFailure, bool) ! and if{
					2 (&gt;L:var_PilotDoorLockedLatching, bool)
				}
			</UPDATE_CODE>
		</UseTemplate>



		<Component ID="AftDoorRetractButton" NODE="AftDoorRetractButton">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<LEFT_SINGLE_CODE>
					(A:EXIT OPEN:1, Percent) 50 &gt; (L:var_AftLadder, bool) ! and @BATTERY (&gt;A:BUS LOOKUP INDEX, Number) (A:CIRCUIT CONNECTION ON:@AccessLightingCircuit, bool) and if{
						1 (&gt;L:var_AftDoorLockedLatching, bool)
						2 (&gt;K:TOGGLE_AIRCRAFT_EXIT_FAST)
					}
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>AS580_big_knob_turn</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_on</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>
				<ANIM_NAME>AftDoorRetractButton</ANIM_NAME>

				<PART_ID>AftDoorRetractButton</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Aft Door Close</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AftDoorUnlockButton" NODE="AftDoorUnlockButton">
			<UseTemplate Name="ASOBO_GT_Push_Button_Held_Simple">
				<NODE_ID>AftDoorUnlockButton</NODE_ID>
				<ANIM_NAME>AftDoorUnlockButton</ANIM_NAME>
				<PART_ID>AftDoorUnlockButton</PART_ID>
				<LEFT_SINGLE_CODE>
					(L:var_AftDoorLockedLatching, bool) 2 == (L:var_cabinPressureDifferential, PSI) 0.25 &lt; and if{
						0 (&gt;L:var_AftDoorLockedLatching, bool)
					}
					1 (&gt;O:buttonHeld, bool)
				</LEFT_SINGLE_CODE>
				<LEFT_LEAVE_CODE>
					0 (&gt;O:buttonHeld, bool)
				</LEFT_LEAVE_CODE>
				<ANIM_CODE>(O:buttonHeld, bool) 100 *</ANIM_CODE>
				<DISABLE_INTERACTION_LOCK>True</DISABLE_INTERACTION_LOCK>
				<ANIM_LENGTH>20</ANIM_LENGTH>
				<ANIM_DURATION>0.1</ANIM_DURATION>
				<MIN_HELD_DURATION>0.1</MIN_HELD_DURATION>

				<WWISE_EVENT_1>safety_push_button_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>safety_push_button_off</WWISE_EVENT_2>

				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Door Unlock</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AftDoorHandle" NODE="AftDoorHandle">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<LEFT_SINGLE_CODE>
					(L:var_AftDoorLockedLatching, bool) 0 == if{
						1 (&gt;L:var_AftDoorLockedLatching, bool)
						2 (&gt;K:TOGGLE_AIRCRAFT_EXIT_FAST)
					}
					els{
						(A:EXIT OPEN:1, Percent) 50 &gt; (L:var_AftLadder, bool) ! and if{
							1 (&gt;L:var_AftDoorLockedLatching, bool)
							2 (&gt;K:TOGGLE_AIRCRAFT_EXIT_FAST)
						}
					}
				</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>AS580_big_knob_turn</WWISE_EVENT_1>
				<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
				<WWISE_EVENT_2>autopilot_knob_push_button_on</WWISE_EVENT_2>
				<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
				<ANIM_LAG>800</ANIM_LAG>

				<PART_ID>AftDoorHandle</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Aft Door Handle</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_GT_Update">
			<FREQUENCY>2</FREQUENCY>
			<UPDATE_CODE>
				(A:EXIT OPEN:1, Percent) 1 &lt;  (L:var_AftDoorLockedLatching, bool) 1 == and (L:var_aftDoorLatchingFailure, bool) ! and if{
					2 (&gt;L:var_AftDoorLockedLatching, bool)
				}
			</UPDATE_CODE>
		</UseTemplate>



		<!-- Ladders -->

		<Component ID="PilotLadder2" Node="PilotLadder2">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
	    		<ANIM_NAME>PilotLadder</ANIM_NAME>
	    		<NODE_ID>PilotLadder2</NODE_ID>
	    		<LEFT_SINGLE_CODE>
	    			(L:var_PilotLadder, bool) (A:EXIT OPEN:0, Percent) 70 &gt; (L:var_PilotLadder, bool) ! and or if{
	    				(L:var_PilotLadder, bool) ! (&gt;L:var_PilotLadder, bool)
	    			}
	    		</LEFT_SINGLE_CODE>
	    		<ANIM_CODE>(L:var_PilotLadder, bool) 100 *</ANIM_CODE>
	    		<ANIM_LENGTH>100</ANIM_LENGTH>
	    		<ANIM_LAG>50</ANIM_LAG>

	    		<PART_ID>PilotLadder2</PART_ID>
	    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Pilot Ladder</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="AftLadder1" Node="AftLadder1">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
	    		<ANIM_NAME>AftLadder</ANIM_NAME>
	    		<NODE_ID>AftLadder1</NODE_ID>
	    		<LEFT_SINGLE_CODE>
	    			(L:var_AftLadder, bool) (A:EXIT OPEN:1, Percent) 30 &gt; (L:var_AftLadder, bool) ! and or if{
	    				(L:var_AftLadder, bool) ! (&gt;L:var_AftLadder, bool)
	    			}
	    		</LEFT_SINGLE_CODE>
	    		<ANIM_CODE>(L:var_AftLadder, bool) 100 *</ANIM_CODE>
	    		<ANIM_LENGTH>100</ANIM_LENGTH>
	    		<ANIM_LAG>40</ANIM_LAG>

	    		<PART_ID>AftLadder1</PART_ID>
	    		<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Aft Ladder</TOOLTIPID>
			</UseTemplate>
		</Component>


		<!-- Baggage Door Key -->

		<Component ID="BaggageDoorKey">
			<Component ID="BaggageKeyClosed" NODE="BaggageKeyClosed">
				<UseTemplate Name="ASOBO_GT_Push_Button">
					<LEFT_SINGLE_CODE>
						(L:bksq_BaggageDoor, bool) ! (&gt;L:bksq_BaggageDoor, bool)
					</LEFT_SINGLE_CODE>
					<PART_ID>BaggageKeyClosed</PART_ID>
					<TOOLTIP_TITLE></TOOLTIP_TITLE>
					<TOOLTIPID>Baggage Door</TOOLTIPID>
				</UseTemplate>
			</Component>
		</Component>

	</Component>




	<!-- Circuit Breaker Panel -->

	<Component ID="CIRCUIT_BREAKER_PANEL">


		<!-- Essential Bus Tie -->

		<Component ID="EssentialBusTieCover" NODE="EssentialBusTieCover">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>EssentialBusTieCover</ANIM_NAME>
				<NODE_ID>EssentialBusTieCover</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_EssentialBusTieCover, bool) ! (&gt;L:var_EssentialBusTieCover, bool)
					0 (&gt;L:var_EssentialBusTieSwitch, bool)

					7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
						3 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
					8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
						3 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
					9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
						3 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}

					7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
						2 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
					8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
						2 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
					9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
						2 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
					}
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_EssentialBusTieCover, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>pressurization_dump_cover_open</WWISE_EVENT>
				<WWISE_EVENT_1>pressurization_dump_cover_open</WWISE_EVENT_1>
				<WWISE_EVENT_2>pressurization_dump_cover_close</WWISE_EVENT_2>

				<PART_ID>EssentialBusTieCover</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Essential Bus Tie Switch Cover</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="EssentialBusTieSwitch" NODE="EssentialBusTieSwitch">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>EssentialBusTieSwitch</ANIM_NAME>
				<NODE_ID>EssentialBusTieSwitch</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_EssentialBusTieCover, bool) if{
						(L:var_EssentialBusTieSwitch, bool) ! (&gt;L:var_EssentialBusTieSwitch, bool)

						(L:var_EssentialBusTieSwitch, bool) if{

							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{
								3 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{
								3 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{
								3 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}

							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) ! if{
								2 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) ! if{
								2 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) ! if{
								2 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							
						}
						els{

							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
								3 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
								3 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{
								3 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}

							7 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
								2 7 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							8 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
								2 8 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}
							9 (&gt;A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) if{
								2 9 (&gt;K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
							}

						}
					}
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_EssentialBusTieSwitch, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>cabin_light_switch_on</WWISE_EVENT>
				<WWISE_EVENT_1>cabin_light_switch_on</WWISE_EVENT_1>
				<WWISE_EVENT_2>cabin_light_switch_off</WWISE_EVENT_2>

				<PART_ID>EssentialBusTieSwitch</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Essential Bus Tie Switch</TOOLTIPID>
			</UseTemplate>
		</Component>




		<!-- Steveo Mode -->
		<!-- <Component ID="PILOT_0" Node="PILOT_0">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:var_CrewMusicSwitch, number)
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component> -->



		<!-- Top Row -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>LandingGear_Breaker</NODE_ID>
			<PART_ID>LandingGear_Breaker</PART_ID>
			<CIRCUIT_ID>@GearMotorCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Landing Gear Motor</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Flaps_Breaker</NODE_ID>
			<PART_ID>Flaps_Breaker</PART_ID>
			<CIRCUIT_ID>@FlapMotorCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Flap Motor</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PitchTrim_Breaker</NODE_ID>
			<PART_ID>PitchTrim_Breaker</PART_ID>
			<CIRCUIT_ID>@PitchTrimsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Pitch Trim Servos</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AileronTrim_Breaker</NODE_ID>
			<PART_ID>AileronTrim_Breaker</PART_ID>
			<CIRCUIT_ID>@AileronTrimsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Aileron Trim Servos</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RudderTrim_Breaker</NODE_ID>
			<PART_ID>RudderTrim_Breaker</PART_ID>
			<CIRCUIT_ID>@RudderTrimsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Rudder Trim Servos</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Autopilot_Breaker</NODE_ID>
			<PART_ID>Autopilot_Breaker</PART_ID>
			<CIRCUIT_ID>@AutopilotCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Autopilot</TOOLTIPID>
		</UseTemplate>



		<!-- Row 1 -->

		<Component ID="EssentialBus1_Breaker" NODE="EssentialBus1_Breaker">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>EssentialBus1_Breaker</ANIM_NAME>
				<NODE_ID>EssentialBus1_Breaker</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_EssentialBus1_Breaker, bool) ! (&gt;L:var_EssentialBus1_Breaker, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_EssentialBus1_Breaker, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>button_switch_plastic</WWISE_EVENT>
				<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
				<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>

				<PART_ID>EssentialBus1_Breaker</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Essential Bus 1</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="EssentialBus2_Breaker" NODE="EssentialBus2_Breaker">
			<UseTemplate Name="ASOBO_GT_Switch_Code">
				<ANIM_NAME>EssentialBus2_Breaker</ANIM_NAME>
				<NODE_ID>EssentialBus2_Breaker</NODE_ID>
				<LEFT_SINGLE_CODE>
					(L:var_EssentialBus2_Breaker, bool) ! (&gt;L:var_EssentialBus2_Breaker, bool)
				</LEFT_SINGLE_CODE>
				<ANIM_CODE>(L:var_EssentialBus2_Breaker, bool) 100 *</ANIM_CODE>
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_LAG>800</ANIM_LAG>
				<WWISE_EVENT>button_switch_plastic</WWISE_EVENT>
				<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
				<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>

				<PART_ID>EssentialBus2_Breaker</PART_ID>
				<TOOLTIP_TITLE></TOOLTIP_TITLE>
				<TOOLTIPID>Essential Bus 2</TOOLTIPID>
			</UseTemplate>
		</Component>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>FlapIndicator_Breaker</NODE_ID>
			<PART_ID>FlapIndicator_Breaker</PART_ID>
			<CIRCUIT_ID>@FlapSignalCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Flap Signal</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>LandingGearController_Breaker</NODE_ID>
			<PART_ID>LandingGearController_Breaker</PART_ID>
			<CIRCUIT_ID>@LandingGearControllerCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Gear Controller</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>GearIndicator_Breaker</NODE_ID>
			<PART_ID>GearIndicator_Breaker</PART_ID>
			<CIRCUIT_ID>@LandingGearSignalCircuit</CIRCUIT_ID>
			<BUS_ID>@ESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Gear Signal</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>CabinAudio_Breaker</NODE_ID>
			<PART_ID>CabinAudio_Breaker</PART_ID>
			<CIRCUIT_ID>@CabinAudioPlayerCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>CD Audio</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PitotHeat1_Breaker</NODE_ID>
			<PART_ID>PitotHeat1_Breaker</PART_ID>
			<CIRCUIT_ID>@PitotHeat1Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Pitot Heat 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PitotHeat2_Breaker</NODE_ID>
			<PART_ID>PitotHeat2_Breaker</PART_ID>
			<CIRCUIT_ID>@PitotHeat2Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Pitot Heat 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>InertialSeparator_Breaker</NODE_ID>
			<PART_ID>InertialSeparator_Breaker</PART_ID>
			<CIRCUIT_ID>@InertialSeparatorCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Inertial Separator</TOOLTIPID>
		</UseTemplate>


		<!-- Row 2 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Advisory1_Breaker</NODE_ID>
			<PART_ID>Advisory1_Breaker</PART_ID>
			<CIRCUIT_ID>@Annunciators1Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Annunciators 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Advisory2_Breaker</NODE_ID>
			<PART_ID>Advisory2_Breaker</PART_ID>
			<CIRCUIT_ID>@Annunciators2Circuit</CIRCUIT_ID>
			<BUS_ID>@ESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Annunciators 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AudioWarning_Breaker</NODE_ID>
			<PART_ID>AudioWarning_Breaker</PART_ID>
			<CIRCUIT_ID>@AudioWarningsCircuit</CIRCUIT_ID>
			<BUS_ID>@ESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Audio Warnings</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AutopilotDisconnect_Breaker</NODE_ID>
			<PART_ID>AutopilotDisconnect_Breaker</PART_ID>
			<CIRCUIT_ID>@AutopilotDisconnectCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>AP Disconnect</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AutopilotAlert_Breaker</NODE_ID>
			<PART_ID>AutopilotAlert_Breaker</PART_ID>
			<CIRCUIT_ID>@AutopilotWarningsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>AP Warnings</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AltitudeSelector_Breaker</NODE_ID>
			<PART_ID>AltitudeSelector_Breaker</PART_ID>
			<CIRCUIT_ID>@AltitudeSelectorCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Altitude Selector</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>LeftWindshieldHeat_Breaker</NODE_ID>
			<PART_ID>LeftWindshieldHeat_Breaker</PART_ID>
			<CIRCUIT_ID>@WindshieldHeat_LCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>L Windshield Heat</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RightWindshieldHeat_Breaker</NODE_ID>
			<PART_ID>RightWindshieldHeat_Breaker</PART_ID>
			<CIRCUIT_ID>@WindshieldHeat_RCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>R Windshield Heat</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PropDeice_Breaker</NODE_ID>
			<PART_ID>PropDeice_Breaker</PART_ID>
			<CIRCUIT_ID>@PropDeiceCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Prop Deice</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AirframeDeice_Breaker</NODE_ID>
			<PART_ID>AirframeDeice_Breaker</PART_ID>
			<CIRCUIT_ID>@AirframeDeiceCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Airframe Deice</TOOLTIPID>
		</UseTemplate>


		<!-- Row 3 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>EngineIndicators1_Breaker</NODE_ID>
			<PART_ID>EngineIndicators1_Breaker</PART_ID>
			<CIRCUIT_ID>@EngineIndications1Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Engine Gauges 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>EngineIndicators2_Breaker</NODE_ID>
			<PART_ID>EngineIndicators2_Breaker</PART_ID>
			<CIRCUIT_ID>@EngineIndications2Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Engine Gauges 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Ignition_Breaker</NODE_ID>
			<PART_ID>Ignition_Breaker</PART_ID>
			<CIRCUIT_ID>@IgnitionCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Engine Ignition</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PulseLight_Breaker</NODE_ID>
			<PART_ID>PulseLight_Breaker</PART_ID>
			<CIRCUIT_ID>@PulseLightsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Pulse Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>IceLight_Breaker</NODE_ID>
			<PART_ID>IceLight_Breaker</PART_ID>
			<CIRCUIT_ID>@IceLightCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Ice Light</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>StrobeLight_Breaker</NODE_ID>
			<PART_ID>StrobeLight_Breaker</PART_ID>
			<CIRCUIT_ID>@StrobeLightCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Strobe Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>LeftLandingLight_Breaker</NODE_ID>
			<PART_ID>LeftLandingLight_Breaker</PART_ID>
			<CIRCUIT_ID>@LandingLight_LCircuit</CIRCUIT_ID>
			<BUS_ID>@LANDINGLIGHTS_INTERMEDIATE_L</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>L Landing Light</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>TaxiLight_Breaker</NODE_ID>
			<PART_ID>TaxiLight_Breaker</PART_ID>
			<CIRCUIT_ID>@TaxiLightCircuit</CIRCUIT_ID>
			<BUS_ID>@TAXILIGHT_INTERMEDIATE</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Taxi Light</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RightLandingLight_Breaker</NODE_ID>
			<PART_ID>RightLandingLight_Breaker</PART_ID>
			<CIRCUIT_ID>@LandingLight_RCircuit</CIRCUIT_ID>
			<BUS_ID>@LANDINGLIGHTS_INTERMEDIATE_R</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>R Landing Light</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>NavigationLight_Breaker</NODE_ID>
			<PART_ID>NavigationLight_Breaker</PART_ID>
			<CIRCUIT_ID>@NavLightsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Nav Lights</TOOLTIPID>
		</UseTemplate>


		<!-- Row 4 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>BleedAirController_Breaker</NODE_ID>
			<PART_ID>BleedAirController_Breaker</PART_ID>
			<CIRCUIT_ID>@BleedAirCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Bleed Air</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AirConditioner_Breaker</NODE_ID>
			<PART_ID>AirConditioner_Breaker</PART_ID>
			<CIRCUIT_ID>@AirConditionerCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Air Conditioner</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>FuelGauge1_Breaker</NODE_ID>
			<PART_ID>FuelGauge1_Breaker</PART_ID>
			<CIRCUIT_ID>@FuelSender1Circuit</CIRCUIT_ID>
			<BUS_ID>@ESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>L Fuel Sender</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>FuelGauge2_Breaker</NODE_ID>
			<PART_ID>FuelGauge2_Breaker</PART_ID>
			<CIRCUIT_ID>@FuelSender2Circuit</CIRCUIT_ID>
			<BUS_ID>@ESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>R Fuel Sender</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>FuelSelector_Breaker</NODE_ID>
			<PART_ID>FuelSelector_Breaker</PART_ID>
			<CIRCUIT_ID>@FuelSelectorCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Auto Fuel Selector</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>FuelBoostPump_Breaker</NODE_ID>
			<PART_ID>FuelBoostPump_Breaker</PART_ID>
			<CIRCUIT_ID>@BoostPumpCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Aux Boost Pump</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>InstrumentLighting_Breaker</NODE_ID>
			<PART_ID>InstrumentLighting_Breaker</PART_ID>
			<CIRCUIT_ID>@InstrumentLightsCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Instrument Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>PanelLights_Breaker</NODE_ID>
			<PART_ID>PanelLights_Breaker</PART_ID>
			<CIRCUIT_ID>@PanelLightsCircuit</CIRCUIT_ID>
			<BUS_ID>@ESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Panel Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>EmergencyPanelLights_Breaker</NODE_ID>
			<PART_ID>EmergencyPanelLights_Breaker</PART_ID>
			<CIRCUIT_ID>@EmergencyLightsCircuit</CIRCUIT_ID>
			<BUS_ID>@BATTERY</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Emergency Panel Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BUS_TEMPLATE">
			<NODE_ID>Cabin_Breaker</NODE_ID>
			<PART_ID>Cabin_Breaker</PART_ID>
			<SOURCE_BUS>@BUS3</SOURCE_BUS>
			<DESTINATION_BUS>@CABINLIGHTS_INTERMEDIATE</DESTINATION_BUS>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Cabin Lights</TOOLTIPID>
		</UseTemplate>


		<!-- Row 5 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>ELT_Breaker</NODE_ID>
			<PART_ID>ELT_Breaker</PART_ID>
			<CIRCUIT_ID>@ELTCircuit</CIRCUIT_ID>
			<BUS_ID>@ESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>ELT</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>EHSI_Breaker</NODE_ID>
			<PART_ID>EHSI_Breaker</PART_ID>
			<CIRCUIT_ID>@EHSICircuit</CIRCUIT_ID>
			<BUS_ID>@EFIS</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>EHSI</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>EADI_Breaker</NODE_ID>
			<PART_ID>EADI_Breaker</PART_ID>
			<CIRCUIT_ID>@EADICircuit</CIRCUIT_ID>
			<BUS_ID>@EFIS</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>EADI</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RemoteCompass_Breaker</NODE_ID>
			<PART_ID>RemoteCompass_Breaker</PART_ID>
			<CIRCUIT_ID>@RemoteCompassCircuit</CIRCUIT_ID>
			<BUS_ID>@EFIS</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Remote Compass</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RMI_Breaker</NODE_ID>
			<PART_ID>RMI_Breaker</PART_ID>
			<CIRCUIT_ID>@RMICircuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>RMI</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>ADI2_Breaker</NODE_ID>
			<PART_ID>ADI2_Breaker</PART_ID>
			<CIRCUIT_ID>@ADI2Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Copilot Attitude</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>HSI2_Breaker</NODE_ID>
			<PART_ID>HSI2_Breaker</PART_ID>
			<CIRCUIT_ID>@HSI2Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Copilot HSI</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RadarAltimeter2_Breaker</NODE_ID>
			<PART_ID>RadarAltimeter2_Breaker</PART_ID>
			<CIRCUIT_ID>@RadioAltimeter2Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Radar Altimeter 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AccessLighting_Breaker</NODE_ID>
			<PART_ID>AccessLighting_Breaker</PART_ID>
			<CIRCUIT_ID>@AccessLightingCircuit</CIRCUIT_ID>
			<BUS_ID>@BATTERY</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Access Lights</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Chronometer_Breaker</NODE_ID>
			<PART_ID>Chronometer_Breaker</PART_ID>
			<CIRCUIT_ID>@MemoryChronoCircuit</CIRCUIT_ID>
			<BUS_ID>@BATTERY</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Memory and Chrono</TOOLTIPID>
		</UseTemplate>


		<!-- Row 6 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>RadarAltimeter1_Breaker</NODE_ID>
			<PART_ID>RadarAltimeter1_Breaker</PART_ID>
			<CIRCUIT_ID>@RadioAltimeter1Circuit</CIRCUIT_ID>
			<BUS_ID>@BUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Radar Altimeter 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Usb_Breaker</NODE_ID>
			<PART_ID>Usb_Breaker</PART_ID>
			<CIRCUIT_ID>@DcCabinAccessoriesCircuit</CIRCUIT_ID>
			<BUS_ID>@BUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Cabin Accessories</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>MarkerBeacon_Breaker</NODE_ID>
			<PART_ID>MarkerBeacon_Breaker</PART_ID>
			<CIRCUIT_ID>@MarkerBeaconCircuit</CIRCUIT_ID>
			<BUS_ID>@ESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Marker Beacon</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Com1_Breaker</NODE_ID>
			<PART_ID>Com1_Breaker</PART_ID>
			<CIRCUIT_ID>@Com1Circuit</CIRCUIT_ID>
			<BUS_ID>@RADIOESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>COM GPS 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>GroundClearance_Breaker</NODE_ID>
			<PART_ID>GroundClearance_Breaker</PART_ID>
			<CIRCUIT_ID>@GroundClearanceCircuit</CIRCUIT_ID>
			<BUS_ID>@BATTERY</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Ground Clearance</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Com2_Breaker</NODE_ID>
			<PART_ID>Com2_Breaker</PART_ID>
			<CIRCUIT_ID>@Com2Circuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>COM GPS 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AltitudeEncoder_Breaker</NODE_ID>
			<PART_ID>AltitudeEncoder_Breaker</PART_ID>
			<CIRCUIT_ID>@AltitudeEncoderCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Altitude Encoder</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Transponder_Breaker</NODE_ID>
			<PART_ID>Transponder_Breaker</PART_ID>
			<CIRCUIT_ID>@TransponderCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOESS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Transponder</TOOLTIPID>
		</UseTemplate>


		<!-- Row 7 -->

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Nav1_Breaker</NODE_ID>
			<PART_ID>Nav1_Breaker</PART_ID>
			<CIRCUIT_ID>@Nav1Circuit</CIRCUIT_ID>
			<BUS_ID>@RADIOESS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Nav 1</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Nav2_Breaker</NODE_ID>
			<PART_ID>Nav2_Breaker</PART_ID>
			<CIRCUIT_ID>@Nav2Circuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Nav 2</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>Rnav_Breaker</NODE_ID>
			<PART_ID>Rnav_Breaker</PART_ID>
			<CIRCUIT_ID>@RNAVCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>RNAV</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>ADF_Breaker</NODE_ID>
			<PART_ID>ADF_Breaker</PART_ID>
			<CIRCUIT_ID>@ADFCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS1</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>ADF</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>DME_Breaker</NODE_ID>
			<PART_ID>DME_Breaker</PART_ID>
			<CIRCUIT_ID>@DMECircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>DME</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>TerrainWarningSystem_Breaker</NODE_ID>
			<PART_ID>TerrainWarningSystem_Breaker</PART_ID>
			<CIRCUIT_ID>@TerrainTrafficCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Terrain Warning</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>WeatherRadarController_Breaker</NODE_ID>
			<PART_ID>WeatherRadarController_Breaker</PART_ID>
			<CIRCUIT_ID>@WeatherRadarControllerCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Weather Radar Controller</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>WeatherRadarAntenna_Breaker</NODE_ID>
			<PART_ID>WeatherRadarAntenna_Breaker</PART_ID>
			<CIRCUIT_ID>@WeatherRadarAntennaCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS3</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Weather Radar Transceiver</TOOLTIPID>
		</UseTemplate>

		<UseTemplate Name="BKSQ_SWITCH_BREAKER_TEMPLATE">
			<NODE_ID>AvionicsCoolingFan_Breaker</NODE_ID>
			<PART_ID>AvionicsCoolingFan_Breaker</PART_ID>
			<CIRCUIT_ID>@RadioFansCircuit</CIRCUIT_ID>
			<BUS_ID>@RADIOBUS2</BUS_ID>
			
			<WWISE_EVENT_1>button_switch_plastic</WWISE_EVENT_1>
			<WWISE_EVENT_2>pulse_light_switch_off</WWISE_EVENT_2>
			<TOOLTIP_TITLE></TOOLTIP_TITLE>
			<TOOLTIPID>Avionics Fans</TOOLTIPID>
		</UseTemplate>


		<!-- HOT_BATTERY = 1 -->
		<!-- BATTERY = 2 -->
		<!-- MAIN_DISTRIBUTION = 3 -->
		<!-- BUS1 = 4 -->
		<!-- BUS2 = 5 -->
		<!-- BUS3 = 6 -->
		<!-- ESS1 = 7 -->
		<!-- ESS2 = 8 -->
		<!-- EFIS = 9 -->
		<!-- RADIOBUS1" = 10 -->
		<!-- RADIOBUS2" = 11 -->
		<!-- RADIOBUS3" = 12 -->
		<!-- RADIOESS1" = 13 -->
		<!-- RADIOESS2" = 14 -->
		<!-- CABINLIGHTS" = 15 -->

	</Component>



</Behaviors>
</ModelInfo>
