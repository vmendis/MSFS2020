<?xml version="1.0" encoding="utf-8" ?>
<ModelInfo>
	<LODS>
		<!-- Highest LOD -->
		<!-- minimum display size in % (should be bounding sphere vertical screen size, sphere will often be slightly larger than you expect) -->
		<!-- default minSize is 0 -->
		<LOD minSize="350" ModelFile="PA24_250_INTERIOR_LOD00.gltf"/>
		<LOD minSize="80" ModelFile="PA24_250_INTERIOR_LOD01.gltf"/>
		<LOD minSize="40" ModelFile="PA24_250_INTERIOR_LOD02.gltf"/>
		<LOD minSize="15" ModelFile="PA24_250_INTERIOR_LOD03.gltf"/>
		<LOD minSize="3" ModelFile="PA24_250_INTERIOR_LOD04.gltf"/>
		<LOD minSize="1" ModelFile="PA24_250_INTERIOR_LOD05.gltf"/>
	</LODS>
</ModelInfo>
<ModelBehaviors>
	<!-- Includes ###################################### -->
 	<Include File="a2a_common.xml"/> 
 	<Include File="a2a_gauges.xml"/> 
 	<Include File="a2a_avionics.xml"/> 
 	<Include File="a2a_exterior.xml"/> 
 	<!-- <Include File="a2a_gps.xml"/>  -->
	<Include File="Templates\A2A_Inputs.xml" />
	<Include File="Templates\A2A_Templates.xml" />
	<!-- ############################################### -->
	<Include Path="Asobo\GPS\AS430.xml"/>
	<Include Path="Asobo\GPS\AS530.xml"/>
	<!-- ############################################### -->
	<!-- PMS50 GTN750 -->
	<Component ID="PMS50GTN750">
		<Component ID="GTN750_Vol" Node="GTN750_Vol">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">
				<ANIM_NAME_KNOB>GTN750_Vol</ANIM_NAME_KNOB>
				<ANIM_NAME_PUSH>GTN750_VolPush</ANIM_NAME_PUSH>
				<CLOCKWISE_CODE>(&gt;H:GTN750_VolInc)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(&gt;H:GTN750_VolDec)</ANTICLOCKWISE_CODE>
				<LEFT_SINGLE_CODE>(&gt;H:GTN750_VolPush)</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			    <WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_KnobSmall" Node="GTN750_KnobSmall">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">
				<ANIM_NAME_KNOB>GTN750_KnobSmall</ANIM_NAME_KNOB>
				<ANIM_NAME_PUSH>GTN750_KnobSmallPush</ANIM_NAME_PUSH>
				<CLOCKWISE_CODE>(&gt;H:GTN750_KnobSmallInc)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(&gt;H:GTN750_KnobSmallDec)</ANTICLOCKWISE_CODE>
				<LEFT_SINGLE_CODE>(&gt;H:GTN750_KnobPush)</LEFT_SINGLE_CODE>
				<WWISE_EVENT>TDSGTNXI_sound_knob_inner</WWISE_EVENT>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_KnobLarge" Node="GTN750_KnobLarge">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite">
				<ANIM_NAME>GTN750_KnobLarge</ANIM_NAME>
				<CLOCKWISE_CODE>(&gt;H:GTN750_KnobLargeInc)</CLOCKWISE_CODE>
				<ANTICLOCKWISE_CODE>(&gt;H:GTN750_KnobLargeDec)</ANTICLOCKWISE_CODE>
				<WWISE_EVENT>TDSGTNXI_sound_knob_outer</WWISE_EVENT>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_HomePush" Node="GTN750_HomePush">
			<UseTemplate Name="ASOBO_GT_Push_Button_Timed">
				<ANIM_NAME>GTN750_HomePush</ANIM_NAME>
				<SHORT_CLICK_CODE>(&gt;H:GTN750_HomePush)</SHORT_CLICK_CODE>
				<LONG_CLICK_CODE>(&gt;H:GTN750_HomePushLong)</LONG_CLICK_CODE>
				<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			    <WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_DirectToPush" Node="GTN750_DirectToPush">
			<UseTemplate Name="ASOBO_GT_Push_Button">
				<ANIM_NAME>GTN750_DirectToPush</ANIM_NAME>
				<LEFT_SINGLE_CODE>(&gt;H:GTN750_DirectToPush)</LEFT_SINGLE_CODE>
				<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			    <WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_BtnD_On" Node="GTN750_BtnD_On"> 
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="GTN750_BtnHome_On" Node="GTN750_BtnHome_On"> 
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
	</Component>
	<!-- ############################################### -->
	<!-- TDS GTNXI 750 U1 -->
	<Component ID="TDSGTNXI">
		<Component ID="TDSGTNXI750U1_KnobSmall" Node="TDSGTNXI_750U1_smallknob">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">
			<ANIM_NAME_KNOB>TDSGTNXI750U1_KnobSmall</ANIM_NAME_KNOB>
			<ANIM_NAME_PUSH>TDSGTNXI750U1_KnobSmallPush</ANIM_NAME_PUSH>
			<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.3</NORMALIZED_TIME_2>
			<CLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_LKnobInc,bool)</CLOCKWISE_CODE>
			<ANTICLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_LKnobDec,bool)</ANTICLOCKWISE_CODE>
			<WWISE_EVENT>TDSGTNXI_sound_knob_inner</WWISE_EVENT>
			<COUNT>36</COUNT>
			<LEFT_SINGLE_CODE>1 (&gt;L:TDSGTNXI750U1_LKnobCRSR,bool)</LEFT_SINGLE_CODE>
			<LEFT_LEAVE_CODE>0 (&gt;L:TDSGTNXI750U1_LKnobCRSR,bool)</LEFT_LEAVE_CODE> 	
			</UseTemplate>
		</Component>
		<Component ID="TDSGTNXI750U1_KnobInner" Node="TDSGTNXI_750U1_inknob">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push_Timed">
			<ANIM_NAME_KNOB>TDSGTNXI750U1_KnobInner</ANIM_NAME_KNOB>
			<ANIM_NAME_PUSH>TDSGTNXI750U1_KnobInnerPush</ANIM_NAME_PUSH>
			<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.3</NORMALIZED_TIME_2>
			<CLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_RKnobInnerInc,bool)</CLOCKWISE_CODE>
			<ANTICLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_RKnobInnerDec,bool)</ANTICLOCKWISE_CODE>
			<LEFT_SINGLE_CODE>1 (&gt;L:TDSGTNXI750U1_RKnobCRSR,bool)</LEFT_SINGLE_CODE>
			<LEFT_LEAVE_CODE>0 (&gt;L:TDSGTNXI750U1_RKnobCRSR,bool)</LEFT_LEAVE_CODE> 
			<WWISE_EVENT>TDSGTNXI_sound_knob_inner</WWISE_EVENT>
			<COUNT>36</COUNT>
			</UseTemplate>
		</Component>
		<Component ID="TDSGTNXI750U1_KnobOuter" Node="TDSGTNXI_750U1_outknob">
			<UseTemplate Name="ASOBO_GT_Knob_Infinite">
			<ANIM_NAME>TDSGTNXI750U1_KnobOuter</ANIM_NAME>
			<CLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_RKnobOuterInc,bool)</CLOCKWISE_CODE>
			<ANTICLOCKWISE_CODE>1 (&gt;L:TDSGTNXI750U1_RKnobOuterDec,bool)</ANTICLOCKWISE_CODE>
			<WWISE_EVENT>TDSGTNXI_sound_knob_outer</WWISE_EVENT>
			<COUNT>36</COUNT>
			</UseTemplate>
		</Component>
		<Component ID="TDSGTNXI750U1_HomePush" Node="TDSGTNXI_750U1_Home">
			<UseTemplate Name="ASOBO_GT_Push_Button_Timed">
			<ANIM_NAME>TDSGTNXI750U1_HomePush</ANIM_NAME>		
			<LEFT_SINGLE_CODE>1 (&gt;L:TDSGTNXI750U1_HomeKey,bool)</LEFT_SINGLE_CODE>  
			<LEFT_LEAVE_CODE>0 (&gt;L:TDSGTNXI750U1_HomeKey,bool)</LEFT_LEAVE_CODE> 	
			<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>		
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="TDSGTNXI750U1_DirectToPush" Node="TDSGTNXI_750U1_Direct_To">
			<UseTemplate Name="ASOBO_GT_Push_Button">
			<ANIM_NAME>TDSGTNXI750U1_DirectTo_Push</ANIM_NAME>
			<LEFT_SINGLE_CODE>1 (&gt;L:TDSGTNXI750U1_DTOKey,bool)</LEFT_SINGLE_CODE>  
			<LEFT_LEAVE_CODE>0 (&gt;L:TDSGTNXI750U1_DTOKey,bool)</LEFT_LEAVE_CODE> 	
			<WWISE_EVENT_1>TDSGTNXI_sound_key_press</WWISE_EVENT_1>
			<NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
			<WWISE_EVENT_2>TDSGTNXI_sound_key_release</WWISE_EVENT_2>
			<NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
	</Component>	
	<!-- ############################################### -->
	
	<!-- ###########  AIRFRAME SHAKES  ########### -->
	<Component ID="SHAKES"> 
		<Component ID="Shake_LR"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_Shake_LR</ANIM_NAME>
				<ANIM_CODE>(L:AirframeRoll,number) 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Shake_FA"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_Shake_FA</ANIM_NAME>
				<ANIM_CODE>(L:AirframePitch,number) 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Shake_Yaw"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_Shake_Yaw</ANIM_NAME>
				<ANIM_CODE>(L:AirframeYaw,number) 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Shake_Vertical"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_Shake_Vertical</ANIM_NAME>
				<ANIM_CODE>(L:AirframeVertical,percent) 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Panel1_Shake"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_PanelShake_Vertical</ANIM_NAME>
				<ANIM_CODE>
					(L:PanelVerticalShake,enum) 50 * 50 +
				</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Panel2_Shake"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_PanelShake_Horizontal</ANIM_NAME>
				<ANIM_CODE>
					(L:PanelHorizontalShake,enum) 50 * 50 +
				</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>

	<!-- GNS430 -->
	<Component ID="AS430_GPS"> 
		<UseTemplate Name="ASOBO_AS430_Template">
			<POTENTIOMETER>1</POTENTIOMETER>
			<FAILURE>(A:CIRCUIT ON:37, Bool)</FAILURE>
			<EMISSIVE_DEFAULT_VALUE>1</EMISSIVE_DEFAULT_VALUE>
			<CIRCUIT_ID>37</CIRCUIT_ID>
			<EXTERNAL_AUTOPILOT_BEHAVIOR_CONTROL/>
		</UseTemplate>
		<UseTemplate Name="ASOBO_AS430_Template">
			<ID>2</ID>
			<POTENTIOMETER>1</POTENTIOMETER>
			<FAILURE>(A:CIRCUIT ON:37, Bool)</FAILURE>
			<EMISSIVE_DEFAULT_VALUE>1</EMISSIVE_DEFAULT_VALUE>
			<CIRCUIT_ID>37</CIRCUIT_ID>
			<EXTERNAL_AUTOPILOT_BEHAVIOR_CONTROL/>
			<NAV_INDEX>2</NAV_INDEX>
			<COM_INDEX>2</COM_INDEX>
		</UseTemplate>
	</Component>
	<Component ID="AS430_DECAL" Node="AS430_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_COM_Volume_1_DECAL" Node="AS430_Knob_COM_Volume_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_CRSR_1_DECAL" Node="AS430_Knob_CRSR_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_GPS_1_DECAL" Node="AS430_Knob_GPS_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_Khz_1_DECAL" Node="AS430_Knob_Khz_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_Mhz_1_DECAL" Node="AS430_Knob_Mhz_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Knob_NAV_Volume_1_DECAL" Node="AS430_Knob_NAV_Volume_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_CDI_1_DECAL" Node="AS430_Push_CDI_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_CDI_2_DECAL" Node="AS430_Push_CDI_2_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_Clear_1_DECAL" Node="AS430_Push_Clear_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_COM_Swap_1_DECAL" Node="AS430_Push_COM_Swap_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_DirectTo_1_DECAL" Node="AS430_Push_DirectTo_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_Enter_1_DECAL" Node="AS430_Push_Enter_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_FlightPlan_1_DECAL" Node="AS430_Push_FlightPlan_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_Menu_1_DECAL" Node="AS430_Push_Menu_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_Message_1_DECAL" Node="AS430_Push_Message_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_NAV_Swap_1_DECAL" Node="AS430_Push_NAV_Swap_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_OBS_1_DECAL" Node="AS430_Push_OBS_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Push_Procedure_1_DECAL" Node="AS430_Push_Procedure_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Switch_Range_1_DECAL" Node="AS430_Switch_Range_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Display1" Node="AS430_Display1">
		<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
			<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS430_Display2" Node="AS430_Display2">
		<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
			<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<!-- GNS530 -->
	<Component ID="AS530_GPS"> 
		<UseTemplate Name="ASOBO_AS530_Template">
			<POTENTIOMETER>1</POTENTIOMETER>
			<FAILURE>(A:CIRCUIT ON:37, Bool)</FAILURE>
			<EMISSIVE_DEFAULT_VALUE>1</EMISSIVE_DEFAULT_VALUE>
			<CIRCUIT_ID>37</CIRCUIT_ID>
		</UseTemplate>
	</Component>
	<Component ID="AS530_DECAL" Node="AS530_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_COM_Volume_1_DECAL" Node="AS530_Knob_COM_Volume_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_CRSR_1_DECAL" Node="AS530_Knob_CRSR_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_GPS_1_DECAL" Node="AS530_Knob_GPS_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_Khz_1_DECAL" Node="AS530_Knob_Khz_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_Mhz_1_DECAL" Node="AS530_Knob_Mhz_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Knob_NAV_Volume_1_DECAL" Node="AS530_Knob_NAV_Volume_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_CDI_1_DECAL" Node="AS530_Push_CDI_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Vnav_1_DECAL" Node="AS530_Push_Vnav_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Clear_1_DECAL" Node="AS530_Push_Clear_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_COM_Swap_1_DECAL" Node="AS530_Push_COM_Swap_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_DirectTo_1_DECAL" Node="AS530_Push_DirectTo_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Enter_1_DECAL" Node="AS530_Push_Enter_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_FlightPlan_1_DECAL" Node="AS530_Push_FlightPlan_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Menu_1_DECAL" Node="AS530_Push_Menu_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Message_1_DECAL" Node="AS530_Push_Message_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_NAV_Swap_1_DECAL" Node="AS530_Push_NAV_Swap_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_OBS_1_DECAL" Node="AS530_Push_OBS_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Push_Procedure_1_DECAL" Node="AS530_Push_Procedure_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Switch_Range_1_DECAL" Node="AS530_Switch_Range_1_DECAL"> 
		<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
			<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:NavInstrLightSwitchPct) 100 / *</EMISSIVE_CODE>
		</UseTemplate>
	</Component>
	<Component ID="AS530_Display" Node="AS530_Display">
		<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
			<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
		</UseTemplate>
	</Component>

	<!-- CONFIGURATION TABLET ################################### -->
	<RootComponent ID="A2A_CONFIGURATION_TABLET"> 
		<Component ID="ConfigurationTablet"> 
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_LENGTH>200</ANIM_LENGTH>
				<ANIM_NAME>ANIM_TabletPosition</ANIM_NAME>
				<ANIM_CODE>
				(L:WalkaroundAvailable,bool) 1 ==
				if{ (L:TabletStation) }
				els{ (L:TabletStation) 0 max 1 min }
				</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="ConfigurationTabletCustomPosition"> 
			<Component ID="TabletCustomPositionAnim"> 
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_LENGTH>100</ANIM_LENGTH>
					<ANIM_NAME>ANIM_TabletCustomPosition</ANIM_NAME>
					<ANIM_CODE>
						(L:TabletStation) 1 ==
						if{ 50 (L:TabletHorizontalPosition) 2 / + }
						els{ 0 }
					</ANIM_CODE>
					<ANIM_LAG>100</ANIM_LAG>
				</UseTemplate>
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>ANIM_TabletCustomPositionVert</ANIM_NAME>
					<ANIM_CODE>
						(L:TabletStation) 1 ==
						if{ (L:TabletVerticalPosition) 50 + }
						els{ 0 }
					</ANIM_CODE>
					<ANIM_LAG>200</ANIM_LAG>
				</UseTemplate>
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>ANIM_TabletCustomPositionDepth</ANIM_NAME>
					<ANIM_CODE>
						(L:TabletStation) 1 ==
						if{ (L:TabletDepthPosition) 50 + }
						els{ 50 }
					</ANIM_CODE>
					<ANIM_LAG>200</ANIM_LAG>
				</UseTemplate>
			</Component>
			<Component ID="CONFIGURATION_Tablet_Vertical" Node="Tablet_Click_Drag"> 
				<UseInputEvent ID="CONFIGURATION_Tablet_Move"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.TABLET_POS_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>CONFIGURATION_Tablet_Vertical_Drag</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>CONFIGURATION_Tablet_Horizontal_Drag</TOOLTIP_ENTRY_1>
					<TOOLTIP_ENTRY_2>CONFIGURATION_Tablet_Depth_Drag</TOOLTIP_ENTRY_2>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>	
						(M:Event) 'WheelUp' scmp 0 ==
						if{ 
							(L:TabletDepthPosition) 5 + 25 min (&gt;L:TabletDepthPosition)
							quit
						} 

						(M:Event) 'WheelDown' scmp 0 ==
						if{ 
							(L:TabletDepthPosition) 5 - -50 max (&gt;L:TabletDepthPosition)
							quit
						}
						(M:Event) 'LeftSingle' scmp 0 == if{
							1 (&gt;L:TabletDrag)
						}
						(M:Event) 'LeftRelease' scmp 0 == if{
							0 (&gt;L:TabletDrag)
						}
						(M:Event) 'LeftDrag' scmp 0 == if{
							(M:Y) (L:TabletVerticalPosition_Click) - 0.075 * (G:Var1) + 50 min -39 max (&gt;L:TabletVerticalPosition)
							(M:X) (L:TabletHorizontalPosition_Click) - 0.075 * (G:Var2) + 100 min 0 max (&gt;L:TabletHorizontalPosition)
						}
						
						(M:Y) (&gt;L:TabletVerticalPosition_Click)
						(L:TabletVerticalPosition) (&gt;G:Var1)	
						
						(M:X) (&gt;L:TabletHorizontalPosition_Click)
						(L:TabletHorizontalPosition) (&gt;G:Var2)
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Visibility">
					 <VISIBILITY_CODE>(L:TabletStation) 1 == if{ 1 } els{ 0 }</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="CONFIGURATION_Tablet_Depth" Node="Tablet_Click_Depth"> 
				<UseInputEvent ID="CONFIGURATION_Tablet_Depth"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.TABLET_DEPTHPOS_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>CONFIGURATION_Tablet_Depth_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'LeftDrag' scmp 0 == if{
							(L:TabletDepthPosition_Click) (M:Y) - (G:Var1) + 50 min -50 max (&gt;L:TabletDepthPosition)
						}
						
						(M:Y) (&gt;L:TabletDepthPosition_Click)
						(L:TabletDepthPosition) (&gt;G:Var1)	
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Visibility">
					 <VISIBILITY_CODE>(L:TabletStation) 1 == if{ 1 } els{ 0 }</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>
		<Component ID="CONFIGURATION_Tablet" Node="Tablet_Hider">
			<UseInputEvent ID="CONFIGURATION_Tablet_Hider"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.TABLET_STOW_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>CONFIGURATION_Tablet_Hider_Single</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						0 (&gt;L:TabletStation)
					}	
				</CALLBACKCODE>
			</UseTemplate>	
			<!--<UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
				<LEFT_SINGLE_CODE>0 (&gt;L:TabletStation)</LEFT_SINGLE_CODE>
				<TOOLTIPID>Tablet stow</TOOLTIPID>
			</UseTemplate>-->
		</Component>
		<Component ID="ConfigurationTabletReset" Node="ConfigurationTabletReset">
			<UseInputEvent ID="CONFIGURATION_Tablet_Reset"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.TABLET_RESET_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>CONFIGURATION_Tablet_Reset_Single</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						0 (&gt;L:TabletStation)
					}	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:TabletStation) 0 &gt;
					if{ 1 }
					els{ 0 }
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>
		<Component ID="CONFIGURATION_TabletStored" Node="ConfigurationTabletStored">
			<UseInputEvent ID="CONFIGURATION_Tablet_Stored"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.TABLET_STORED_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>CONFIGURATION_Tablet_Stored_Single</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						1 (&gt;L:TabletStation)
					}	
				</CALLBACKCODE>
			</UseTemplate>	

			<!--<UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
				<LEFT_SINGLE_CODE>1 (&gt;L:TabletStation)</LEFT_SINGLE_CODE>
				<TOOLTIPID>Configuration tablet</TOOLTIPID>
			</UseTemplate>-->
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:TabletStation) 0 ==
					if{ 1 }
					els{ 0 }
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>
		<Component ID="CONFIGURATION_Tablet_Collision" Node="ConfigurationTabletCollision">
			<UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
				<LEFT_SINGLE_CODE></LEFT_SINGLE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CONFIGURATION_Tablet_Display" Node="TabletScreen">
			<UseTemplate Name="ASOBO_GT_Interaction_NoInteraction">
				<DISABLE_MOUSERECT>True</DISABLE_MOUSERECT>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100) (L:TabletBrightness,number) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
	</RootComponent>

	<!-- EDM 730 ################################### -->
	<RootComponent ID="A2A_EDM730"> 
		<Component ID="A2A_EDM730_Display" Node="A2A_EDM730_Display">
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="BUTTON_EDM730_Step" Node="BUTTON_EDM730_Step">
			<!--<Parameters Type="Override">
				<EXTRA_OPTION>_Held</EXTRA_OPTION>
				<INTERACTION_TYPE>Push</INTERACTION_TYPE>
				<CREATE_COMPONENT>False</CREATE_COMPONENT>
			</Parameters>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>BUTTON_EDM730_Step</ANIM_NAME>
				<ANIM_CODE>(L:BUTTON_EDM730_Step, bool) 100 *</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_Interaction_Base_Template">
				<IE_NAME>BUTTON_EDM730_Step</IE_NAME>
				<NODE_ID>BUTTON_EDM730_Step</NODE_ID>
				<ANIM_NAME>BUTTON_EDM730_Step</ANIM_NAME>
				<SET_STATE_EXTERNAL>p0 (&gt;L:BUTTON_EDM730_Step)</SET_STATE_EXTERNAL>
				<VALUE_CODE>(L:BUTTON_EDM730_Step)</VALUE_CODE>
				<LOCAL_VAR_TO_WATCH_0>BUTTON_EDM730_Step</LOCAL_VAR_TO_WATCH_0>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.EDM730_STEP_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION></TT_DESCRIPTION>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_VALUE></TT_VALUE>
				<USE_INPUT_EVENT_ID>KNOB_autopilot_mode_push</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>KNOB_autopilot_mode_push</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>-->
			<UseInputEvent ID="BUTTON_EDM730_Step"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.EDM730_STEP_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>BUTTON_EDM730_Step_Push</TOOLTIP_ENTRY_0>
				<TOOLTIP_ENTRY_1>BUTTON_EDM730_Step_PushBoth</TOOLTIP_ENTRY_1>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 ==
					if{
						1 (&gt;L:BUTTON_EDM730_Step,enum)
					}
					(M:Event) 'LeftRelease' scmp 0 ==
					if{
						0 (&gt;L:BUTTON_EDM730_Step,enum)
					}
					
					(M:Event) 'RightSingle' scmp 0 ==
					if{
						1 (&gt;L:BUTTON_EDM730_Step,enum)
						1 (&gt;L:BUTTON_EDM730_LF,enum)
					}
					(M:Event) 'RightRelease' scmp 0 ==
					if{
						0 (&gt;L:BUTTON_EDM730_Step,enum)
						0 (&gt;L:BUTTON_EDM730_LF,enum)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>BUTTON_EDM730_Step</ANIM_NAME>
				<ANIM_CODE>(L:BUTTON_EDM730_Step) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="BUTTON_EDM730_LF" Node="BUTTON_EDM730_LF">
			<!--<Parameters Type="Override">
				<EXTRA_OPTION>_Held</EXTRA_OPTION>
				<INTERACTION_TYPE>Push</INTERACTION_TYPE>
				<CREATE_COMPONENT>False</CREATE_COMPONENT>
			</Parameters>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>BUTTON_EDM730_LF</ANIM_NAME>
				<ANIM_CODE>(L:BUTTON_EDM730_LF, bool) 100 *</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_Interaction_Base_Template">
				<IE_NAME>BUTTON_EDM730_LF</IE_NAME>
				<NODE_ID>BUTTON_EDM730_LF</NODE_ID>
				<ANIM_NAME>BUTTON_EDM730_LF</ANIM_NAME>
				<SET_STATE_EXTERNAL>p0 (&gt;L:BUTTON_EDM730_LF)</SET_STATE_EXTERNAL>
				<VALUE_CODE>(L:BUTTON_EDM730_LF)</VALUE_CODE>
				<LOCAL_VAR_TO_WATCH_0>BUTTON_EDM730_LF</LOCAL_VAR_TO_WATCH_0>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.EDM730_LF_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION></TT_DESCRIPTION>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_VALUE></TT_VALUE>
				<USE_INPUT_EVENT_ID>KNOB_autopilot_mode_push</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>KNOB_autopilot_mode_push</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>-->
			<UseInputEvent ID="BUTTON_EDM730_LF"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.EDM730_LF_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>BUTTON_EDM730_LF_Push</TOOLTIP_ENTRY_0>
				<TOOLTIP_ENTRY_1>BUTTON_EDM730_LF_PushBoth</TOOLTIP_ENTRY_1>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 ==
					if{
						1 (&gt;L:BUTTON_EDM730_LF,enum)
					}
					(M:Event) 'LeftRelease' scmp 0 ==
					if{
						0 (&gt;L:BUTTON_EDM730_LF,enum)
					}
					
					(M:Event) 'RightSingle' scmp 0 ==
					if{
						1 (&gt;L:BUTTON_EDM730_Step,enum)
						1 (&gt;L:BUTTON_EDM730_LF,enum)
					}
					(M:Event) 'RightRelease' scmp 0 ==
					if{
						0 (&gt;L:BUTTON_EDM730_Step,enum)
						0 (&gt;L:BUTTON_EDM730_LF,enum)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>BUTTON_EDM730_LF</ANIM_NAME>
				<ANIM_CODE>(L:BUTTON_EDM730_LF) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
	</RootComponent>

	
		<!-- HANDLING ################################### -->
	<!-- DASH ################################### -->
	<Component ID="HANDLING">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_AILERON_R</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{ (L:AileronR_Anim,percent) }
					els{ (A:AILERON POSITION,percent) }
					/-/ 0.5 * 50 +
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_AILERON_L</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{ (L:AileronL_Anim,percent) }
					els{ (A:AILERON POSITION,percent) }
					/-/ 0.5 * 50 +
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_Elevator</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{ (L:Elevator_Anim,percent) }
					els{ (A:ELEVATOR POSITION,percent) }
					/-/ 0.5 * 50 +
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_ElevatorTrim</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{ (L:ElevatorTrimTab_Anim,percent) }
					els{ (A:ELEVATOR POSITION,percent) }
					/-/ 0.5 * 50 +
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_Rudder</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{ (L:Rudder_Anim,percent) }
					els{ (A:RUDDER DEFLECTION PCT,percent) }
					/-/ 0.5 * 50 +
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_Flaps_L</ANIM_NAME>
				<ANIM_CODE>
					(L:FlapL_Anim,percent)
				</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>HANDLING_Flaps_R</ANIM_NAME>
				<ANIM_CODE>
					(L:FlapR_Anim,percent)
				</ANIM_CODE>
			</UseTemplate>
		</Component>
	<RootComponent ID="HANDLING_Dash"> 

		<!-- BREAKERS -->
		<Component ID="BREAKERS"> 
			<Component ID="breaker_landing_gear_motor" Node="Breaker_landingGearMotor"> 
				<UseInputEvent ID="Breaker_LandingGearMotor"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_LDG_GEAR_MOTOR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Breaker_LandingGearMotor_Toggle</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerLandingGearMotor,bool) ! (&gt;L:BreakerLandingGearMotor,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerLandingGearMotor,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerLandingGearMotor,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_landingGearMotor</ANIM_NAME>
					<ANIM_CODE>(L:BreakerLandingGearMotor) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_landingGearIndLights" Node="BREAKER_landingGearIndLights"> 
				<UseInputEvent ID="BREAKER_landingGearIndLights"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_LDG_GEAR_IND_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_landingGearIndLights_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerLandingGearIndicator,bool) ! (&gt;L:BreakerLandingGearIndicator,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerLandingGearIndicator,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerLandingGearIndicator,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_landingGearIndLights</ANIM_NAME>
					<ANIM_CODE>(L:BreakerLandingGearIndicator) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_generator" Node="BREAKER_generator"> 
				<UseInputEvent ID="BREAKER_generator"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_GENERATOR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_generator_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerGeneratorOutput,bool) ! (&gt;L:BreakerGeneratorOutput,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerGeneratorOutput,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerGeneratorOutput,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_generator</ANIM_NAME>
					<ANIM_CODE>(L:BreakerGeneratorOutput) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_navLights" Node="BREAKER_navLights"> 
				<UseInputEvent ID="BREAKER_navLights"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_NAV_LIGHTS_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_navLights_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerLightNav,bool) ! (&gt;L:BreakerLightNav,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerLightNav,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerLightNav,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_navLights</ANIM_NAME>
					<ANIM_CODE>(L:BreakerLightNav) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_gauges" Node="BREAKER_gauges"> 
				<UseInputEvent ID="BREAKER_gauges"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_ENG_GAUGES_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_gauges_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerGaugesEngine,bool) ! (&gt;L:BreakerGaugesEngine,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerGaugesEngine,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerGaugesEngine,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_gauges</ANIM_NAME>
					<ANIM_CODE>(L:BreakerGaugesEngine) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_landingsLights" Node="BREAKER_landingsLights"> 
				<UseInputEvent ID="BREAKER_landingsLights"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_LDG_LIGHTS_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_landingsLights_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerLightLanding,bool) ! (&gt;L:BreakerLightLanding,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerLightLanding,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerLightLanding,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_landingsLights</ANIM_NAME>
					<ANIM_CODE>(L:BreakerLightLanding) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_beaconLight" Node="BREAKER_beaconLight"> 
				<UseInputEvent ID="BREAKER_beaconLight"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_BEACON_LIGHT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_beaconLight_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerLightBeacon,bool) ! (&gt;L:BreakerLightBeacon,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerLightBeacon,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerLightBeacon,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_beaconLight</ANIM_NAME>
					<ANIM_CODE>(L:BreakerLightBeacon) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_pitotHeat" Node="BREAKER_pitotHeat"> 
				<UseInputEvent ID="BREAKER_pitotHeat"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_PITOT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_pitotHeat_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerPitotHeat,bool) ! (&gt;L:BreakerPitotHeat,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerPitotHeat,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerPitotHeat,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_pitotHeat</ANIM_NAME>
					<ANIM_CODE>(L:BreakerPitotHeat) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_navCom2" Node="BREAKER_navCom2"> 
				<UseInputEvent ID="BREAKER_navCom2"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_COMNAV2_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_navCom2_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ (L:BreakerNavCom2,bool) ! (&gt;L:BreakerNavCom2,bool) }
									els{ (L:BreakerNavCom1,bool) ! (&gt;L:BreakerNavCom1,bool) }
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ 1 (&gt;L:BreakerNavCom2,bool) }
									els{ 1 (&gt;L:BreakerNavCom1,bool) }
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ 0 (&gt;L:BreakerNavCom2,bool) }
									els{ 0 (&gt;L:BreakerNavCom1,bool) }
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_navCom2</ANIM_NAME>
					<ANIM_CODE>
						(L:AvionicsConfiguration) 0 ==
						if{ (L:BreakerNavCom2) ! 100 * }
						els{ (L:BreakerNavCom1) ! 100 * }
					</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_navCom1" Node="BREAKER_navCom1"> 
				<UseInputEvent ID="BREAKER_navCom1"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_COMNAV1_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_navCom1_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ (L:BreakerNavCom1,bool) ! (&gt;L:BreakerNavCom1,bool) }
									els{ (L:BreakerNavCom2,bool) ! (&gt;L:BreakerNavCom2,bool) }
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ 1 (&gt;L:BreakerNavCom1,bool) }
									els{ 1 (&gt;L:BreakerNavCom2,bool) }
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:AvionicsConfiguration) 0 ==
									if{ 0 (&gt;L:BreakerNavCom1,bool) }
									els{ 0 (&gt;L:BreakerNavCom2,bool) }
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_navCom1</ANIM_NAME>
					<ANIM_CODE>
						(L:AvionicsConfiguration,number) 0 ==
						if{ (L:BreakerNavCom1) ! 100 * }
						els{ (L:BreakerNavCom2) ! 100 * }
					</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_stallWarning" Node="BREAKER_stallWarning"> 
				<UseInputEvent ID="BREAKER_stallWarning"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_STALL_WARNING_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_stallWarning_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerWarningStall,bool) ! (&gt;L:BreakerWarningStall,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerWarningStall,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerWarningStall,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_stallWarning</ANIM_NAME>
					<ANIM_CODE>(L:BreakerWarningStall) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_starter" Node="BREAKER_starter"> 
				<UseInputEvent ID="BREAKER_starter"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_STARTER_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_starter_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerStarter,bool) ! (&gt;L:BreakerStarter,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerStarter,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerStarter,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_starter</ANIM_NAME>
					<ANIM_CODE>(L:BreakerStarter) ! 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Visibility_Code">
					<VISIBILITY_CODE>
						(L:Vis_RemoveBeforeFlightStarter) !
					</VISIBILITY_CODE>
				</UseTemplate> 
			</Component>
			<Component ID="BREAKER_autopilot" Node="BREAKER_autopilot"> 
				<UseInputEvent ID="BREAKER_autopilot"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_AUTOPILOT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_autopilot_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerAutopilot,bool) ! (&gt;L:BreakerAutopilot,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerAutopilot,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerAutopilot,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_autopilot</ANIM_NAME>
					<ANIM_CODE>(L:BreakerAutopilot) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="BREAKER_turnCoord" Node="BREAKER_turnCoord"> 
				<UseInputEvent ID="BREAKER_turnCoord"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.BRKR_TURNCOORD_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>BREAKER_turnCoord_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:BreakerGaugesTurnCoord,bool) ! (&gt;L:BreakerGaugesTurnCoord,bool)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:BreakerGaugesTurnCoord,bool)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:BreakerGaugesTurnCoord,bool)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BREAKER_turnCoord</ANIM_NAME>
					<ANIM_CODE>(L:BreakerGaugesTurnCoord) ! 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
		</Component>

		<!-- Maneuvering speed caption -->
		<Component ID="MANEUVRING_SPEED_129" Node="DASH_DECAL_SPEED129"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTanksPresent,bool) 1 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="MANEUVRING_SPEED_144" Node="DASH_DECAL_SPEED144"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTanksPresent,bool) 0 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="vis_vne0" Node="vis_vne0"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:VneVis,enum) 0 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="vis_vne1" Node="vis_vne1">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:VneVis,enum) 1 ==</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
		<!-- Maneuvering speed caption -->
		<Component ID="GPS_NAV_INOP" Node="DASH_Decal_GPS_INOP"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:GPSinop_Vis,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="GPS_NAV" Node="DASH_Decal_GPS_NAV"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:GPSinop_Vis,bool) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
	
		<!-- Illumination -->
		<Component ID="LIGHT_stall_warning" Node="DASH_LIGHT_stall_warning"> 
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:LightStallWarning,bool) 8 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<CameraTitle>Dash</CameraTitle>
	</RootComponent>
	
	<RootComponent ID="HANDLING_Yokes">
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>HANDLING_YOKE_Lever_StickForeAft</ANIM_NAME>
			<ANIM_CODE>
				(L:YokePitch_Anim,percent) /-/ 0.5 * 50 +
			</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>HANDLING_YOKE_Lever_StickLR</ANIM_NAME>
			<ANIM_CODE>
				(L:YokeBank_Anim,percent) /-/ 0.5 * 50 +
			</ANIM_CODE>
		</UseTemplate>
		
		<Component ID="Yoke_1_Visibility" Node="YOKE_left">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:TabletStation) 1 &gt;
					if{ 1 }
					els{
						(L:TabletStation) 0 ==
						if{ (L:YokeLeftVis) ! }
						els{
							(L:TabletHorizontalPosition) 60 &lt; 
							-33 25 (L:TabletVerticalPosition) rng and
							if{ 0 }
							els{ (L:YokeLeftVis) ! }
						}
					}
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>
		<Component ID="Yoke_2_Visibility" Node="YOKE_right_FA">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:TabletStation) 2 &lt;
					if{ (L:YokeRightVis) ! }
					els{ 1 }
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>
		<Component ID="Yoke_1_AP_Panel_Visibility" Node="Yoke_Autopilot_plate2">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:TabletStation) 1 &gt;
					if{ 1 }
					els{
						(L:TabletStation) 0 ==
						if{ (L:YokeLeftVis) }
						els{
							(L:TabletHorizontalPosition) 60 &lt;
							-36 25 (L:TabletVerticalPosition) rng and
							if{ 1 }
							els{ (L:YokeLeftVis) }
						}
					}
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>
		
		<Component ID="Yoke_Left_Hider" Node="YOKE_LEFT_VISIBILITY">
			<UseInputEvent ID="Yoke_Left_Hider"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.YOKEVISLEFT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Yoke_Left_Hider_Single</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:TabletHorizontalPosition) 60 &lt;
								-36 25 (L:TabletVerticalPosition) rng and
								if{
									 0 (&gt;L:TabletHorizontalPosition)
									 -39 (&gt;L:TabletVerticalPosition)
									 0 (&gt;L:YokeLeftVis)
									 
									 quit
								}
								
								(L:YokeLeftVis) ! (&gt;L:YokeLeftVis)
							}
				</CALLBACKCODE>
			</UseTemplate>	
		</Component>
		
		<Component ID="Yoke_Right_Hider" Node="YOKE_RIGHT_VISIBILITY">
			<UseTemplate Name="Yoke_Right_Hider_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:YokeRightVis)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:YokeRightVis) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>YokeRightVis</LOCAL_VAR_TO_WATCH_0>
				<NODE_ID>YOKE_RIGHT_VISIBILITY</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.YOKEVISLEFT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.YOKEVISLEFT_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.YOKEVIS_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.YOKEVIS_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Yoke_Right_Hider</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Yoke_Right_Hider</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>

		<Component ID="BungeeCord_Visibility" Node="BungeeCordActive"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:BungeeCordVis,bool)</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
				<LEFT_SINGLE_CODE>(L:ControlsLockLever,bool) ! (&gt;L:ControlsLockLever,bool)</LEFT_SINGLE_CODE>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.CONTROLSLOCKRELEASE</TOOLTIPID>
			</UseTemplate>
		</Component>
		
		<Component ID="BungeeCordStored_Visibility" Node="BungeeCordStored"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:BungeeCordVis,bool) !</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Interaction_LeftSingle_Code">
				<LEFT_SINGLE_CODE>(L:ControlsLockLever,bool) ! (&gt;L:ControlsLockLever,bool)</LEFT_SINGLE_CODE>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.CONTROLSLOCK</TOOLTIPID>
			</UseTemplate>
		</Component>
		<CameraTitle>Pedestal_Fwd</CameraTitle>
	</RootComponent>

	<RootComponent ID="HANDLING_Pedestal">
		<Component ID="HANDLING_RudderPedals">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>HANDLING_RudderPedals</ANIM_NAME>
				<ANIM_CODE>(L:Pedals_Anim,percent) /-/ 0.5 * 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="HANDLING_RudderPedals_Brake_L">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>HANDLING_RudderPedals_Brake_L</ANIM_NAME>
				<ANIM_CODE>(L:BrakeLPosition,percent)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="HANDLING_RudderPedals_Brake_R">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>HANDLING_RudderPedals_Brake_R</ANIM_NAME>
				<ANIM_CODE>(L:BrakeRPosition,percent)</ANIM_CODE>
			</UseTemplate>
		</Component>
	
		<!-- Landing gear indicator lamps -->
		<Component ID="LIGHT_landing_gear_amber" Node="PEDESTAL_LIGHT_LG_AMBER"> 
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>
					(L:LGlights,enum) 2 == if{ 
						10
						quit
					}
					(L:LGlights,enum) 4 == if{ 
						0.3
						quit
					}
					
					0
				</EMISSIVE_CODE>
				<NODE_ID>PEDESTAL_LIGHT_LG_AMBER</NODE_ID>
			</UseTemplate>
		</Component>
		
		<Component ID="LIGHT_landing_gear_green" Node="PEDESTAL_LIGHT_LG_GREEN"> 
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>
					(L:LGlights,enum) 1 == if{
						18 
						quit
					}
					(L:LGlights,enum) 3 == if{
						0.8
						quit
					}
					
					0
				</EMISSIVE_CODE>
				<NODE_ID>PEDESTAL_LIGHT_LG_GREEN</NODE_ID>
			</UseTemplate>
		</Component>
		<Component ID="Rudder_Trim">
			<UseTemplate Name="ASOBO_HANDLING_Knob_RudderTrim_Template">
			</UseTemplate>
		</Component>
		<CameraTitle>Pedestal</CameraTitle>
	</RootComponent>
	
	<RootComponent ID="HANDLING_Overhead"> 
		<Component ID="Elevator_Trim">
			<UseTemplate Name="A2A_HANDLING_ElevatorTrim_Template">
				<INTERACTION_TYPE>WHEEL</INTERACTION_TYPE>
				<AXIS>X</AXIS>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>HANDLING_trim_elevator_handle</ANIM_NAME>
				<ANIM_CODE>(A:ELEVATOR TRIM PCT,percent) 0.5 * 50 + (L:Aux1Shake) 10 / + 200 min 0 max</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_trim_elevator_indicator</ANIM_NAME>
				<ANIM_CODE>(A:ELEVATOR TRIM PCT,percent) 0.5 * 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="PortableLamp_Main" Node="PortableLamp_Main">
			<UseInputEvent ID="PortableLamp_Main"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.PORTABLE_LAMP_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>PortableLamp_Main_DragX</TOOLTIP_ENTRY_0>
				<TOOLTIP_ENTRY_1>PortableLamp_Main_DragY</TOOLTIP_ENTRY_1>
				<TOOLTIP_ENTRY_2>PortableLamp_Main_Toggle</TOOLTIP_ENTRY_2>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == if{
						quit
					}
					(M:Event) 'WheelDown' scmp 0 == if{
						quit
					}
					(M:Event) 'LeftDrag' scmp 0 == if{
						(L:PortableLamp_Main_ClickY) (M:Y) - (G:Var1) + 50 min -50 max (&gt;L:PortableLamp_Main_DragY)
						(L:PortableLamp_Main_ClickX) (M:X) - (G:Var2) + 50 min -50 max (&gt;L:PortableLamp_Main_DragX)
					}
						
					(M:Y) (&gt;L:PortableLamp_Main_ClickY)
					(L:PortableLamp_Main_DragY) (&gt;G:Var1)	
					
					(M:X) (&gt;L:PortableLamp_Main_ClickX)
					(L:PortableLamp_Main_DragX) (&gt;G:Var2)
					
					(M:Event) 'RightSingle' scmp 0 == if{
						(L:PortableLamp_ColourSwitch) ! (&gt;L:PortableLamp_ColourSwitch)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_PortableLamp_X</ANIM_NAME>
				<ANIM_CODE>(L:PortableLamp_Main_DragX) 50 +</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_PortableLamp_Y</ANIM_NAME>
				<ANIM_CODE>(L:PortableLamp_Main_DragY) 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="PortableLamp_ConeSwitch" Node="PortableLamp_ConeSwitch">
			<UseInputEvent ID="PortableLamp_ConeSwitch"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.PORTABLE_LAMP_CONE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>PortableLamp_ConeSwitch_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:PortableLamp_Mode) ! (&gt;L:PortableLamp_Mode)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_NAME>ANIM_PortableLamp_ConeSwitch</ANIM_NAME>
				<ANIM_CODE>(L:PortableLamp_Mode) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="PortableLamp_ColourSwitch" Node="PortableLamp_ColourSwitch">
			<UseInputEvent ID="PortableLamp_ColourSwitch"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.PORTABLE_LAMP_COLOUR_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>PortableLamp_ColourSwitch_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:PortableLamp_ColourSwitch) ! (&gt;L:PortableLamp_ColourSwitch)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_NAME>ANIM_PortableLamp_ColourSwitch</ANIM_NAME>
				<ANIM_CODE>(L:PortableLamp_ColourSwitch) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="PortableLamp_Dimmer" Node="PortableLamp_Dimmer">
			<UseInputEvent ID="PortableLamp_Dimmer"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.PORTABLE_LAMP_DIMMER_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>PortableLamp_Dimmer_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == if{
					(L:PortableLamp_Dimmer) 5 + 100 min (&gt;L:PortableLamp_Dimmer)
						quit
					}
					(M:Event) 'WheelDown' scmp 0 == if{
					(L:PortableLamp_Dimmer) 5 - 0 max (&gt;L:PortableLamp_Dimmer)
						quit
					}
					(M:Event) 'LeftDrag' scmp 0 == if{
						(L:PortableLamp_DimmerClick) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:PortableLamp_Dimmer)
					}
						
					(M:Y) (&gt;L:PortableLamp_DimmerClick)
					(L:PortableLamp_Dimmer) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_PortableLamp_Dimmer</ANIM_NAME>
				<ANIM_CODE>(L:PortableLamp_Dimmer)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="PortableLamp_Dimmer2" Node="PortableLamp_Dimmer2">
			<UseInputEvent ID="PortableLamp_Dimmer2"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.PORTABLE_LAMP_DIMMER_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>PortableLamp_Dimmer2_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == if{
					(L:PortableLamp_Dimmer) 5 + 100 min (&gt;L:PortableLamp_Dimmer)
						quit
					}
					(M:Event) 'WheelDown' scmp 0 == if{
					(L:PortableLamp_Dimmer) 5 - 0 max (&gt;L:PortableLamp_Dimmer)
						quit
					}
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:X) (L:PortableLamp_DimmerClick) - (G:Var1) + 100 min 0 max (&gt;L:PortableLamp_Dimmer)
					}
						
					(M:X) (&gt;L:PortableLamp_DimmerClick)
					(L:PortableLamp_Dimmer) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
		</Component>
		
		<Component ID="PortableLampLights"> 
			<UseTemplate Name="A2A_PortableLampLights_Template">
				<NODE_ID>LIGHT_White_Narrow</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="A2A_PortableLampLights_Template">
				<NODE_ID>LIGHT_White_Wide</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="A2A_PortableLampLights_Template">
				<NODE_ID>LIGHT_Red_Narrow</NODE_ID>
			</UseTemplate>
			<UseTemplate Name="A2A_PortableLampLights_Template">
				<NODE_ID>LIGHT_Red_Wide</NODE_ID>
			</UseTemplate>
		</Component>
		
		<Component ID="PortableLamp_LightRed" Node="PortableLamp_LightRed">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:PortableLamp_ColourSwitch)</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:PortableLamp_Dimmer) 5 / (L:PotentiometerMultipier,number) * (L:ElecPower) *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="PortableLamp_LightWhite" Node="PortableLamp_LightWhite">
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:PortableLamp_Dimmer) 5 * (L:PotentiometerMultipier,number) * (L:ElecPower) *</EMISSIVE_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:PortableLamp_ColourSwitch) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
		
		<Component ID="Visor_Left" Node="Visor_Left">
			<UseInputEvent ID="Visor_Left"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.VISOR_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Visor_Left_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == if{
						(L:VisorLeftPercent) 5 + 100 min (&gt;L:VisorLeftPercent)
						
						(L:TabletHorizontalPosition) 60 &lt;
						if{
							(L:VisorPositionTemp3) 0 &gt;
							(L:VisorLeftPercent) 65 &gt;= and
							if{ (L:TabletVerticalPosition) (L:VisorPositionTemp3) + (&gt;L:TabletVerticalPosition) }
							
							(L:VisorPositionTemp5) 0 &gt;
							18 64 (L:VisorLeftPercent) rng and
							if{ (L:VisorLeftPercent) (L:VisorPositionTemp5) 6.6 * - 18 max (&gt;L:VisorLeftPercent) }
						}
						quit
					}
					(M:Event) 'WheelDown' scmp 0 == if{
						(L:VisorLeftPercent) 5 - 0 max (&gt;L:VisorLeftPercent)
						
						(L:TabletHorizontalPosition) 60 &lt;
						if{
							(L:VisorPositionTemp3) 0 &gt;
							(L:VisorLeftPercent) 65 &gt;= and
							if{ (L:TabletVerticalPosition) (L:VisorPositionTemp3) + (&gt;L:TabletVerticalPosition) }
							
							(L:VisorPositionTemp5) 0 &gt;
							18 64 (L:VisorLeftPercent) rng and
							if{ (L:VisorLeftPercent) (L:VisorPositionTemp5) 6.6 * - 18 max (&gt;L:VisorLeftPercent) }
						}
						quit
					}
					(M:Event) 'LeftDrag' scmp 0 == if{
						1 (&gt;L:VisorLeftPercentDrag)
						(M:Y) (L:VisorLeftPercentClick) - (G:Var1) + 100 min 0 max (&gt;L:VisorLeftPercent)
					}
					
					(M:Y) (&gt;L:VisorLeftPercentClick)
					(L:VisorLeftPercent) (&gt;G:Var1)	
				
					(M:Event) 'LeftRelease' scmp 0 == if{
						0 (&gt;L:VisorLeftPercentDrag)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_visor_left</ANIM_NAME>
				<ANIM_CODE>(L:VisorLeftPercent) (L:SunVisor1Shake) + 100 min 0 max</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Visor_Right" Node="Visor_Right">
			<UseInputEvent ID="Visor_Right"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.VISOR_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Visor_Right_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'WheelUp' scmp 0 == if{
								(L:VisorRightPercent) 5 + 100 min (&gt;L:VisorRightPercent)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								(L:VisorRightPercent) 5 - 0 max (&gt;L:VisorRightPercent)
								quit
							}
							(M:Event) 'LeftDrag' scmp 0 == if{
								1 (&gt;L:VisorRightPercentDrag)
								(M:Y) (L:VisorRightPercentClick) - (G:Var1) + 100 min 0 max (&gt;L:VisorRightPercent)
							}
							
							(M:Y) (&gt;L:VisorRightPercentClick)
							(L:VisorRightPercent) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:VisorRightPercentDrag)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_visor_right</ANIM_NAME>
				<ANIM_CODE>(L:VisorRightPercent) (L:SunVisor2Shake) + 100 min 0 max</ANIM_CODE>
			</UseTemplate>
		</Component>
		

		<Component ID="WALKAROUND">
			<Component ID="GroundLevel">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>ANIM_GroundStuffVertical</ANIM_NAME>
					<ANIM_CODE>(L:WALKAROUND_GroundVertical) 50 +</ANIM_CODE>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>ANIM_GroundStuffLeftRight</ANIM_NAME>
					<ANIM_CODE>(L:WALKAROUND_GroundLeftRight) 5 * 50 +</ANIM_CODE>
				</UseTemplate>

				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>ANIM_GroundStuffFrontAft</ANIM_NAME>
					<ANIM_CODE>(L:WALKAROUND_GroundFrontAft) 5 * 50 +</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="WALKAROUND_ExternalDoorInteraction">	
				<Component ID="WALKAROUND_DoorHandle" Node="DoorHandle_CLICKSPOT"> 

					<UseInputEvent ID="WALKAROUND_DoorHandle"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_DOOR_HANDLE_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_DoorHandle_Single</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:Door1Handle) ! (&gt;L:Door1Handle)
							}								
						</CALLBACKCODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>200</ANIM_LAG>
						<ANIM_NAME>LEVER_door_handle_ext</ANIM_NAME>
						<ANIM_CODE>(L:Door1Handle,bool) 100 *</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<!-- <VISIBILITY_CODE>(L:TabletStation) 26 == (L:TabletStation) 2 == or if{ 1 } els{ 0 }</VISIBILITY_CODE> -->
						<VISIBILITY_CODE>1</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_DoorHandle2" Node="DoorHandle2_CLICKSPOT"> 

					<UseInputEvent ID="WALKAROUND_DoorLatch"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.DOOR_LATCH_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_DoorLatch_Single</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:Door1Latch) ! (&gt;L:Door1Latch)
							}								
						</CALLBACKCODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LENGTH>100</ANIM_LENGTH>
						<ANIM_NAME>LEVER_door_latch_ext</ANIM_NAME>
						<ANIM_CODE>(L:Door1Latch) 100 *</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 26 == (L:TabletStation) 2 == or if{ 1 } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>
			<Component ID="Stations_Input">
				<Component ID="WALKAROUND_Baggage_Clickspots">
					<Component ID="WALKAROUND_Baggage_1" Node="WALKAROUND_Baggage_1"> 
						<UseInputEvent ID="WALKAROUND_Baggage_1"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE1_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_1_Push</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:WALKAROUND_Baggage_1)
									1 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ 
									(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_1) ! (L:GroundItemsAvailable,bool) * } els{ 0 }
								}
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Baggage_2" Node="WALKAROUND_Baggage_2"> 
						<UseInputEvent ID="WALKAROUND_Baggage_2"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE2_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_2_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:WALKAROUND_Baggage_2)
									2 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ 
									(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_2) ! (L:GroundItemsAvailable,bool) * } els{ 0 }
								}
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Baggage_3" Node="WALKAROUND_Baggage_3"> 
						<UseInputEvent ID="WALKAROUND_Baggage_3"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE3_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_3_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:WALKAROUND_Baggage_3)
									3 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ 
									(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_3) ! (L:GroundItemsAvailable,bool) * } els{ 0 }
								}
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Baggage_4" Node="WALKAROUND_Baggage_4"> 
						<UseInputEvent ID="WALKAROUND_Baggage_4"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE4_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_4_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:WALKAROUND_Baggage_4)
									4 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ 
									(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_4) ! (L:GroundItemsAvailable,bool) * } els{ 0 }
								}
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Baggage_5" Node="WALKAROUND_Baggage_5"> 
						<UseInputEvent ID="WALKAROUND_Baggage_5"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE5_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_5_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:WALKAROUND_Baggage_5)
									5 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ 
									(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_5) ! (L:GroundItemsAvailable,bool) * } els{ 0 }
								}
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
				</Component>
				<Component ID="WALKAROUND_Baggage_On_Ground">
					<Component ID="WALKAROUND_Bag_1_Ground" Node="WALKAROUND_Bag_1_Ground"> 
						<UseInputEvent ID="WALKAROUND_Baggage_1"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE1_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_1_Push</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									25 75 (L:WALKAROUND_BaggageDoorAnim) rng
									if{
										1 (&gt;L:WALKAROUND_Baggage_1)
										1 (&gt;L:WALKAROUND_Baggage_Click)
									}
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ (L:WALKAROUND_Baggage_1) ! (L:GroundItemsAvailable,bool) * }
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_2_Ground" Node="WALKAROUND_Bag_2_Ground"> 
						<UseInputEvent ID="WALKAROUND_Baggage_2"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE2_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_2_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									25 75 (L:WALKAROUND_BaggageDoorAnim) rng
									if{
										1 (&gt;L:WALKAROUND_Baggage_2)
										2 (&gt;L:WALKAROUND_Baggage_Click)
									}
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ (L:WALKAROUND_Baggage_2) ! (L:GroundItemsAvailable,bool) * }
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_3_Ground" Node="WALKAROUND_Bag_3_Ground"> 
						<UseInputEvent ID="WALKAROUND_Baggage_3"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE3_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_3_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									25 75 (L:WALKAROUND_BaggageDoorAnim) rng
									if{
										1 (&gt;L:WALKAROUND_Baggage_3)
										3 (&gt;L:WALKAROUND_Baggage_Click)
									}
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ (L:WALKAROUND_Baggage_3) ! (L:GroundItemsAvailable,bool) * }
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_4_Ground" Node="WALKAROUND_Bag_4_Ground"> 
						<UseInputEvent ID="WALKAROUND_Baggage_4"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE4_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_4_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									25 75 (L:WALKAROUND_BaggageDoorAnim) rng
									if{
										1 (&gt;L:WALKAROUND_Baggage_4)
										4 (&gt;L:WALKAROUND_Baggage_Click)
									}
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ (L:WALKAROUND_Baggage_4) ! (L:GroundItemsAvailable,bool) * }
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_5_Ground" Node="WALKAROUND_Bag_5_Ground"> 
						<UseInputEvent ID="WALKAROUND_Baggage_5"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE5_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_5_Push</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									25 75 (L:WALKAROUND_BaggageDoorAnim) rng
									if{
										1 (&gt;L:WALKAROUND_Baggage_5)
										5 (&gt;L:WALKAROUND_Baggage_Click)
									}
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:TabletStation) 26 == if{ (L:WALKAROUND_Baggage_5) ! (L:GroundItemsAvailable,bool) * }
								els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
				</Component>
				<Component ID="WALKAROUND_Bags">	
					<Component ID="WALKAROUND_Bag_1" Node="WALKAROUND_Bag_1"> 
						<UseInputEvent ID="WALKAROUND_Bag_1"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE1_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Bag_1_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:WALKAROUND_Baggage_1)
									1 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_1) } els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_2" Node="WALKAROUND_Bag_2"> 
						<UseInputEvent ID="WALKAROUND_Bag_2"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE2_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Bag_2_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:WALKAROUND_Baggage_2)
									2 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_2) } els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_3" Node="WALKAROUND_Bag_3"> 
						<UseInputEvent ID="WALKAROUND_Bag_3"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE3_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Bag_3_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:WALKAROUND_Baggage_3)
									3 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_3) } els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_4" Node="WALKAROUND_Bag_4"> 
						<UseInputEvent ID="WALKAROUND_Bag_4"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE4_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Bag_4_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:WALKAROUND_Baggage_4)
									4 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_4) } els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Bag_5" Node="WALKAROUND_Bag_5"> 
						<UseInputEvent ID="WALKAROUND_Bag_5"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGE5_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Bag_5_Push</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:WALKAROUND_Baggage_5)
									5 (&gt;L:WALKAROUND_Baggage_Click)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>
								(L:WALKAROUND_BaggageDoorAnim) 5 &gt; if{ (L:WALKAROUND_Baggage_5) } els{ 0 }
							</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
				</Component>
				<Component ID="WALKAROUND_Baggage_Misc">	
					<Component ID="WALKAROUND_Baggage_Door" Node="WALKAROUND_Baggage_Door"> 

						<UseInputEvent ID="WALKAROUND_Baggage_Door"/>			
						
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BAGGAGEDOOR_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Baggage_Door</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:WALKAROUND_BaggageDoor_Click) ! (&gt;L:WALKAROUND_BaggageDoor_Click)
								}								
							</CALLBACKCODE>
						</UseTemplate>
						<UseTemplate Name="ASOBO_GT_Anim_Code">
							<ANIM_NAME>ANIM_BaggageDoor</ANIM_NAME>
							<ANIM_CODE>(L:WALKAROUND_BaggageDoorAnim)</ANIM_CODE>
						</UseTemplate>
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 26 == (L:TabletStation) 2 == or if{ (L:GroundItemsAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
				</Component>

				<Component ID="WALKAROUND_Misc_Items"> 
					<Component ID="WALKAROUND_Collision_Block" Node="WALKAROUND_Collision_Block"> 
						<UseInputEvent ID="WALKAROUND_Collision_Block"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE></TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_Collision_BlockSingle</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR></CURSOR>

							<CALLBACKCODE>					
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 1 &gt; if{ 1 } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					
					<Component ID="WALKAROUND_Rag" Node="WALKAROUND_Rag"> 
						<UseInputEvent ID="WALKAROUND_Rag"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_RAG_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_RagSingle</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:F_RagIntake,bool)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 12 == if{ (L:F_RagIntake,bool) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					
					<Component ID="WALKAROUND_PitotCover" Node="WALKAROUND_PitotCover"> 
						<UseInputEvent ID="WALKAROUND_PitotCover"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_PITOT_COVER_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_PitotCoverSingle</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:PitotTubeCover)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:WalkaroundAvailable,bool) (L:PitotTubeCover) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_Pitot" Node="WALKAROUND_Pitot"> 
						<UseInputEvent ID="WALKAROUND_Pitot"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_PITOT_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_PitotSingle</TOOLTIP_ENTRY_0>
							<TOOLTIP_ENTRY_1>WALKAROUND_PitotHold</TOOLTIP_ENTRY_1>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:PitotHeatCheck)
								}
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:PitotHeatCheck)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:WalkaroundAvailable,bool) (L:PitotTubeCover) ! * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					
					<Component ID="WALKAROUND_FuelDrains">
						<Component ID="WALKAROUND_BottleL" Node="WALKAROUND_BottleL">
							<UseInputEvent ID="WALKAROUND_BottleL"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FUELDRAIN_L_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_BottleL_Drag</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>					
									(M:Event) 'LeftDrag' scmp 0 == if{
										(L:WALKAROUND_BottleL_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:WALKAROUND_BottleL_Drag)
									}
									
									(M:Y) (&gt;L:WALKAROUND_BottleL_Click)
									(L:WALKAROUND_BottleL_Drag) (&gt;G:Var1)	
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="A2A_Anim_Code_Base">
								<ANIM_NAME>ANIM_BOTTLE_L_Position</ANIM_NAME>
								<ANIM_CODE>(L:WALKAROUND_BottleL_Drag)</ANIM_CODE>
								<ANIM_LAG>0</ANIM_LAG>
							</UseTemplate>
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 20 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_BottleC" Node="WALKAROUND_BottleC">
							<UseInputEvent ID="WALKAROUND_BottleC"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FUELDRAIN_C_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_BottleC_Drag</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>
									(L:FuelCheckPanel) if{
										(M:Event) 'LeftDrag' scmp 0 == if{
											(L:WALKAROUND_BottleC_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:WALKAROUND_BottleC_Drag)
										}
										
										(M:Y) (&gt;L:WALKAROUND_BottleC_Click)
										(L:WALKAROUND_BottleC_Drag) (&gt;G:Var1)	
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="A2A_Anim_Code_Base">
								<ANIM_NAME>ANIM_BOTTLE_C_Position</ANIM_NAME>
								<ANIM_CODE>(L:WALKAROUND_BottleC_Drag)</ANIM_CODE>
								<ANIM_LAG>0</ANIM_LAG>
							</UseTemplate>
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 11 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>

						<Component ID="WALKAROUND_FuelCheckPanel" Node="WALKAROUND_FuelCheckPanel">
							<UseInputEvent ID="INPUT_FuelCheckPanel"/>			
								<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FUELINSPECTION_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>FuelCheckPanel</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>	
									
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelCheckPanel) 1 == if{
											(L:WALKAROUND_BottleC_Drag) 0 == if{
												0 (&gt;L:FuelCheckPanel)
											}
										}
										els{
											1 (&gt;L:FuelCheckPanel)
										}
								</CALLBACKCODE>
							</UseTemplate>	
							
							<UseTemplate Name="ASOBO_GT_Anim_Code">
								<ANIM_LAG>0</ANIM_LAG>
								<ANIM_NAME>ANIM_FuelCheckPanel</ANIM_NAME>
								<ANIM_CODE>(L:FuelCheckPanelAnim)</ANIM_CODE>
							</UseTemplate>
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 11 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_BottleR" Node="WALKAROUND_BottleR">
							<UseInputEvent ID="WALKAROUND_BottleR"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FUELDRAIN_R_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_BottleR_Drag</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>					
									(M:Event) 'LeftDrag' scmp 0 == if{
										(L:WALKAROUND_BottleR_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:WALKAROUND_BottleR_Drag)
									}
									
									(M:Y) (&gt;L:WALKAROUND_BottleR_Click)
									(L:WALKAROUND_BottleR_Drag) (&gt;G:Var1)	

								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="A2A_Anim_Code_Base">
								<ANIM_NAME>ANIM_BOTTLE_R_Position</ANIM_NAME>
								<ANIM_CODE>(L:WALKAROUND_BottleR_Drag)</ANIM_CODE>
								<ANIM_LAG>0</ANIM_LAG>
							</UseTemplate>
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 5 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
					</Component>
					
					<Component ID="WALKAROUND_StaticPorts"> 
						<Component ID="WALKAROUND_StaticPortL_Tape" Node="WALKAROUND_StaticPortL_Tape"> 
							<UseInputEvent ID="WALKAROUND_StaticPortL_Tape"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_STATICPORT_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_StaticPortL_TapeSingle</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										0 (&gt;L:F_StaticPort1)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 23 == if{ (L:F_StaticPort1,bool) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_StaticPortR_Tape" Node="WALKAROUND_StaticPortR_Tape"> 
							<UseInputEvent ID="WALKAROUND_StaticPortR_Tape"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_STATICPORT_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_StaticPortR_TapeSingle</TOOLTIP_ENTRY_0>
								
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>

								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										0 (&gt;L:F_StaticPort2)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 25 == if{ (L:F_StaticPort2,bool) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
					</Component>
					
					<Component ID="WALKAROUND_TieDowns"> 
						<Component ID="WALKAROUND_TieDownL_TOOLTIP" Node="WALKAROUND_TieDownL_TOOLTIP"> 
							<UseInputEvent ID="WALKAROUND_TieDownL"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNL_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownLSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										0 (&gt;L:vis_WingLeft_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:vis_WingLeft_TieDown) (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_TieDownL" Node="WALKAROUND_TieDownL"> 
							<UseInputEvent ID="WALKAROUND_TieDownL"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNL_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownLSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										1 (&gt;L:vis_WingLeft_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:vis_WingLeft_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="vis_WingLeft_TieDown_Hook" Node="TieDownL_Hook">
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:vis_WingLeft_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_TieDownR_TOOLTIP" Node="WALKAROUND_TieDownR_TOOLTIP"> 
							<UseInputEvent ID="WALKAROUND_TieDownR"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNR_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownRSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										0 (&gt;L:vis_WingRight_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								 <VISIBILITY_CODE>(L:TabletStation) 8 == if{  (L:vis_WingRight_TieDown) (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_TieDownR" Node="WALKAROUND_TieDownR"> 
							<UseInputEvent ID="WALKAROUND_TieDownR"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNR_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownRSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										1 (&gt;L:vis_WingRight_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								 <VISIBILITY_CODE>(L:TabletStation) 8 == if{ (L:vis_WingRight_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="vis_WingRight_TieDown_Hook" Node="TieDownR_Hook">
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 8 == if{ (L:vis_WingRight_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_TieDownC_TOOLTIP" Node="WALKAROUND_TieDownC_TOOLTIP"> 
							<UseInputEvent ID="WALKAROUND_TieDownC"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNC_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownCSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										0 (&gt;L:vis_Tail_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 24 == if{ (L:vis_Tail_TieDown) (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="WALKAROUND_TieDownC" Node="WALKAROUND_TieDownC"> 
							<UseInputEvent ID="WALKAROUND_TieDownC"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
								<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TIEDOWNC_TITLE)</TOOLTIP_TITLE>
								<TOOLTIP_ENTRY_0>WALKAROUND_TieDownCSingle</TOOLTIP_ENTRY_0>
								<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
								<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
								<CURSOR>Grab</CURSOR>
								<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										1 (&gt;L:vis_Tail_TieDown)
									}
								</CALLBACKCODE>
							</UseTemplate>	
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 24 == if{ (L:vis_Tail_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
						<Component ID="vis_Tail_TieDown_Hook" Node="TieDownC_Hook">
							<UseTemplate Name="ASOBO_GT_Visibility">
								<VISIBILITY_CODE>(L:TabletStation) 24 == if{ (L:vis_Tail_TieDown) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
							</UseTemplate>
						</Component>
					</Component>
					
					
					<Component ID="WALKAROUND_StallWarningTab" Node="WALKAROUND_StallWarningTab"> 
						<UseInputEvent ID="WALKAROUND_StallWarningTab"/>			
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_STALLWARNINGTAB_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_StallWarningTabSingle</TOOLTIP_ENTRY_0>
							
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>

							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 ==
								if{
									1 (&gt;L:Action_StallWarning,bool)
									quit
								}
								
								(M:Event) 'LeftRelease' scmp 0 ==
								if{	0 (&gt;L:Action_StallWarning,bool) }
							</CALLBACKCODE>
						</UseTemplate>
						<UseTemplate Name="ASOBO_GT_Anim_Code">
							<ANIM_LAG>0</ANIM_LAG>
							<ANIM_NAME>ANIM_StallWarningTab</ANIM_NAME>
							<ANIM_CODE>(L:Action_StallWarning,bool) 100 *</ANIM_CODE>
						</UseTemplate>
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 16 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					
					
					<Component ID="WALKAROUND_WheelChockL_TOOLTIP" Node="WALKAROUND_WheelChockL_TOOLTIP"> 
						<UseInputEvent ID="WALKAROUND_WheelChockL"/>	
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_WHEELCHOCKL_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_WheelChockLSingle</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:vis_WheelChockL)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 15 == if{ (L:vis_WheelChockLAnim) (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
						<UseTemplate Name="A2A_GEAR_Left_Template">
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_WheelChockL" Node="WALKAROUND_WheelChockL"> 
						<UseInputEvent ID="WALKAROUND_WheelChockL"/>	
						<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_WHEELCHOCKL_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_WheelChockLSingle</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:vis_WheelChockL)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 15 == if{  (L:vis_WheelChockLAnim) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
					
					<Component ID="WALKAROUND_WheelChockR_TOOLTIP" Node="WALKAROUND_WheelChockR_TOOLTIP"> 
						<UseInputEvent ID="WALKAROUND_WheelChockR"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_WHEELCHOCKR_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_WheelChockRSingle</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									0 (&gt;L:vis_WheelChockR)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 10 == if{ (L:vis_WheelChockRAnim) (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
						<UseTemplate Name="A2A_GEAR_Right_Template">
						</UseTemplate>
					</Component>
					<Component ID="WALKAROUND_WheelChockR" Node="WALKAROUND_WheelChockR"> 
						<UseInputEvent ID="WALKAROUND_WheelChockR"/>			
							<UseTemplate Name="ASOBO_GT_MouseRect">
							<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_WHEELCHOCKR_TITLE)</TOOLTIP_TITLE>
							<TOOLTIP_ENTRY_0>WALKAROUND_WheelChockRSingle</TOOLTIP_ENTRY_0>
							<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
							<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
							<CURSOR>Grab</CURSOR>
							<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									1 (&gt;L:vis_WheelChockR)
								}
							</CALLBACKCODE>
						</UseTemplate>	
						<UseTemplate Name="ASOBO_GT_Visibility">
							<VISIBILITY_CODE>(L:TabletStation) 10 == if{ (L:vis_WheelChockRAnim) ! (L:GroundItemsAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
						</UseTemplate>
					</Component>
				</Component> 

				<Component ID="WALKAROUND_FlapR" Node="WALKAROUND_FlapR"> 

					<UseInputEvent ID="WALKAROUND_FlapR"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FLAP_RIGHT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_FlapRShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftDrag' scmp 0 == if{
								(M:Y) (L:WALKAROUND_FlapR_Click) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_FlapR_Drag)
							}
							
							(M:Y) (&gt;L:WALKAROUND_FlapR_Click)
							(L:WALKAROUND_FlapR_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_FlapR_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 2 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>

				<Component ID="WALKAROUND_AileronR" Node="WALKAROUND_AileronR"> 

					<UseInputEvent ID="WALKAROUND_AileronR"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_AILERON_RIGHT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_AileronRShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>
							(M:Event) 'LeftDrag' scmp 0 == if{
								(M:Y) (L:WALKAROUND_AileronR_Click) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_AileronR_Drag)
							}
							
							(M:Y) (&gt;L:WALKAROUND_AileronR_Click)
							(L:WALKAROUND_AileronR_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_AileronR_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 3 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_Rudder" Node="WALKAROUND_Rudder"> 

					<UseInputEvent ID="WALKAROUND_Rudder"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_RUDDER_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_RudderShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>
							(M:Event) 'LeftDrag' scmp 0 == if{
								(L:WALKAROUND_Rudder_Click) (M:X) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_Rudder_Drag)
							}
							
							(M:X) (&gt;L:WALKAROUND_Rudder_Click)
							(L:WALKAROUND_Rudder_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_Rudder_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 24 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_Elevator" Node="WALKAROUND_Elevator"> 

					<UseInputEvent ID="WALKAROUND_Elevator"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_ELEVATOR_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_ElevatorShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftDrag' scmp 0 == if{
								(M:Y) (L:WALKAROUND_Elevator_Click) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_Elevator_Drag)
							}
							
							(M:Y) (&gt;L:WALKAROUND_Elevator_Click)
							(L:WALKAROUND_Elevator_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_Elevator_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 24 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_AileronL" Node="WALKAROUND_AileronL"> 

					<UseInputEvent ID="WALKAROUND_AileronL"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_AILERON_LEFT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_AileronLShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>
							(M:Event) 'LeftDrag' scmp 0 == if{
								(M:Y) (L:WALKAROUND_AileronL_Click) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_AileronL_Drag)
							}
							
							(M:Y) (&gt;L:WALKAROUND_AileronL_Click)
							(L:WALKAROUND_AileronL_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_AileronL_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 21 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_FlapL" Node="WALKAROUND_FlapL"> 

					<UseInputEvent ID="WALKAROUND_FlapL"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_FLAP_LEFT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_FlapLShake</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftDrag' scmp 0 == if{
								(M:Y) (L:WALKAROUND_FlapL_Click) - (G:Var1) + 100 min -100 max (&gt;L:WALKAROUND_FlapL_Drag)
							}
							
							(M:Y) (&gt;L:WALKAROUND_FlapL_Click)
							(L:WALKAROUND_FlapL_Drag) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:WALKAROUND_FlapL_Drag)
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 22 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_LandingLightL" Node="WALKAROUND_LandingLightL"> 

					<UseInputEvent ID="WALKAROUND_LandingLightL"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_LANDINGLIGHT_LEFT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_LandingLightLSingle</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftSingle' scmp 0 == if{
								0 (&gt;L:F_LandingLight1,bool) 
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 17 == (L:TabletStation) 18 == or if{ (L:F_LandingLight1,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_LandingLightR" Node="WALKAROUND_LandingLightR"> 

					<UseInputEvent ID="WALKAROUND_LandingLightR"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_LANDINGLIGHT_RIGHT_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_LandingLightRSingle</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftSingle' scmp 0 == if{
								0 (&gt;L:F_LandingLight2,bool) 
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 7 == (L:TabletStation) 6 == or if{ (L:F_LandingLight2,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_TailAntennaBent" Node="WALKAROUND_TailAntennaBent"> 

					<UseInputEvent ID="WALKAROUND_TailAntennaBent"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TAIL_ANTENNA_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_TailAntennaBentSingle</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftSingle' scmp 0 == if{
								0 (&gt;L:F_AntennaNav,bool) 
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 1 &gt; if{ (L:F_AntennaNav,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_BellyAntennaBent" Node="WALKAROUND_BellyAntennaBent"> 

					<UseInputEvent ID="WALKAROUND_BellyAntennaBent"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_BELLY_ANTENNA_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_BellyAntennaBentSingle</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftSingle' scmp 0 == if{
								0 (&gt;L:F_AntennaCom2,bool) 
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 1 &gt; if{ (L:F_AntennaCom2,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_TopAntennaBent" Node="WALKAROUND_TopAntennaBent"> 

					<UseInputEvent ID="WALKAROUND_TopAntennaBent"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_TOP_ANTENNA_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>WALKAROUND_TopAntennaBentSingle</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>	
							(M:Event) 'LeftSingle' scmp 0 == if{
								0 (&gt;L:F_AntennaCom1,bool) 
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 1 &gt; if{ (L:F_AntennaCom1,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>
		
			<Component ID="OilInspectionPanel">
				<Component ID="WALKAROUND_OilInspectionPanel"  Node="WALKAROUND_OilInspectionPanel"> 

					<UseInputEvent ID="INPUT_OilInspectionPanel"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_OILINSPECTION_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>OilInspectionPanel_Cover</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:OilInspectionStick) 0 == if{
									(L:OilInspectionPanel) ! (&gt;L:OilInspectionPanel)
									quit
								}
								els{
									(L:OilInspectionPanel) 0 == if{
									0 (&gt;L:OilInspectionPanel)
									}
								}
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_OilInspectionPanel</ANIM_NAME>
						<ANIM_CODE>(L:OilInspectionPanelAnim) (L:Eng1_ElectricHeater,bool) 5 * +</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 13 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="WALKAROUND_OilInspectionStick"  Node="WALKAROUND_OilInspectionStick"> 

					<UseInputEvent ID="INPUT_OilInspectionStick"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.WKRND_OILINSPECTIONSTICK_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>OilInspectionStick</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
									(L:OilInspectionStick) ! (&gt;L:OilInspectionStick)
								}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_OilInspectionStick</ANIM_NAME>
						<ANIM_CODE>(L:OilInspectionStickAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<!-- <VISIBILITY_CODE>(L:TabletStation) 13 == if{ (L:OilInspectionPanel, bool) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE> -->
						<VISIBILITY_CODE>(L:OilInspectionPanelAnim) 0 == if{ 0 } els{ 1 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>


			<Component ID="FuelTanks">
				<Component ID="COVER_FuelTankLeft" Node="COVER_FuelTankLeft_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTankLeft"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTankLeft_Cover</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelTankOpeningLeftCap) 0 == if{
											(L:FuelTankOpeningLeft) ! (&gt;L:FuelTankOpeningLeft)
											quit
										}
										els{
											(L:FuelTankOpeningLeft) 0 == if{
												0 (&gt;L:FuelTankOpeningLeft)
											}
										}
									}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankLeft</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningLeftAnim)</ANIM_CODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankLeftLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningLeftLockAnim)</ANIM_CODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 14 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="COVER_FuelTankLeft_Cap" Node="COVER_FuelTankLeft_Cap_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTankLeftCap"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_CAP_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTankLeft_Cap</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:FuelTankOpeningLeft) 1 == if{
									(L:FuelTankOpeningLeftCap) ! (&gt;L:FuelTankOpeningLeftCap)
									quit
								}
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankLeft_Cap</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningLeftCapAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankLeft_CapLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningLeftCapLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 14 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				
				<Component ID="COVER_FuelTankRight"  Node="COVER_FuelTankRight_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTankRight"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTankRight_Cover</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:FuelTankOpeningRightCap) 0 == if{
									(L:FuelTankOpeningRight) ! (&gt;L:FuelTankOpeningRight)
									quit
								}
								els{
									(L:FuelTankOpeningRight) 0 == if{
										0 (&gt;L:FuelTankOpeningRight)
									}
								}
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankRight</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningRightAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankRightLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningRightLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 9 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="COVER_FuelTankRight_Cap"  Node="COVER_FuelTankRight_Cap_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTankRightCap"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_CAP_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTankRight_Cap</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:FuelTankOpeningRight) 1 == if{
									(L:FuelTankOpeningRightCap) ! (&gt;L:FuelTankOpeningRightCap)
									quit
								}
							}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankRight_Cap</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningRightCapAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTankRight_CapLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTankOpeningRightCapLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 9 == if{ (L:WalkaroundAvailable,bool) } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				
				<Component ID="COVER_FuelTipTankLeft" Node="COVER_FuelTipTankLeft_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTipTankLeft"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTipTankLeft_Cover</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelTipTankOpeningLeftCap) 0 == if{
											(L:FuelTipTankOpeningLeft) ! (&gt;L:FuelTipTankOpeningLeft)
											quit
										}
										els{
											(L:FuelTipTankOpeningLeft) 0 == if{
												0 (&gt;L:FuelTipTankOpeningLeft)
											}
										}
									}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankLeftLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningLeftLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankLeft</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningLeftAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 19 == if{ (L:TipTanksPresent,bool) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="COVER_FuelTipTankLeft_Cap"  Node="COVER_FuelTipTankLeft_Cap_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTipTankLeftCap"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_CAP_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTipTankLeft_Cap</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelTipTankOpeningLeft) 1 == if{
											(L:FuelTipTankOpeningLeftCap) ! (&gt;L:FuelTipTankOpeningLeftCap)
											quit
										}
										els{
											(L:FuelTipTankOpeningLeftCap) 1 == if{
												0 (&gt;L:FuelTipTankOpeningLeftCap)
											}
										}
									}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankLeft_Cap</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningLeftCapAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankLeft_CapLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningLeftCapLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 19 == if{ (L:TipTanksPresent,bool) (L:FuelTipTankOpeningLeft) * (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				
				<Component ID="COVER_FuelTipTankRight"  Node="COVER_FuelTipTankRight_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTipTankRight"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTipTankRight_Cover</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelTipTankOpeningRightCap) 0 == if{
											(L:FuelTipTankOpeningRight) ! (&gt;L:FuelTipTankOpeningRight)
											quit
										}
										els{
											(L:FuelTipTankOpeningRight) 0 == if{
												0 (&gt;L:FuelTipTankOpeningRight)
											}
										}
									}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankRight</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningRightAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankRightLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningRightLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 4 == if{ (L:TipTanksPresent) (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
				<Component ID="COVER_FuelTipTankRight_Cap" Node="COVER_FuelTipTankRight_Cap_TOOLTIP"> 

					<UseInputEvent ID="INPUT_FuelTipTankRightCap"/>			
					
					<UseTemplate Name="ASOBO_GT_MouseRect">
						<TOOLTIP_TITLE>(R:1:@TT_Package.FUEL_TANK_CAP_TITLE)</TOOLTIP_TITLE>
						<TOOLTIP_ENTRY_0>FuelTipTankRight_Cap</TOOLTIP_ENTRY_0>
						
						<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
						<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
						<CURSOR>Grab</CURSOR>

						<CALLBACKCODE>					
									(M:Event) 'LeftSingle' scmp 0 == if{
										(L:FuelTipTankOpeningRight) 1 == if{
											(L:FuelTipTankOpeningRightCap) ! (&gt;L:FuelTipTankOpeningRightCap)
											quit
										}
										els{
											(L:FuelTipTankOpeningRightCap) 1 == if{
												0 (&gt;L:FuelTipTankOpeningRightCap)
											}
										}
									}
						</CALLBACKCODE>
					</UseTemplate>	
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankRight_Cap</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningRightCapAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Anim_Code">
						<ANIM_LAG>0</ANIM_LAG>
						<ANIM_NAME>ANIM_FuelTipTankRight_CapLock</ANIM_NAME>
						<ANIM_CODE>(L:FuelTipTankOpeningRightCapLockAnim)</ANIM_CODE>
					</UseTemplate>
					<UseTemplate Name="ASOBO_GT_Visibility">
						<VISIBILITY_CODE>(L:TabletStation) 4 == if{ (L:TipTanksPresent) (L:FuelTipTankOpeningRight) * (L:WalkaroundAvailable,bool) * } els{ 0 }</VISIBILITY_CODE>
					</UseTemplate>
				</Component>
			</Component>
			
			
			
			
		</Component>
		
		<!-- Illumination -->
		<Component ID="SWITCH_Light_Flood_Front" Node="SWITCH_Light_Flood_Front">
			<UseInputEvent ID="SWITCH_Light_Flood_Front"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_LIGHT_FLOOD_FRONT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_Light_Flood_Front_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:CabinFlood1LightSwitch) ! (&gt;L:CabinFlood1LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_1_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelUp' scmp 0 == if{
								1 (&gt;L:CabinFlood1LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_1_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								0 (&gt;L:CabinFlood1LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_1_LIGHT_SWITCH)
								quit
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>SWITCH_Light_Flood_Front</ANIM_NAME>
				<ANIM_CODE>(L:CabinFlood1LightSwitch) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="SWITCH_Light_Flood_Back" Node="SWITCH_Light_Flood_Back">
			<UseInputEvent ID="SWITCH_Light_Flood_Back"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_LIGHT_FLOOD_REAR_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_Light_Flood_Back_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:CabinFlood2LightSwitch) ! (&gt;L:CabinFlood2LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_2_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelUp' scmp 0 == if{
								1 (&gt;L:CabinFlood2LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_2_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								0 (&gt;L:CabinFlood2LightSwitch)
								(&gt;H:A2A_CABIN_FLOOD_2_LIGHT_SWITCH)
								quit
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>SWITCH_Light_Flood_Back</ANIM_NAME>
				<ANIM_CODE>(L:CabinFlood2LightSwitch) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="SWITCH_Light_Red" Node="SWITCH_Light_Red">
			<UseInputEvent ID="SWITCH_Light_Red"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_LIGHT_FLOOD_RED_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_Light_Red_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:CabinRedLightSwitch) ! (&gt;L:CabinRedLightSwitch)
								(&gt;H:A2A_CABIN_RED_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelUp' scmp 0 == if{
								1 (&gt;L:CabinRedLightSwitch)
								(&gt;H:A2A_CABIN_RED_LIGHT_SWITCH)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								0 (&gt;L:CabinRedLightSwitch)
								(&gt;H:A2A_CABIN_RED_LIGHT_SWITCH)
								quit
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>SWITCH_Light_Red</ANIM_NAME>
				<ANIM_CODE>(L:CabinRedLightSwitch) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<CameraTitle>Overhead</CameraTitle>
	</RootComponent>
	
	<RootComponent ID="HANDLING_Door"> 
		<Component ID="elbow_rest_CLICKSPOT" Node="elbow_rest_CLICKSPOT"> 
			<UseInputEvent ID="LEVER_door_handle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_DOOR_HANDLE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Door_Handle_toggle</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						(L:Door1Handle,bool) ! (&gt;L:Door1Handle,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>0</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_door_handle" Node="LEVER_door_handle"> 
			<UseInputEvent ID="LEVER_door_handle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_DOOR_HANDLE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Door_Handle_toggle</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						(L:Door1Handle,bool) ! (&gt;L:Door1Handle,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>200</ANIM_LAG>
				<ANIM_NAME>LEVER_door_handle</ANIM_NAME>
				<ANIM_CODE>(L:Door1Handle,bool) 100 * 5 max 95 min (L:Aux2Shake) 5 * + 100 min 0 max</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="WalkwayClickspot" Node="WalkwayClickspot"> 
			<UseInputEvent ID="WalkwayClickspot"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.DOOR_EXIT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>WalkwayClickspot_toggle</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{ 1 (&gt;L:LeaveTheAircraft,bool) }
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>(L:ExitOpen1,percent) 75 &gt; if{ 1 } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_door_latch" Node="LEVER_door_latch">
			<UseTemplate Name="LEVER_door_latch_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:Door1Latch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:Door1Latch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>Door1Latch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>LEVER_door_latch</ANIM_NAME>
				<NODE_ID>LEVER_door_latch</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.DOOR_LATCH_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.DOOR_LATCH_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.DOOR_LATCH_STATE_0)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.DOOR_LATCH_STATE_1)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>LEVER_door_latch</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_door_latch</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="EXIT_door">
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_NAME>EXIT_door</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 1 ==
					if{	(L:ExitOpen1,percent) }
					els{ 0 }
				</ANIM_CODE>
			</UseTemplate>
		</Component>

		<CameraTitle>Door</CameraTitle>
	</RootComponent>
	
	<RootComponent ID="HANDLING_Floor"> 
		<Component ID="SWITCH_emergency_gear" Node="LEVER_Ldg_Emerg_Handle">
			<UseInputEvent ID="SWITCH_emergency_gear"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_LDG_GEAR_EMERG_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_emergency_gear_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
							(M:Event) 'LeftSingle' scmp 0 == if{
								(L:EmergencyGearLever) ! (&gt;L:EmergencyGearLever)
								quit
							}
							(M:Event) 'WheelUp' scmp 0 == if{
								1 (&gt;L:EmergencyGearLever)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								0 (&gt;L:EmergencyGearLever)
								quit
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>LEVER_LdGearEmergPct</ANIM_NAME>
				<ANIM_CODE>(L:EmergencyGearLeverPct,percent)</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>LEVER_LdGearEmergExt</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<ANIM_CODE>(L:EmergencyGearLever) 100 *</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_EmergLandingGearCover</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<ANIM_CODE>(L:EmergencyGearCover) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<CameraTitle>Floor</CameraTitle>
	</RootComponent>
		
<!-- AVIONICS ################################### -->
	<RootComponent ID="HANDLING_Avionics"> 
		<!-- Avionics configuration:
			0 - no GPS; 1 - GNS 430; 2 - GNS530; 3 - GNS530&GNS430; 4 - GTN750; 5 - GTN750XI -->
		<Component ID="AvionicsConfiguration">
			<Component ID="AvionicsConfig_Radio1">
				<UseTemplate Name="A2A_AvionicsConfiguration">		
					<NODE_ID>RADIO1</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						1 1 0 1 1 1 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="AvionicsConfig_Radio2">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>RADIO2</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 0 0 0 0 1 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="AvionicsConfig_Transponder">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>XPNDR</NODE_ID> <!-- Visibility object -->	
					<VISIBILITY_CODE>
						0 0 1 1 1 1 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>				
			</Component>
			<Component ID="AvionicsConfig_ADF">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>ADF</NODE_ID> <!-- Visibility object -->
				</UseTemplate>					
			</Component>
			<Component ID="AvionicsConfig_GNS430">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>GNS430</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 0 1 0 1 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>					
			</Component>
			<Component ID="AvionicsConfig_GNS430_1">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>GNS430_1</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 0 0 0 1 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>					
			</Component>
			<Component ID="AvionicsConfig_GNS430_2">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>GNS430_2</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 0 1 0 0 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>					
			</Component>
			<Component ID="AvionicsConfig_GNS530">
				<UseTemplate Name="A2A_AvionicsConfiguration">	
					<NODE_ID>GNS530</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 0 1 1 0 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>				
			</Component>
			<Component ID="GTN750_Vis"> 
				<UseTemplate Name="A2A_AvionicsConfiguration">
				<NODE_ID>GTN750_Main</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						0 1 0 0 0 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="GTN750XiU1_Vis"> 
				<UseTemplate Name="A2A_AvionicsConfiguration">
				<NODE_ID>GTN750XI_Main</NODE_ID> <!-- Visibility object -->
					<VISIBILITY_CODE>
						1 0 0 0 0 0 6 (L:AvionicsConfiguration,number) case 
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>

	<!-- NARCO CP 136 Audio Panel -->
		<Component ID="NARCO_CP136_AudioPanel"> 
			<Component ID="NARCO_CP136_AudioPanel_Com1"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Com1_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_com1</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioComSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioComSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioComSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_com1</ANIM_NAME>
					<ANIM_CODE>(L:AudioCom1HpSwitch,bool) 50 *</ANIM_CODE>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COM1_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COM1_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Com1_Light" Node="light_audio_com1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioCom1Light,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Com2"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Com2_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_com2</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioComSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioComSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioComSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_com2</ANIM_NAME>
					<ANIM_CODE>(L:AudioCom2HpSwitch,bool) 50 *</ANIM_CODE>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COM2_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COM2_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>	
			<Component ID="NARCO_CP136_AudioPanel_Com2_Light" Node="light_audio_com2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioCom2Light,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_ComBoth"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Com12_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_both</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioBothHpSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioBothHpSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioBothHpSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_com_both</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COMBOTH_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_COMBOTH_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_ComBoth_Light" Node="light_audio_both"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioBothLight,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Nav1"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Nav1_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_nav1</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioNav1HpSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioNav1HpSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioNav1HpSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_nav1</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_NAV1_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_NAV1_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Nav1_Light" Node="light_audio_nav1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioNav1Light,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Nav2"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Nav2_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_nav2</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioNav2HpSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioNav2HpSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioNav2HpSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_nav2</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_NAV2_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_NAV2_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Nav2_Light" Node="light_audio_nav2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioNav2Light,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Adf"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Adf_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_adf</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioAdf1HpSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioAdf1HpSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioAdf1HpSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_adf</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_ADF_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_ADF_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Adf_Light" Node="light_audio_adf"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioAdf1Light,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_MkrDme"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Mkr_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_mkr_dme</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioMkrHpSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioMkrHpSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioMkrHpSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_mkrdme</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRDME_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRDME_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_MkrDme_Light" Node="light_audio_mkr_dme"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioMkrLight,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Spkr"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Spkr_Push</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<NODE_ID>audio_spkr</NODE_ID>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioSpkrSwitch,bool)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioSpkrSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioSpkrSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_spkr</ANIM_NAME>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SPKR_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SPKR_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_Spkr_Light" Node="light_audio_spkr"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:AudioSpkrLight,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_MkrMute"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>MarkerMute</IE_NAME>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioMkrMuteSwitch)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioMkrMuteSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioMkrMuteSwitch</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>PUSHBUTTON_audio_mute</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRMUTE_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRMUTE_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_ON>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRMUTE_STATE_0)</TT_VALUE_ON>
					<TT_VALUE_OFF>(R:1:@TT_Package.RADIO1_AUDIOPANEL_MKRMUTE_STATE_1)</TT_VALUE_OFF>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>400</ANIM_LAG>
					<ANIM_NAME>NARCO_CP136_PUSH_MkrMute</ANIM_NAME>
					<ANIM_CODE>(L:AudioMkrMuteSwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NARCO_CP136_AudioPanel_AudioSens">
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>AudioSens</IE_NAME>
					<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
					<SET_STATE_EXTERNAL>p0 (&gt;L:AudioSensSwitch)</SET_STATE_EXTERNAL>
					<GET_STATE_EXTERNAL>(L:AudioSensSwitch) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>AudioSensSwitch</LOCAL_VAR_TO_WATCH_0>
					<ANIM_NAME>NARCO_CP136_SWITCH_AudioSens</ANIM_NAME>
					<NODE_ID>SWITCH_audio_sens</NODE_ID>
					<TT_VALUE_ON>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SENS_STATE_0)</TT_VALUE_ON>
					<TT_VALUE_OFF>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SENS_STATE_1)</TT_VALUE_OFF>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SENS_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_AUDIOPANEL_SENS_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
					<ANIM_LAG>2000</ANIM_LAG>
				</UseTemplate>
			</Component>
		</Component>
		
	<!-- NARCO MK 12E Radio -->
		<Component ID="NARCO_MK_12E_Radio1"> 
			<Component ID="RADIO1_Display" Node="RADIO1_Display">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_Decals">
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_NAME>RADIO1_Decals</ANIM_NAME>
					<ANIM_CODE>(L:AvionicsConfiguration,number) 0 == if{ 0 } els{ 100 }</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_Switch_OnOff" Node="RADIO1_Switch_OnOff"> 
				<UseInputEvent ID="RADIO1_OnOff_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_ONOFF_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Radio1_OnOff_Rotate</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Radio1_OnOff_Pull</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:Com1OnOffPull)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:Com1OnOffPull)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:Com1OnOffVolume) 5 + 100 min (&gt;L:Com1OnOffVolume)
									
									(L:Com1OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com1OnOff) }
									els{ 0 (&gt;L:Com1OnOff) }
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:Com1OnOffVolume) 5 - 0 max (&gt;L:Com1OnOffVolume)
									
									(L:Com1OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com1OnOff) }
									els{ 0 (&gt;L:Com1OnOff) }
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:Com1OnOffVolumeDrag)
									(M:X) (L:Com1OnOffVolumeDragClick) - (G:Var1) + 100 min 0 max (&gt;L:Com1OnOffVolume)
									
									(L:Com1OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com1OnOff) }
									els{ 0 (&gt;L:Com1OnOff) }
								}
								
								(M:X) (&gt;L:Com1OnOffVolumeDragClick)
								(L:Com1OnOffVolume) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:Com1OnOffVolumeDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Switch_OnOff_pull</ANIM_NAME>
					<ANIM_CODE>(L:Com1OnOffPull) 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Switch_OnOff</ANIM_NAME>
					<ANIM_CODE>(L:Com1OnOffVolume)</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_Switch_Ident" Node="RADIO1_Switch_Ident"> 

				<UseInputEvent ID="RADIO1_Switch_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_IDENT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Radio1_Switch_Rotate</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Radio1_Switch_Push</TOOLTIP_ENTRY_1>
					<TOOLTIP_ENTRY_2>Radio1_Switch_Pull</TOOLTIP_ENTRY_2>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									(L:Nav1PullIdent) 1 - 0 max (&gt;L:Nav1PullIdent)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									1 (&gt;L:Nav1PullIdent)
									quit
								}
								(M:Event) 'MiddleSingle' scmp 0 == if{
									2 (&gt;L:Nav1PullIdent)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:Nav1PullIdentVolume) 5 + 100 min (&gt;L:Nav1PullIdentVolume)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:Nav1PullIdentVolume) 5 - 0 max (&gt;L:Nav1PullIdentVolume)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:Nav1PullIdentSwitchDrag)
									(M:X) (L:Nav1PISClick) - (G:Var1) + 100 min 0 max (&gt;L:Nav1PullIdentVolume)
								}
								
								(M:X) (&gt;L:Nav1PISClick)
								(L:Nav1PullIdentVolume) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:Nav1PullIdentSwitchDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Knob_Ident</ANIM_NAME>
					<ANIM_CODE>(L:Nav1PullIdentVolume)</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Knob_Ident_PushPull</ANIM_NAME>
					<ANIM_CODE>(L:Nav1PullIdent) 50 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="Radio1_Knob_Com1Inner"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Com1Inner</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Com1FreqInnerKnob,percent) ++ (&gt;L:Com1FreqInnerKnob,percent) } els{ (L:Com1FreqInnerKnob,percent) -- (&gt;L:Com1FreqInnerKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO1_Knob_Com1Inner</ANIM_NAME>
					<NODE_ID>Radio1_Knob_Com1Inner</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_KNOB_INNER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_KNOB_INNER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio1_Knob_Com1Outer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Com1Outer</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Com1FreqOuterKnob,percent) ++ (&gt;L:Com1FreqOuterKnob,percent) } els{ (L:Com1FreqOuterKnob,percent) -- (&gt;L:Com1FreqOuterKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO1_Knob_Com1Outer</ANIM_NAME>
					<NODE_ID>Radio1_Knob_Com1Outer</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_KNOB_OUTER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_KNOB_OUTER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio1_Knob_Nav1Inner"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Nav1Inner</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Nav1FreqInnerKnob,percent) ++ (&gt;L:Nav1FreqInnerKnob,percent) } els{ (L:Nav1FreqInnerKnob,percent) -- (&gt;L:Nav1FreqInnerKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO1_Knob_Nav1Inner</ANIM_NAME>
					<NODE_ID>RADIO1_Knob_Nav1Inner</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_INNER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_INNER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio1_Knob_Nav1Outer" Node="RADIO1_Knob_Nav1Outer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Nav1Outer</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Nav1FreqOuterKnob,percent) ++ (&gt;L:Nav1FreqOuterKnob,percent) } els{ (L:Nav1FreqOuterKnob,percent) -- (&gt;L:Nav1FreqOuterKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO1_Knob_Nav1Outer</ANIM_NAME>
					<NODE_ID>RADIO1_Knob_Nav1Outer</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_OUTER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_OUTER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="RADIO1_Com_Switch"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Com1_Switch</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<SET_STATE_EXTERNAL>(&gt;L:Com1StbySwitch)</SET_STATE_EXTERNAL>
					<VALUE_CODE>(L:Com1StbySwitch)</VALUE_CODE>
					<LOCAL_VAR_TO_WATCH_0>Com1StbySwitch</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>RADIO1_Com_Switch</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_SWITCH_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_SWITCH_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_VALUE>'N/A'</TT_VALUE>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Com_Switch</ANIM_NAME>
					<ANIM_CODE>(L:Com1StbySwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_Nav_Switch" Node="RADIO1_Nav_Switch"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Nav1_Switch</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<SET_STATE_EXTERNAL>(&gt;L:Nav1StbySwitch)</SET_STATE_EXTERNAL>
					<VALUE_CODE>(L:Nav1StbySwitch)</VALUE_CODE>
					<LOCAL_VAR_TO_WATCH_0>Nav1StbySwitch</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>RADIO1_Nav_Switch</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_SWITCH_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_SWITCH_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_VALUE>'N/A'</TT_VALUE>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Nav_Switch</ANIM_NAME>
					<ANIM_CODE>(L:Nav1StbySwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_DME_Switch"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<NODE_ID>RADIO1_DME_Switch</NODE_ID>
					<ANIM_LAG>2000</ANIM_LAG>
					<ANIM_NAME>RADIO1_knob_dme_function</ANIM_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<KNOB_TYPE>X_STATES</KNOB_TYPE>
					<IE_NAME>DME_6State</IE_NAME>
					<NUM_STATES>6</NUM_STATES>
					<SET_STATE_0>0 (&gt;L:DmeFunction)</SET_STATE_0>
					<SET_STATE_1>1 (&gt;L:DmeFunction)</SET_STATE_1>
					<SET_STATE_2>2 (&gt;L:DmeFunction)</SET_STATE_2>
					<SET_STATE_3>3 (&gt;L:DmeFunction)</SET_STATE_3>
					<SET_STATE_4>4 (&gt;L:DmeFunction)</SET_STATE_4>
					<SET_STATE_5>5 (&gt;L:DmeFunction)</SET_STATE_5>
					<GET_STATE_EXTERNAL>(L:DmeFunction) sp0</GET_STATE_EXTERNAL>
					<ENUM_VAL_TO_POS_EXTERNAL>l0</ENUM_VAL_TO_POS_EXTERNAL>
					<STR_STATE_0>Low</STR_STATE_0>
					<STR_STATE_1>Medium1</STR_STATE_1>
					<STR_STATE_2>Medium2</STR_STATE_2>
					<STR_STATE_3>High1</STR_STATE_3>
					<STR_STATE_4>High2</STR_STATE_4>
					<STR_STATE_5>High3</STR_STATE_5>
					
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TT_VALUE_0>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_0</TT_VALUE_0>
					<TT_VALUE_1>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_1</TT_VALUE_1>
					<TT_VALUE_2>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_2</TT_VALUE_2> 
					<TT_VALUE_3>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_3</TT_VALUE_3> 
					<TT_VALUE_4>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_4</TT_VALUE_4> 
					<TT_VALUE_5>COCKPIT.TOOLTIPSV2.DME_SELECTOR_STATE_5</TT_VALUE_5> 
					<TOOLTIP_TITLE>(R:1:@TT_Package.DME_SELECTOR_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.DME_SELECTOR_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO1_Active_Recall_Button" Node="RADIO1_Active_Recall_Button"> 
				<UseInputEvent ID="RADIO1_Active_Recall"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_ACTIVE_RECALL_SWITCH_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>RADIO1_Active_Recall_Push</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'LeftSingle' scmp 0 ==  if{ 1 (&gt;L:ActiveRecallSwitch,bool) }
						(M:Event) 'LeftRelease' scmp 0 ==  if{ 0 (&gt;L:ActiveRecallSwitch,bool) }
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO1_Active_Recall</ANIM_NAME>
					<ANIM_CODE>(L:ActiveRecallSwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
		</Component>
			
		<Component ID="NARCO_MK_12E_Radio2"> 
			<Component ID="RADIO2_Display" Node="RADIO2_Display">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO2_Switch_OnOff" Node="RADIO2_Switch_OnOff"> 
				<UseInputEvent ID="RADIO2_OnOff_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_ONOFF_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Radio2_OnOff_Rotate</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Radio2_OnOff_Pull</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:Com2OnOffPull)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:Com2OnOffPull)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:Com2OnOffVolume) 5 + 100 min (&gt;L:Com2OnOffVolume)
									
									(L:Com2OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com2OnOff) }
									els{ 0 (&gt;L:Com2OnOff) }
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:Com2OnOffVolume) 5 - 0 max (&gt;L:Com2OnOffVolume)
									
									(L:Com2OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com2OnOff) }
									els{ 0 (&gt;L:Com2OnOff) }
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:Com2OnOffVolumeDrag)
									 (M:X) (L:Com2OnOffVolumeDragClick) - (G:Var1) + 100 min 0 max (&gt;L:Com2OnOffVolume)
									
									(L:Com2OnOffVolume,number) 1 &gt;
									if{ 1 (&gt;L:Com2OnOff) }
									els{ 0 (&gt;L:Com2OnOff) }
								}
								
								(M:X) (&gt;L:Com2OnOffVolumeDragClick)
								(L:Com2OnOffVolume) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:Com2OnOffVolumeDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Switch_OnOff_pull</ANIM_NAME>
					<ANIM_CODE>(L:Com2OnOffPull) 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Switch_OnOff</ANIM_NAME>
					<ANIM_CODE>(L:Com2OnOffVolume)</ANIM_CODE>
				</UseTemplate>
			</Component>
			
			
			<Component ID="RADIO2_Switch_Ident" Node="RADIO2_Switch_Ident"> 
				<UseInputEvent ID="RADIO2_Switch_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_IDENT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Radio2_Switch_Rotate</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Radio2_Switch_Push</TOOLTIP_ENTRY_1>
					<TOOLTIP_ENTRY_2>Radio2_Switch_Pull</TOOLTIP_ENTRY_2>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									(L:Nav2PullIdent) 1 - 0 max (&gt;L:Nav2PullIdent)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									1 (&gt;L:Nav2PullIdent)
									quit
								}
								(M:Event) 'MiddleSingle' scmp 0 == if{
									2 (&gt;L:Nav2PullIdent)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:Nav2PullIdentVolume) 5 + 100 min (&gt;L:Nav2PullIdentVolume)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:Nav2PullIdentVolume) 5 - 0 max (&gt;L:Nav2PullIdentVolume)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:Nav2PullIdentSwitchDrag)
									(M:X) (L:Nav2PISClick) - (G:Var1) + 100 min 0 max (&gt;L:Nav2PullIdentVolume)
								}
								
								(M:X) (&gt;L:Nav2PISClick)
								(L:Nav2PullIdentVolume) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:Nav2PullIdentSwitchDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Knob_Ident</ANIM_NAME>
					<ANIM_CODE>(L:Nav2PullIdentVolume)</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Knob_Ident_PushPull</ANIM_NAME>
					<ANIM_CODE>(L:Nav2PullIdent) 50 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			
			<Component ID="Radio2_Knob_Com2Inner"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Com2Inner</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Com2FreqInnerKnob,percent) ++ (&gt;L:Com2FreqInnerKnob,percent) } els{ (L:Com2FreqInnerKnob,percent) -- (&gt;L:Com2FreqInnerKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO2_Knob_Com2Inner</ANIM_NAME>
					<NODE_ID>RADIO2_Knob_Com2Inner</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_KNOB_INNER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_KNOB_INNER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio2_Knob_Com2Outer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Com2Outer</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Com2FreqOuterKnob,percent) ++ (&gt;L:Com2FreqOuterKnob,percent) } els{ (L:Com2FreqOuterKnob,percent) -- (&gt;L:Com2FreqOuterKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO2_Knob_Com2Outer</ANIM_NAME>
					<NODE_ID>RADIO2_Knob_Com2Outer</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_KNOB_OUTER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_KNOB_OUTER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio2_Knob_Nav2Inner" Node="RADIO2_Knob_Nav2Inner"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Nav2Inner</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Nav2FreqInnerKnob,percent) ++ (&gt;L:Nav2FreqInnerKnob,percent) } els{ (L:Nav2FreqInnerKnob,percent) -- (&gt;L:Nav2FreqInnerKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO2_Knob_Nav2Inner</ANIM_NAME>
					<NODE_ID>RADIO2_Knob_Nav2Inner</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_INNER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_INNER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			<Component ID="Radio2_Knob_Nav2Outer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_Nav2Outer</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:Nav2FreqOuterKnob,percent) ++ (&gt;L:Nav2FreqOuterKnob,percent) } els{ (L:Nav2FreqOuterKnob,percent) -- (&gt;L:Nav2FreqOuterKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>RADIO2_Knob_Nav2Outer</ANIM_NAME>
					<NODE_ID>RADIO2_Knob_Nav2Outer</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_OUTER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_KNOB_OUTER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="RADIO2_Com_Switch"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Com2_Switch</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<SET_STATE_EXTERNAL>(&gt;L:Com2StbySwitch)</SET_STATE_EXTERNAL>
					<VALUE_CODE>(L:Com2StbySwitch)</VALUE_CODE>
					<LOCAL_VAR_TO_WATCH_0>Com2StbySwitch</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>RADIO2_Com_Switch</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_SWITCH_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_SWITCH_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_VALUE>'N/A'</TT_VALUE>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Com_Switch</ANIM_NAME>
					<ANIM_CODE>(L:Com2StbySwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RADIO2_Nav_Switch"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Nav2_Switch</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<SET_STATE_EXTERNAL>(&gt;L:Nav2StbySwitch)</SET_STATE_EXTERNAL>
					<VALUE_CODE>(L:Nav2StbySwitch)</VALUE_CODE>
					<LOCAL_VAR_TO_WATCH_0>Nav2StbySwitch</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>RADIO2_Nav_Switch</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.RADIO1_COM_NAV_SWITCH_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.RADIO1_COM_NAV_SWITCH_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_VALUE>'N/A'</TT_VALUE>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>RADIO2_Nav_Switch</ANIM_NAME>
					<ANIM_CODE>(L:Nav2StbySwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
		</Component>
	
	<!-- KT 76C Transponder -->
		<Component ID="KT76CTransponder"> 
			<Component ID="BUTTON_kt76a_ident" Node="BUTTON_kt76a_ident"> 
				<UseInputEvent ID="Xpdr_Ident_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.XPDR_IDENT_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Xpdr_Ident_Event_Push</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Xpdr_Ident_Event_Rotate</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:XpdrIdentSwitch)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:XpdrIdentSwitch)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:XpdrIdentKnob) 5 + 100 min (&gt;L:XpdrIdentKnob)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:XpdrIdentKnob) 5 - 15 max (&gt;L:XpdrIdentKnob)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:XpdrIdentKnobDrag)
									(M:X) (L:XpdrIdentKnobClick) - (G:Var1) + 100 min 15 max (&gt;L:XpdrIdentKnob)
								}
								
								(M:X) (&gt;L:XpdrIdentKnobClick)
								(L:XpdrIdentKnob) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:XpdrIdentKnobDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_kt76a_ident</ANIM_NAME>
					<ANIM_CODE>(L:XpdrIdentSwitch) 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_kt76a_rotate</ANIM_NAME>
					<ANIM_CODE>(L:XpdrIdentKnob)</ANIM_CODE>
				</UseTemplate>
			</Component>
			
			<Component ID="button_xpdr_ident_light" Node="button_xpdr_ident_light"> 
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>(L:XpdrLight,bool) (L:XpdrIdentDimmingMultipier) *</EMISSIVE_CODE>
					<NODE_ID>button_xpdr_ident_light</NODE_ID>
				</UseTemplate>
			</Component>
			
			<Component ID="KT76C_Function_Knob">
				<UseTemplate Name="A2A_Radio_Base_Template">
					<NODE_ID>KT76C_Function_Knob</NODE_ID>
					<ANIM_LAG>2000</ANIM_LAG>
					<ANIM_NAME>KNOB_KT76C_Function</ANIM_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<KNOB_TYPE>X_STATES</KNOB_TYPE>
					<IE_NAME>Xpdr_5State</IE_NAME>
					<NUM_STATES>5</NUM_STATES>
					<SET_STATE_0>0 (&gt;L:XpdrModeKnobPos)</SET_STATE_0>
					<SET_STATE_1>1 (&gt;L:XpdrModeKnobPos)</SET_STATE_1>
					<SET_STATE_2>2 (&gt;L:XpdrModeKnobPos)</SET_STATE_2>
					<SET_STATE_3>3 (&gt;L:XpdrModeKnobPos)</SET_STATE_3>
					<SET_STATE_4>4 (&gt;L:XpdrModeKnobPos)</SET_STATE_4>
					<GET_STATE_EXTERNAL>(L:XpdrModeKnobPos) sp0</GET_STATE_EXTERNAL>
					<LOCAL_VAR_TO_WATCH_0>XpdrModeKnobPos</LOCAL_VAR_TO_WATCH_0>
					<ENUM_VAL_TO_POS_EXTERNAL>l0</ENUM_VAL_TO_POS_EXTERNAL>
					<STR_STATE_0>Off</STR_STATE_0>
					<STR_STATE_1>Standby</STR_STATE_1>
					<STR_STATE_2>On</STR_STATE_2>
					<STR_STATE_3>Alt</STR_STATE_3>
					<STR_STATE_4>Test</STR_STATE_4>
					
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TT_VALUE_0>COCKPIT.TOOLTIPSV2.XPDR_SELECTOR_STATE_0</TT_VALUE_0>
					<TT_VALUE_1>COCKPIT.TOOLTIPSV2.XPDR_SELECTOR_STATE_1</TT_VALUE_1>
					<TT_VALUE_2>COCKPIT.TOOLTIPSV2.XPDR_SELECTOR_STATE_2</TT_VALUE_2> 
					<TT_VALUE_3>COCKPIT.TOOLTIPSV2.XPDR_SELECTOR_STATE_3</TT_VALUE_3> 
					<TT_VALUE_4>COCKPIT.TOOLTIPSV2.XPDR_SELECTOR_STATE_4</TT_VALUE_4> 
					<TOOLTIP_TITLE>(R:1:@TT_Package.XPDR_SELECTOR_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.XPDR_SELECTOR_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="KT76C_D1_Knob" Node="KT76C_D1_Knob">
				<UseInputEvent ID="Transponder_Knob"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_XPNDR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Transponder_Knob_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_1000_INC)
							quit
						} 
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_1000_DEC)
							quit
						} 

						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							1 (&gt;L:XpdrD1KnobDrag,bool)

							(L:XpdrD1KnobPosition,position) (M:X) - (G:Var1) + -20 max 20 min (&gt;L:XpdrD1Knob,number)
							
							(L:XpdrD1Knob,number) 20 == 
							if{ 
								(&gt;K:XPNDR_1000_DEC)
								0 (&gt;L:XpdrD1Knob,number)
							} 
							(L:XpdrD1Knob,number) -20 == 
							if{ 
								(&gt;K:XPNDR_1000_INC)
								0 (&gt;L:XpdrD1Knob,number)
							} 
						}
						(M:X) (&gt;L:XpdrD1KnobPosition,position)
						(L:XpdrD1Knob,number) (&gt;G:Var1)

						(M:Event) 'LeftRelease' scmp 0 ==
						if{
							0 (&gt;L:XpdrD1KnobDrag,bool)
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>KNOB_KT76C_D1</ANIM_NAME>
					<ANIM_CODE>(A:TRANSPONDER CODE:1,number) 1000 / 10 % int 10 *</ANIM_CODE>
					<ANIM_LAG>0</ANIM_LAG>
				</UseTemplate>
			</Component>
			<Component ID="KT76C_D2_Knob" Node="KT76C_D2_Knob"> 
				<UseInputEvent ID="Transponder_Knob"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_XPNDR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Transponder_Knob_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_100_INC)
							quit
						} 
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_100_DEC)
							quit
						} 
						
						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							1 (&gt;L:XpdrD2KnobDrag,bool)

							(L:XpdrD2KnobPosition,position) (M:X) - (G:Var1) + -20 max 20 min (&gt;L:XpdrD2Knob,number)
							
							(L:XpdrD2Knob,number) 20 == 
							if{ 
								(&gt;K:XPNDR_100_DEC)
								0 (&gt;L:XpdrD2Knob,number)
							} 
							(L:XpdrD2Knob,number) -20 == 
							if{ 
								(&gt;K:XPNDR_100_INC)
								0 (&gt;L:XpdrD2Knob,number)
							} 
						}
						(M:X) (&gt;L:XpdrD2KnobPosition,position)
						(L:XpdrD2Knob,number) (&gt;G:Var1)

						(M:Event) 'LeftRelease' scmp 0 ==
						if{
							0 (&gt;L:XpdrD2KnobDrag,bool)
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>KNOB_KT76C_D2</ANIM_NAME>
					<ANIM_CODE>(A:TRANSPONDER CODE:1,number) 100 / 10 % int 10 *</ANIM_CODE>
					<ANIM_LAG>0</ANIM_LAG>
				</UseTemplate>
			</Component>
			<Component ID="KT76C_D3_Knob" Node="KT76C_D3_Knob"> 
				<UseInputEvent ID="Transponder_Knob"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_XPNDR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Transponder_Knob_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_10_INC)
							quit
						} 
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_10_DEC)
							quit
						} 

						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							1 (&gt;L:XpdrD3KnobDrag,bool)

							(L:XpdrD3KnobPosition,position) (M:X) - (G:Var1) + -20 max 20 min (&gt;L:XpdrD3Knob,number)
							
							(L:XpdrD3Knob,number) 20 == 
							if{ 
								(&gt;K:XPNDR_10_DEC)
								0 (&gt;L:XpdrD3Knob,number)
							} 
							(L:XpdrD3Knob,number) -20 == 
							if{ 
								(&gt;K:XPNDR_10_INC)
								0 (&gt;L:XpdrD3Knob,number)
							} 
						}
						(M:X) (&gt;L:XpdrD3KnobPosition,position)
						(L:XpdrD3Knob,number) (&gt;G:Var1)

						(M:Event) 'LeftRelease' scmp 0 ==
						if{
							0 (&gt;L:XpdrD3KnobDrag,bool)
						}
						
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>KNOB_KT76C_D3</ANIM_NAME>
					<ANIM_CODE>(A:TRANSPONDER CODE:1,number) 10 / 10 % int 10 *</ANIM_CODE>
					<ANIM_LAG>0</ANIM_LAG>
				</UseTemplate>
			</Component>
			<Component ID="KT76C_D4_Knob" Node="KT76C_D4_Knob"> 
				<UseInputEvent ID="Transponder_Knob"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_XPNDR_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Transponder_Knob_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_1_INC)
							quit
						} 
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(&gt;K:XPNDR_1_DEC)
							quit
						} 

						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							1 (&gt;L:XpdrD4KnobDrag,bool)

							(L:XpdrD4KnobPosition,position) (M:X) - (G:Var1) + -20 max 20 min (&gt;L:XpdrD4Knob,number)
							
							(L:XpdrD4Knob,number) 20 == 
							if{ 
								(&gt;K:XPNDR_1_DEC)
								0 (&gt;L:XpdrD4Knob,number)
							} 
							(L:XpdrD4Knob,number) -20 == 
							if{ 
								(&gt;K:XPNDR_1_INC)
								0 (&gt;L:XpdrD4Knob,number)
							} 
						}
						(M:X) (&gt;L:XpdrD4KnobPosition,position)
						(L:XpdrD4Knob,number) (&gt;G:Var1)

						(M:Event) 'LeftRelease' scmp 0 ==
						if{
							0 (&gt;L:XpdrD4KnobDrag,bool)
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>KNOB_KT76C_D4</ANIM_NAME>
					<ANIM_CODE>(A:TRANSPONDER CODE:1,number) 10 % int 10 *</ANIM_CODE>
					<ANIM_LAG>0</ANIM_LAG>
				</UseTemplate>
			</Component>
		</Component>

		<!-- #### ADF #### -->
		<Component ID="NARCO_ADF841"> 
			<Component ID="ADF_Display" Node="ADF_Display">
				<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
					<EMISSIVE_CODE>(A:GLASSCOCKPIT AUTOMATIC BRIGHTNESS, Percent over 100)</EMISSIVE_CODE>
				</UseTemplate>
			</Component>
			<Component ID="ADF_knob_inner"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_ADFInner</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:AdfFreqInnerKnob,percent) ++ (&gt;L:AdfFreqInnerKnob,percent) } els{ (L:AdfFreqInnerKnob,percent) -- (&gt;L:AdfFreqInnerKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>NARCO_ADF841_Knob_Inner</ANIM_NAME>
					<NODE_ID>ADF_knob_inner</NODE_ID>

					<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_KNOB_INNER_TITLE)</TOOLTIP_TITLE>
					<TT_VALUE>(A:ADF ACTIVE FREQUENCY:1, KHz)</TT_VALUE>
					<TT_DESCRIPTION>(R:1:@TT_Package.ADF_KNOB_INNER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="ADF_knob_outer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>Knob_ADFOuter</IE_NAME>
					<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
					<IS_INFINITE>True</IS_INFINITE>
					<SET_STATE_EXTERNAL>p0 0 &gt; if{ (L:AdfFreqOuterKnob,percent) ++ (&gt;L:AdfFreqOuterKnob,percent) } els{ (L:AdfFreqOuterKnob,percent) -- (&gt;L:AdfFreqOuterKnob,percent) }</SET_STATE_EXTERNAL>
					<ANIM_NAME>NARCO_ADF841_Knob_Outer</ANIM_NAME>
					<NODE_ID>ADF_knob_outer</NODE_ID>

					<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_KNOB_OUTER_TITLE)</TOOLTIP_TITLE>
					<TT_VALUE>(A:ADF ACTIVE FREQUENCY:1, KHz)</TT_VALUE>
					<TT_DESCRIPTION>(R:1:@TT_Package.ADF_KNOB_OUTER_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="ADF_switch_mode"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<NODE_ID>ADF_switch_mode</NODE_ID>
					<ANIM_LAG>2000</ANIM_LAG>
					<ANIM_NAME>NARCO_ADF841_SWITCH_mode_select</ANIM_NAME>
					<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
					<SWITCH_DIRECTION>Horizontal</SWITCH_DIRECTION>
					
					<IE_NAME>ADF_switch_mode</IE_NAME>
					<NUM_STATES>3</NUM_STATES>
					<INI_STATE>2</INI_STATE>
					<SET_STATE_0>0 (&gt;L:AdfModeSelectSwitch,enum)</SET_STATE_0>
					<SET_STATE_1>1 (&gt;L:AdfModeSelectSwitch,enum)</SET_STATE_1>
					<SET_STATE_2>2 (&gt;L:AdfModeSelectSwitch,enum)</SET_STATE_2>
					<GET_STATE_EXTERNAL>(L:AdfModeSelectSwitch) sp0</GET_STATE_EXTERNAL>
					<ENUM_VAL_TO_POS_EXTERNAL>l0</ENUM_VAL_TO_POS_EXTERNAL>
					<STR_STATE_0>REC</STR_STATE_0>
					<STR_STATE_1>Off</STR_STATE_1>
					<STR_STATE_2>TIMER</STR_STATE_2>
					<MOMENTARY_SWITCH/>
					<STATE0_TIMER>0.1</STATE0_TIMER>
					<STATE_MAX_TIMER>0.1</STATE_MAX_TIMER>
					
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TT_VALUE_0>COCKPIT.TOOLTIPSV2.ADF_SELECTOR_STATE_0</TT_VALUE_0>
					<TT_VALUE_1>COCKPIT.TOOLTIPSV2.ADF_SELECTOR_STATE_1</TT_VALUE_1>
					<TT_VALUE_2>COCKPIT.TOOLTIPSV2.ADF_SELECTOR_STATE_2</TT_VALUE_2>
					<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_SELECTOR_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.ADF_SELECTOR_DESCRIPTION)</TT_DESCRIPTION>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
			</Component>
			
			<Component ID="ADF_switch_transfer"> 
				<UseTemplate Name="A2A_Radio_Base_Template">
					<IE_NAME>ADF_Switch</IE_NAME>
					<INTERACTION_TYPE>Push</INTERACTION_TYPE>
					<EXTRA_OPTION>_Held</EXTRA_OPTION>
					<SET_STATE_EXTERNAL>(&gt;L:AdfFrqButton)</SET_STATE_EXTERNAL>
					<VALUE_CODE>(L:AdfFrqButton)</VALUE_CODE>
					<LOCAL_VAR_TO_WATCH_0>AdfFrqButton</LOCAL_VAR_TO_WATCH_0>
					<NODE_ID>ADF_switch_transfer</NODE_ID>
					<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_SWITCH_TRANSFER_TITLE)</TOOLTIP_TITLE>
					<TT_DESCRIPTION>(R:1:@TT_Package.ADF_SWITCH_TRANSFER_DESCRIPTION)</TT_DESCRIPTION>
					<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
					<TT_VALUE>'N/A'</TT_VALUE>
					<USE_INPUT_EVENT_ID>Radio_Event</USE_INPUT_EVENT_ID>
					<INPUT_EVENT_ID_SOURCE>Radio_Event</INPUT_EVENT_ID_SOURCE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>NARCO_ADF841_Button_Transfer</ANIM_NAME>
					<ANIM_CODE>(L:AdfFrqButton) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			
			<Component ID="ADF_Volume_Knob" Node="ADF_switch_OnOff"> 
				<UseInputEvent ID="ADF_Volume_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_KNOB_VOLUME_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>ADF_Volume_Rotate</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>ADF_Volume_Push</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:FrqRstButton)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:FrqRstButton)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:AdfOnOffKnobVolume) 5 + 100 min (&gt;L:AdfOnOffKnobVolume)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:AdfOnOffKnobVolume) 5 - 0 max (&gt;L:AdfOnOffKnobVolume)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:AdfOnOffKnobDrag)
									(M:X) (L:AdfOnOffClick) - (G:Var1) + 100 min 0 max (&gt;L:AdfOnOffKnobVolume)
								}
								
								(M:X) (&gt;L:AdfOnOffClick)
								(L:AdfOnOffKnobVolume) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:AdfOnOffKnobDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>NARCO_ADF841_Knob_OnOff</ANIM_NAME>
					<ANIM_CODE>(L:AdfOnOffKnobVolume)</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>NARCO_ADF_Knob_OnOff_push</ANIM_NAME>
					<ANIM_CODE>(L:FrqRstButton) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
		</Component>
		
		<!-- #### Marker Beacon Indicators #### -->
		<Component ID="MARKERS"> 
			<Component ID="INNER_MARKER" Node="Button_inner_marker"> 

				<UseInputEvent ID="Inner_Marker_Beacon"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.MARKER_INNER_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Inner_Marker_Beacon_Push</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Inner_Marker_Beacon_Rotate</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:PushToTestMBI)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBI)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:PushToTestMBIKnob) 5 + 100 min (&gt;L:PushToTestMBIKnob)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:PushToTestMBIKnob) 5 - 15 max (&gt;L:PushToTestMBIKnob)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:PushToTestMBIKnobDrag)
									(L:PushToTestMBIKnobClick) (M:X) - (G:Var1) + 100 min 15 max (&gt;L:PushToTestMBIKnob)
								}
								
								(M:X) (&gt;L:PushToTestMBIKnobClick)
								(L:PushToTestMBIKnob) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBIKnobDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_INNER_Marker</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBI) 100 *</ANIM_CODE>
				</UseTemplate> 
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_INNER_Marker_rotate</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBIKnob)</ANIM_CODE>
				</UseTemplate>                                           =
			</Component>
			<Component ID="INNER_MARKER_INDICATOR" Node="INDICATOR_INNER_MARKER"> 
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>(L:MarkerInnerLight,bool) 25 * (L:PushToTestMBIKnob) 100 / *</EMISSIVE_CODE>
					<NODE_ID>INDICATOR_INNER_MARKER</NODE_ID>
				</UseTemplate>
			</Component>
			
			<Component ID="MIDDLE_MARKER" Node="Button_middle_marker"> 
				<UseInputEvent ID="Middle_Marker_Beacon"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.MARKER_MIDDLE_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Middle_Marker_Beacon_Push</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Middle_Marker_Beacon_Rotate</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:PushToTestMBM)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBM)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:PushToTestMBMKnob) 5 + 100 min (&gt;L:PushToTestMBMKnob)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:PushToTestMBMKnob) 5 - 15 max (&gt;L:PushToTestMBMKnob)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:PushToTestMBMKnobDrag)
									(L:PushToTestMBMKnobClick) (M:X) - (G:Var1) + 100 min 15 max (&gt;L:PushToTestMBMKnob)
								}
								
								(M:X) (&gt;L:PushToTestMBMKnobClick)
								(L:PushToTestMBMKnob) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBMKnobDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_MIDDLE_Marker</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBM) 100 *</ANIM_CODE>
				</UseTemplate> 
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_MIDDLE_Marker_rotate</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBMKnob)</ANIM_CODE>
				</UseTemplate>   
			</Component>
			<Component ID="MIDDLE_MARKER_INDICATOR" Node="INDICATOR_MIDDLE_MARKER"> 
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>(L:MarkerMiddleLight,bool) 25 * (L:PushToTestMBMKnob) 100 / *</EMISSIVE_CODE>
					<NODE_ID>INDICATOR_MIDDLE_MARKER</NODE_ID>
				</UseTemplate>
			</Component>
			
			<Component ID="OUTER_MARKER" Node="Button_outer_marker"> 
				<UseInputEvent ID="Outer_Marker_Beacon"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.MARKER_OUTER_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Outer_Marker_Beacon_Push</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Outer_Marker_Beacon_Rotate</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
								(M:Event) 'RightSingle' scmp 0 == if{
									1 (&gt;L:PushToTestMBO)
									quit
								}
								(M:Event) 'RightRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBO)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									(L:PushToTestMBOKnob) 5 + 100 min (&gt;L:PushToTestMBOKnob)
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									(L:PushToTestMBOKnob) 5 - 15 max (&gt;L:PushToTestMBOKnob)
									quit
								}
								(M:Event) 'LeftDrag' scmp 0 == if{
									1 (&gt;L:PushToTestMBOKnobDrag)
									(L:PushToTestMBOKnobClick) (M:X) - (G:Var1) + 100 min 15 max (&gt;L:PushToTestMBOKnob)
								}
								
								(M:X) (&gt;L:PushToTestMBOKnobClick)
								(L:PushToTestMBOKnob) (&gt;G:Var1)	
							
								(M:Event) 'LeftRelease' scmp 0 == if{
									0 (&gt;L:PushToTestMBOKnobDrag)
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_OUTER_Marker</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBO) 100 *</ANIM_CODE>
				</UseTemplate> 
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>BUTTON_OUTER_Marker_rotate</ANIM_NAME>
					<ANIM_CODE>(L:PushToTestMBOKnob)</ANIM_CODE>
				</UseTemplate>  
			</Component>
			<Component ID="OUTER_MARKER_INDICATOR" Node="INDICATOR_OUTER_MARKER"> 
				<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
					<EMISSIVE_CODE>(L:MarkerOuterLight,bool) 25 * (L:PushToTestMBOKnob) 100 / *</EMISSIVE_CODE>
					<NODE_ID>INDICATOR_OUTER_MARKER</NODE_ID>
				</UseTemplate> 
			</Component>
		</Component>
		
	</RootComponent>
<!-- LEVERS ################################### -->
	<RootComponent ID="LEVERS"> 
		<Component ID="LEVER_parking_brake" Node="LEVER_parking_brake">			
			<UseInputEvent ID="INPUT_parking_brake"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_PARKING_BRAKE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Parking_brake_toggle</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						(L:RealisticParkingBrake) 0 ==
						if{						
							(L:ParkingBrakePosition,bool) ! (&gt;L:ParkingBrakePosition,bool) 
							(&gt;H:A2A_PARKING_BRAKE_POSITION)
							quit
						}
						els{
							(L:ParkingBrakePosition,bool) 1 ==
							if{					
								0 (&gt;L:ParkingBrakePosition,bool) 
								(&gt;H:A2A_PARKING_BRAKE_POSITION)
								quit
							}
							els{
								(L:BrakeLPosition,percent) 25 &gt;
								(L:BrakeRPosition,percent) 25 &gt; ||
								if{				
									1 (&gt;L:ParkingBrakePosition,bool) 
									(&gt;H:A2A_PARKING_BRAKE_POSITION)
									quit
								}
							}
						
						}
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>HANDLING_parking_brake</ANIM_NAME>
				<ANIM_CODE>(L:ParkingBrakePositionAnim) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="LEVER_Throttle" Node="LEVER_Throttle"> 
			<UseInputEvent ID="LEVER_Throttle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_THROTTLE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Throttle_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:Throttle1Position) 1 + 100 min (&gt;L:Throttle1Position)
						quit
					} 
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:Throttle1Position) 1 - 0 max (&gt;L:Throttle1Position)
						quit
					}			
		
					(M:Event) 'LeftDrag' scmp 0 == if{
						(L:Throttle1Position_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:Throttle1Position)
						1 (&gt;L:Throttle1Position_Drag)
						1 (&gt;L:Throttle1LeverButton)
					}
					(M:Event) 'LeftSingle' scmp 0 == if{
						1 (&gt;L:Throttle1Position_Drag)
						1 (&gt;L:Throttle1LeverButton)
					}
					
					(M:Event) 'LeftRelease' scmp 0 == if{
						0 (&gt;L:Throttle1Position_Drag)
						0 (&gt;L:Throttle1LeverButton)
					}
					
					(M:Y) (&gt;L:Throttle1Position_Click)
					(L:Throttle1Position) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Throttle</ANIM_NAME>
				<ANIM_CODE>(L:Throttle1Position)</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_ThrottleButton</ANIM_NAME>
				<ANIM_CODE>(L:Throttle1LeverButton) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_MIXTURE" Node="LEVER_Mixture"> 
			<UseInputEvent ID="LEVER_Mixture"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_MIXTURE_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Mixture_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:Eng1_MixtureManualLever) 1 + 100 min (&gt;L:Eng1_MixtureManualLever)
						quit
					} 

					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:Eng1_MixtureManualLever) 1 - 0 max (&gt;L:Eng1_MixtureManualLever)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(L:Eng1_MixtureManualLever_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:Eng1_MixtureManualLever)
					}
					
					(M:Y) (&gt;L:Eng1_MixtureManualLever_Click)
					(L:Eng1_MixtureManualLever) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Mixture</ANIM_NAME>
				<ANIM_CODE>(L:Eng1_MixtureManualLever)</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="LEVER_RPM"> 
			<Component ID="LEVER_RPM_1" Node="LEVER_RPM_1"> 
				<UseInputEvent ID="LEVER_RPM"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_RPM_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>LEVER_RPM_Drag</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>
					<CALLBACKCODE>		
						(M:Event) 'WheelUp' scmp 0 ==
						if{ 
							(L:RPMLever1Position) 1 + 100 min (&gt;L:RPMLever1Position)
							quit
						} 

						(M:Event) 'WheelDown' scmp 0 ==
						if{ 
							(L:RPMLever1Position) 1 - 0 max (&gt;L:RPMLever1Position)
							quit
						}			
	
						(M:Event) 'LeftDrag' scmp 0 == if{
							(L:RPMLever1Position_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:RPMLever1Position)
							1 (&gt;L:RPMLever1Position_Drag)
							1 (&gt;L:RPMLever1Button)
						}
						
						(M:Event) 'LeftSingle' scmp 0 == if{
							1 (&gt;L:RPMLever1Position_Drag)
							1 (&gt;L:RPMLever1Button)
						}
						
						(M:Event) 'LeftRelease' scmp 0 == if{
							0 (&gt;L:RPMLever1Position_Drag)
							0 (&gt;L:RPMLever1Button)
						}

						(M:Y) (&gt;L:RPMLever1Position_Click)
						(L:RPMLever1Position) (&gt;G:Var1)	
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>LEVER_RPM</ANIM_NAME>
					<ANIM_CODE>(L:RPMLever1Position)</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>LEVER_RPMButton</ANIM_NAME>
					<ANIM_CODE>(L:RPMLever1Button) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="LEVER_RPM_1_Mount" Node="RPM_Mount_1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:RPM_LeverVis,bool) !</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="LEVER_RPM_2" Node="LEVER_RPM_2">
				<UseInputEvent ID="LEVER_RPM"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_RPM_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>LEVER_RPM_Drag</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>
					<CALLBACKCODE>		
						(M:Event) 'WheelUp' scmp 0 ==
						if{ 
							(L:RPMLever1Position) 1 + 100 min (&gt;L:RPMLever1Position)
							quit
						} 

						(M:Event) 'WheelDown' scmp 0 ==
						if{ 
							(L:RPMLever1Position) 1 - 0 max (&gt;L:RPMLever1Position)
							quit
						}			
						(M:Event) 'LeftDrag' scmp 0 == if{
							(L:RPMLever1Position_Click) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:RPMLever1Position)
						}
						
						(M:Y) (&gt;L:RPMLever1Position_Click)
						(L:RPMLever1Position) (&gt;G:Var1)	
					</CALLBACKCODE>
				</UseTemplate>
			</Component>
			<Component ID="LEVER_RPM_2_Mount" Node="RPM_Mount_2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:RPM_LeverVis,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>

		<Component ID="LEVER_CARB_HEAT" Node="LEVER_Carb_Heat"> 
			<UseInputEvent ID="LEVER_Carb_Heat"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_CARB_HEAT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Carb_Heat_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>		
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:Eng1_CarbHeatSwitch) 1 + 100 min (&gt;L:Eng1_CarbHeatSwitch)
						quit
					} 

					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:Eng1_CarbHeatSwitch) 1 - -0 max (&gt;L:Eng1_CarbHeatSwitch)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:Y) (L:Eng1_CarbHeatSwitch_Click) - (G:Var1) + 100 min 0 max (&gt;L:Eng1_CarbHeatSwitch)
					}
					
					(M:Y) (&gt;L:Eng1_CarbHeatSwitch_Click)
					(L:Eng1_CarbHeatSwitch) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Carb_Heat</ANIM_NAME>
				<ANIM_CODE>(L:Eng1_CarbHeatSwitch)</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="LEVER_CABIN_VENTILATION_LEFT" Node="LEVER_Cabin_Vent_L"> 
			<UseInputEvent ID="LEVER_Cabin_Vent_L"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_CABINVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Cabin_Vent_L_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:CabinVentLeftLever) 1 + 100 min (&gt;L:CabinVentLeftLever)
						quit
					} 

					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:CabinVentLeftLever) 1 - 0 max (&gt;L:CabinVentLeftLever)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:Y) (L:CabinVentLeftLever_Click) - (G:Var1) + 100 min 0 max (&gt;L:CabinVentLeftLever)
					}
					
					(M:Y) (&gt;L:CabinVentLeftLever_Click)
					(L:CabinVentLeftLever) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Cabin_Vent_L</ANIM_NAME>
				<ANIM_CODE>(L:CabinVentLeftLever)</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="LEVER_CABIN_VENTILATION_RIGHT" Node="LEVER_Cabin_Vent_R"> 
			<UseInputEvent ID="LEVER_Cabin_Vent_R"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_CABINVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Cabin_Vent_R_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:CabinVentRightLever) 1 + 100 min (&gt;L:CabinVentRightLever)
						quit
					} 

					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:CabinVentRightLever) 1 - 0 max (&gt;L:CabinVentRightLever)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:Y) (L:CabinVentRightLever_Click) - (G:Var1) + 100 min 0 max (&gt;L:CabinVentRightLever)
					}
					
					(M:Y) (&gt;L:CabinVentRightLever_Click)
					(L:CabinVentRightLever) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Cabin_Vent_R</ANIM_NAME>
				<ANIM_CODE>(L:CabinVentRightLever)</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="LEVER_WINDOW_DEFROST" Node="LEVER_Window_Defrost"> 
			<UseInputEvent ID="LEVER_Window_Defrost"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_WINDOWDEFROST_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Window_Defrost_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:WindowDefrosterControlKnob) 1 + 100 min (&gt;L:WindowDefrosterControlKnob)
						quit
					} 

					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:WindowDefrosterControlKnob) 1 - 0 max (&gt;L:WindowDefrosterControlKnob)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:Y) (L:WindowDefrosterControlKnob_Click) - (G:Var1) + 100 min 0 max (&gt;L:WindowDefrosterControlKnob)
					}
					
					(M:Y) (&gt;L:WindowDefrosterControlKnob_Click)
					(L:WindowDefrosterControlKnob) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Window_Defrost</ANIM_NAME>
				<ANIM_CODE>(L:WindowDefrosterControlKnob)</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="LEVER_CABIN_HEAT" Node="LEVER_Cabin_Heat"> 
			<UseInputEvent ID="LEVER_Cabin_Heat"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_CABINHEAT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>LEVER_Cabin_Heat_Drag</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>		
					(M:Event) 'WheelDown' scmp 0 ==
					if{ 
						(L:CabinTempControl) 1 + 100 min (&gt;L:CabinTempControl)
						quit
					} 

					(M:Event) 'WheelUp' scmp 0 ==
					if{ 
						(L:CabinTempControl) 1 - 0 max (&gt;L:CabinTempControl)
						quit
					}			
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:Y) (L:CabinTempControl_Click) - (G:Var1) + 100 min 0 max (&gt;L:CabinTempControl)
					}
					
					(M:Y) (&gt;L:CabinTempControl_Click)
					(L:CabinTempControl) (&gt;G:Var1)	
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>LEVER_Cabin_Heat</ANIM_NAME>
				<ANIM_CODE>(L:CabinTempControl)</ANIM_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="LEVER_Primer" Node="LEVER_Primer"> 
				<UseInputEvent ID="Primer_Event"/>			
				
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_PRIMER_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>Primer_Pull</TOOLTIP_ENTRY_0>
					<TOOLTIP_ENTRY_1>Primer_Push</TOOLTIP_ENTRY_1>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>
					<CALLBACKCODE>					
						(M:Event) 'LeftSingle' scmp 0 == (M:Event) 'WheelDown' scmp 0 == or
						if{
							(L:PrimerScrew,percent) 0 == (L:PrimerState,enum) 0 == and
							if{
								1 (&gt;L:PrimerState,enum)
							}
							els{
								(L:PrimerScrew,percent) 20 == (L:PrimerState,enum) 1 == and
								if{
									2 (&gt;L:PrimerState,enum)
								}
							}
						}
						(M:Event) 'RightSingle' scmp 0 == (M:Event) 'WheelUp' scmp 0 == or
						if{
							(L:PrimerScrew,percent) 20 == (L:PrimerState,enum) 1 == and
							if{
								0 (&gt;L:PrimerState,enum)
							}
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>LEVER_Primer_Pump</ANIM_NAME>
					<ANIM_CODE>(L:PrimerPump,percent)</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>LEVER_Primer_Screw</ANIM_NAME>
					<ANIM_CODE>(L:PrimerScrew)</ANIM_CODE>
				</UseTemplate>
		</Component>
		
		<Component ID="LEVER_Flaps"> 
			<UseTemplate Name="A2A_LEVER_Flaps_Handle_Base_Template">
				<NODE_ID>LEVER_Flaps_Handle</NODE_ID>
				<ANIM_NAME>LEVER_Flaps</ANIM_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SWITCH_DIRECTION>Vertical</SWITCH_DIRECTION>
				<IE_NAME>Flaps_4State</IE_NAME>
				<NUM_STATES>4</NUM_STATES>
				<SET_STATE_0>0 (&gt;L:LandFlapsPos)</SET_STATE_0>
				<SET_STATE_1>1 (&gt;L:LandFlapsPos)</SET_STATE_1>
				<SET_STATE_2>2 (&gt;L:LandFlapsPos)</SET_STATE_2>
				<SET_STATE_3>3 (&gt;L:LandFlapsPos)</SET_STATE_3>
				<LOCAL_VAR_TO_WATCH_0>LandFlapsPos</LOCAL_VAR_TO_WATCH_0>
				<GET_STATE_EXTERNAL>(L:LandFlapsPos) sp0</GET_STATE_EXTERNAL>
				<ENUM_VAL_TO_POS_EXTERNAL>l0</ENUM_VAL_TO_POS_EXTERNAL>
				<STR_STATE_0>Low</STR_STATE_0>
				<STR_STATE_1>Medium1</STR_STATE_1>
				<STR_STATE_2>Medium2</STR_STATE_2>
				<STR_STATE_3>High</STR_STATE_3>
				
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TT_VALUE_0>COCKPIT.TOOLTIPSV2.FLAPS_SELECTOR_STATE_0</TT_VALUE_0>
				<TT_VALUE_1>COCKPIT.TOOLTIPSV2.FLAPS_SELECTOR_STATE_1</TT_VALUE_1>
				<TT_VALUE_2>COCKPIT.TOOLTIPSV2.FLAPS_SELECTOR_STATE_2</TT_VALUE_2> 
				<TT_VALUE_3>COCKPIT.TOOLTIPSV2.FLAPS_SELECTOR_STATE_3</TT_VALUE_3> 
				<TOOLTIP_TITLE>(R:1:@TT_Package.FLAPS_SELECTOR_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.FLAPS_SELECTOR_DESRCIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Flaps_Handle</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Flaps_Handle</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		
	</RootComponent>

<!-- KNOBS ################################### -->
	<RootComponent ID="KNOBS"> 
		<Component ID="knob_nav_instr_light"> 
			<UseTemplate Name="A2A_Knobs_Base_Template">
				<IE_NAME>NavInstr_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:NavInstrLightSwitchPct) (&gt;H:A2A_NAV_INSTR_LIGHT_SWITCH_PCT)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:NavInstrLightSwitchPct)</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>NavInstrLightSwitchPct</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>KNOB_nav_instr_light</ANIM_NAME>
				<NODE_ID>knob_nav_instr_light</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_NAVINSTR_LIGHTS_TITLE)</TOOLTIP_TITLE>
				<TT_VALUE>(L:NavInstrLightSwitchPct,enum)</TT_VALUE>
				<TT_DESCRIPTION>(R:1:@TT_Package.KNOB_NAVINSTR_LIGHTS_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Knobs_Event</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Knobs_Event</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
	</RootComponent> 

<!-- SWITCHES ################################### -->
	<RootComponent ID="SWITCHES"> 
	
		<Component ID="Switch_NAV_GPS" Node="Switch_NAV_GPS">
			<UseTemplate Name="Switch_NAV_GPS_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_GPS_NAV_SELECTOR) p0 (&gt;L:GpsNavSelector)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:GpsNavSelector) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>GpsNavSelector</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_nav_gps</ANIM_NAME>
				<NODE_ID>Switch_NAV_GPS</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_NAVGPS_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_NAVGPS_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_NAVGPS_STATE_0)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_NAVGPS_STATE_1)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Switch_NAV_GPS</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_NAV_GPS</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>
		<Component ID="Switch_NAV_GPS_Mount" Node="Switch_NAV_GPS_Mount"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:Vis_GpsNavSelector)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="SWITCH_avionics_master" Node="ELECTRICAL_Switch_Avionics_Master"> 
			<UseInputEvent ID="SWITCH_avionics_master"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AVIONICS_MASTER_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_Avionics_Master_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						(&gt;K:TOGGLE_AVIONICS_MASTER)
						(&gt;H:A2A_AVIONICS_SWITCH)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>2000</ANIM_LAG>
				<ANIM_NAME>ELECTRICAL_Switch_Avionics_Master</ANIM_NAME>
				<ANIM_CODE>(A:AVIONICS MASTER SWITCH:1,bool) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>


		<Component ID="Switch_Battery_Master" Node="Switch_Battery_Master">
			<UseTemplate Name="Switch_Battery_Master_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_BATTERY_1_SWITCH) p0 (&gt;L:Battery1Switch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:Battery1Switch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>Battery1Switch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_battery_master</ANIM_NAME>
				<NODE_ID>Switch_Battery_Master</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_BATTERY_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_BATTERY_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Battery_Master</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Battery_Master</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>


		<Component ID="FUEL_Switch_Pump_1" Node="FUEL_Switch_Pump_1"> 
			<UseInputEvent ID="SWITCH_FUEL_Switch_Pump_1"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_FUEL_PUMP_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>FUEL_Switch_Pump1_Toggle</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == if{
						(&gt;K:TOGGLE_ELECT_FUEL_PUMP1)
						(&gt;H:A2A_TOGGLE_ELECT_FUEL_PUMP)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>2000</ANIM_LAG>
				<ANIM_NAME>FUEL_Switch_Pump_1</ANIM_NAME>
				<ANIM_CODE>(A:GENERAL ENG FUEL PUMP SWITCH:1,bool) 100 *</ANIM_CODE>
			</UseTemplate>
		</Component>


		<Component ID="Switch_Light_Landing_L" Node="Switch_Light_Landing_L">
			<UseTemplate Name="Switch_Light_Landing_L_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_LANDING_LIGHT_LEFT_SWITCH) p0 (&gt;L:LandingLightLeftSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:LandingLightLeftSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>LandingLightLeftSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_light_landing_L</ANIM_NAME>
				<NODE_ID>Switch_Light_Landing_L</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_LEFT_LANDING_LIGHT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_LEFT_LANDING_LIGHT_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Light_Landing_L</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Light_Landing_L</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="Switch_Light_Landing_R" Node="Switch_Light_Landing_R">
			<UseTemplate Name="Switch_Light_Landing_R_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_LANDING_LIGHT_RIGHT_SWITCH) p0 (&gt;L:LandingLightRightSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:LandingLightRightSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>LandingLightRightSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_light_landing_R</ANIM_NAME>
				<NODE_ID>Switch_Light_Landing_R</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_RIGHT_LANDING_LIGHT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_RIGHT_LANDING_LIGHT_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Light_Landing_R</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Light_Landing_R</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>
		
		<Component ID="Switch_Light_Strobe" Node="Switch_Light_Strobe">
			<UseTemplate Name="Switch_Light_Strobe_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_STROBE_LIGHT_SWITCH) p0 (&gt;L:StrobeLightSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:StrobeLightSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>StrobeLightSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_light_Strobe</ANIM_NAME>
				<NODE_ID>Switch_Light_Strobe</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_STROBE_LIGHT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_STROBE_LIGHT_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Light_Strobe</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Light_Strobe</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="Switch_Light_Beacon" Node="Switch_Light_Beacon">
			<UseTemplate Name="Switch_Light_Beacon_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_BEACON_LIGHT_SWITCH) p0 (&gt;L:BeaconLightSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:BeaconLightSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>BeaconLightSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_light_Beacon</ANIM_NAME>
				<NODE_ID>Switch_Light_Beacon</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_BEACON_LIGHT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_BEACON_LIGHT_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Light_Beacon</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Light_Beacon</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="SWITCH_magnetos_ORLB" Node="SWITCH_magnetos_ORLB"> 
			<UseInputEvent ID="MAGNETO_Event"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_MAGNETO_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Magneto_Key_Rotate</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == or
					if{ 
						3 3 2 1 4 (L:Magnetos1,enum) case (&gt;K:MAGNETO1_SET)
                        (&gt;H:A2A_MAGNETOS_1_SET)
						quit
					} 

					(M:Event) 'WheelDown' scmp 0 == or
					if{ 
						2 1 0 0 4 (L:Magnetos1,enum) case (&gt;K:MAGNETO1_SET)
                        (&gt;H:A2A_MAGNETOS_1_SET)
						quit
					}
					
					(M:Event) 'LeftDrag' scmp 0 == if{
						(M:X) (L:Magnetos1Click) - 0 &gt; 
						if{ 
							(L:Magnetos1pct) 2 + 50 min (&gt;L:Magnetos1pct)
						}
						els{ 
							(L:Magnetos1pct) 2 - -50 max (&gt;L:Magnetos1pct)
						}
						
						(L:Magnetos1pct) 50 + 25 / int 0 max 3 min (&gt;K:MAGNETO1_SET)
                        (&gt;H:A2A_MAGNETOS_1_SET)
						
					}
					
					(M:X) (&gt;L:Magnetos1Click)
					
					(M:Event) 'LeftRelease' scmp 0 == or
					if{ 
						0 (&gt;L:Magnetos1pctOld)
						0 (&gt;L:Magnetos1pct)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>SWITCH_magnetos_ORLB</ANIM_NAME>
				<ANIM_CODE>(L:Magnetos1) 25 *</ANIM_CODE>
			</UseTemplate>
		</Component>

		<Component ID="Switch_Pitot_Heat" Node="Switch_Pitot_Heat">
			<UseTemplate Name="Switch_Pitot_Heat_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_PITOT_HEAT_SWITCH) p0 (&gt;L:PitotHeatSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:PitotHeatSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>PitotHeatSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_pitot_heat</ANIM_NAME>
				<NODE_ID>Switch_Pitot_Heat</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_PITOT_HEAT_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_PITOT_HEAT_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_Pitot_Heat</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Pitot_Heat</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="Switch_Fuel_Tank_Sel" Node="Switch_Fuel_Tank_Sel">
			<UseTemplate Name="Switch_Fuel_Indicator_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_FUEL_INDICATOR_SWITCH) p0 (&gt;L:FuelIndicatorSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:FuelIndicatorSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>FuelIndicatorSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SWITCH_fuel_tank_sel</ANIM_NAME>
				<NODE_ID>Switch_Fuel_Tank_Sel</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_FUEL_TANK_SEL_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_FUEL_TANK_SEL_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_FUEL_TANK_SEL_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_FUEL_TANK_SEL_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Switch_Fuel_Indicator</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_Fuel_Indicator</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

		<Component ID="SWITCH_LANDING_GEAR" Node="switch_landing_gear"> 
			<PART_ID>switch_landing_gear</PART_ID>
			<UseTemplate Name="A2A_Switch_3States">
				<ANIM_NAME>SWITCH_landing_gear</ANIM_NAME>
				<SWITCH_POSITION_TYPE>L</SWITCH_POSITION_TYPE>
				<SWITCH_POSITION_VAR>LandingGearLeverPos</SWITCH_POSITION_VAR>
				<SWITCH_DIRECTION>Vertical</SWITCH_DIRECTION>
				<CODE_POS_0>0 (&gt;L:LandingGearLeverPos,enum)</CODE_POS_0>
				<CODE_POS_1>1 (&gt;L:LandingGearLeverPos,enum)</CODE_POS_1>
				<CODE_POS_2>2 (&gt;L:LandingGearLeverPos,enum)</CODE_POS_2>
				<!-- <TOOLTIPID>Landing gear switch</TOOLTIPID> -->
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TT_VALUE_0>COCKPIT.TOOLTIPSV2.SWITCH_LANDING_GEAR_POS_STATE_0</TT_VALUE_0>
				<TT_VALUE_1>COCKPIT.TOOLTIPSV2.SWITCH_LANDING_GEAR_POS_STATE_1</TT_VALUE_1>
				<TT_VALUE_2>COCKPIT.TOOLTIPSV2.SWITCH_LANDING_GEAR_POS_STATE_2</TT_VALUE_2> 
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_LANDING_GEAR_POS_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_LANDING_GEAR_POS_DESCRIPTION)</TT_DESCRIPTION>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>
		
		<Component ID="SWITCH_FuelTankSelectorLeft" Node="SWITCH_FuelTankSelectorLeft_Handle"> 
			<UseInputEvent ID="Switch_Fuel_Tank_Sel_L"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_FUELTANKSELECTORLEFT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Switch_Fuel_Tank_Sel_L_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == 
					if{ 
						(L:FSelComancheLeftState) ++ 2 min (&gt;L:FSelComancheLeftState)
						quit
					} 
					(M:Event) 'WheelDown' scmp 0 == 
					if{ 
						(L:FSelComancheLeftState) -- 0 max (&gt;L:FSelComancheLeftState)
						quit
					} 

					(M:Event) 'LeftDrag' scmp 0 ==
					if{
						1 (&gt;L:FSelComancheLeftDrag,bool)

						(L:FSelComancheLeftPosition,position) (M:X) - (G:Var1) + -60 max 60 min (&gt;L:FSelComancheLeftKnob,number)
						
						(L:FSelComancheLeftKnob,number) 60 == 
						if{ 
							(L:FSelComancheLeftState) -- 0 max (&gt;L:FSelComancheLeftState)
							0 (&gt;L:FSelComancheLeftKnob,number)
						} 
						(L:FSelComancheLeftKnob,number) -60 == 
						if{ 
							(L:FSelComancheLeftState) ++ 2 min (&gt;L:FSelComancheLeftState)
							0 (&gt;L:FSelComancheLeftKnob,number)
						} 
					}
					(M:X) (&gt;L:FSelComancheLeftPosition,position)
					(L:FSelComancheLeftKnob,number) (&gt;G:Var1)

					(M:Event) 'LeftRelease' scmp 0 ==
					if{
						0 (&gt;L:FSelComancheLeftDrag,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>SWITCH_FuelTankSelectorLeft</ANIM_NAME>
				<ANIM_CODE>(L:FSelComancheLeftState) 50 *</ANIM_CODE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>
		
		<Component ID="SWITCH_FuelTankSelectorRight" Node="SWITCH_FuelTankSelectorRight_Handle"> 
			<UseInputEvent ID="Switch_Fuel_Tank_Sel_R"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_FUELTANKSELECTORRIGHT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>Switch_Fuel_Tank_Sel_R_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == 
					if{ 
						(L:FSelComancheRightState) ++ 2 min (&gt;L:FSelComancheRightState)
						quit
					} 
					(M:Event) 'WheelDown' scmp 0 == 
					if{ 
						(L:FSelComancheRightState) -- 0 max (&gt;L:FSelComancheRightState)
						quit
					} 

					(M:Event) 'LeftDrag' scmp 0 ==
					if{
						1 (&gt;L:FSelComancheRightDrag,bool)

						(M:X) (L:FSelComancheRightPosition,position) - (G:Var1) + -60 max 60 min (&gt;L:FSelComancheRightKnob,number)
						
						(L:FSelComancheRightKnob,number) 60 == 
						if{ 
							(L:FSelComancheRightState) -- 0 max (&gt;L:FSelComancheRightState)
							0 (&gt;L:FSelComancheRightKnob,number)
						} 
						(L:FSelComancheRightKnob,number) -60 == 
						if{ 
							(L:FSelComancheRightState) ++ 2 min (&gt;L:FSelComancheRightState)
							0 (&gt;L:FSelComancheRightKnob,number)
						} 
					}
					(M:X) (&gt;L:FSelComancheRightPosition,position)
					(L:FSelComancheRightKnob,number) (&gt;G:Var1)

					(M:Event) 'LeftRelease' scmp 0 ==
					if{
						0 (&gt;L:FSelComancheRightDrag,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>SWITCH_FuelTankSelectorRight</ANIM_NAME>
				<ANIM_CODE>(L:FSelComancheRightState) 50 *</ANIM_CODE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
			
		</Component>
	</RootComponent>

<!-- PUSH BUTTONS ################################### -->
		<Component ID="Pushbutton_Starter" Node="Pushbutton_Starter">
			<UseTemplate Name="Push_Starter_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_ENG1_STARTER_SWITCH) p0 (&gt;L:Eng1_StarterSwitch)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:Eng1_StarterSwitch) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>Eng1_StarterSwitch</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>BUTTON_Starter</ANIM_NAME>
				<NODE_ID>Pushbutton_Starter</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.BUTTON_STARTER_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.BUTTON_STARTER_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Pushbutton_Starter</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Pushbutton_Starter</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="RemoveBeforeFlightStarter" Node="RemoveBeforeFlightStarter">
			<UseTemplate Name="ASOBO_GT_Visibility_Code">
				<VISIBILITY_CODE>
					(L:Vis_RemoveBeforeFlightStarter)
				</VISIBILITY_CODE>
			</UseTemplate> 
		</Component>

<!-- AUTOPILOT ################################### -->
		<Component ID="Switch_AP_Master" Node="Switch_AP_Master">
			<UseTemplate Name="Switch_AP_Master_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;H:A2A_AP_MASTER) p0 (&gt;L:ApMaster)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:ApMaster) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>ApMaster</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>Switch_AP_Master</ANIM_NAME>
				<NODE_ID>Switch_AP_Master</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AP_MASTER_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_AP_MASTER_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>Switch_AP_Master</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Switch_AP_Master</INPUT_EVENT_ID_SOURCE>
				<ANIM_LAG>2000</ANIM_LAG>
			</UseTemplate>
		</Component>

<!-- INSTRUMENTS ################################### -->
<RootComponent ID="INSTRUMENTS">
	<Component ID="COMPASS_INDICATOR">
		<UseTemplate Name="A2A_Anim_Code_Base">
			<NODE_ID>drum_compass</NODE_ID>
			<ANIM_NAME>INSTRUMENT_drum_compass</ANIM_NAME>
			<ANIM_LENGTH>180</ANIM_LENGTH>
			<!-- <ANIM_CODE>(A:PLANE HEADING DEGREES MAGNETIC,degrees) (L:Compass_Offset,number) + s0 360 &gt; if{ l0 360 - } els{ l0 0 &lt; if{ l0 360 + } els{ l0 } } 0.5 *</ANIM_CODE> -->
			<ANIM_CODE>(L:MagneticCompass) 0.5 *</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="A2A_Tooltip">
			<TOOLTIP_NODE_ID>GAUGE_Compass_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>Compass (%((A:WISKEY COMPASS INDICATION DEGREES,Degrees))%!d!%°)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.COMPASS (%((A:WISKEY COMPASS INDICATION DEGREES,Degrees))%!d!%°)</TOOLTIPID>
       	</UseTemplate>
	</Component>
	<Component ID="AIRSPEED_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>200</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_airspeed</ANIM_NAME>
			<ANIM_CODE>
				(L:AirspeedNeedle,mph) 0.5 *
			</ANIM_CODE>
			<ANIM_LAG>50</ANIM_LAG>
			<TOOLTIP_NODE_ID>GAUGE_Airspeed_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.AIRSPEED (%((L:AirspeedNeedle,mph))%!d! MPH, %((L:AirspeedNeedle,mph) 0.868976242 *)%!d! Knots)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.AIRSPEED</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="ATTITUDE_INDICATOR">
		<Component ID="INSTRUMENT_Attitude_Indicator">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_LENGTH>50</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_attitude_flag</ANIM_NAME>
				<ANIM_CODE>(L:AttitudeIndicator1Flag,bool) 50 *</ANIM_CODE>
				<ANIM_LAG>50</ANIM_LAG>
			</UseTemplate>
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_attitude_bank</ANIM_NAME>
				<ANIM_CODE>(A:PLANE BANK DEGREES,grad) 4 / (L:AttitudeBank,number) +</ANIM_CODE>
				<TOOLTIP_NODE_ID>GAUGE_attitude_bank_TOOLTIP</TOOLTIP_NODE_ID>
				<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.ATTITUDEINDICATOR (Pitch %(A:PLANE PITCH DEGREES,degrees)%!d!°, Bank %(A:PLANE BANK DEGREES,grad)%!d!°)</TOOLTIPID> -->
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.ATTITUDEINDICATOR</TOOLTIPID>
			</UseTemplate>
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_attitude_pitch</ANIM_NAME>
				<ANIM_CODE>(A:PLANE PITCH DEGREES,degrees) 2 / (L:AttitudePitch,number) +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="INSTRUMENT_attitude_plane">
			<UseTemplate Name="A2A_INSTRUMENT_attitude_plane_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:AttitudePlane)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:AttitudePlane)</GET_STATE_EXTERNAL>

				<ANIM_NAME>INSTRUMENT_attitude_plane</ANIM_NAME>
				<NODE_ID>INSTRUMENT_attitude_plane</NODE_ID>
				<MIN_VALUE>-100</MIN_VALUE>
				<MAX_VALUE>100</MAX_VALUE>
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.INSTRUMENT_ATT_IND_PLANE_TITLE)</TOOLTIP_TITLE>
				<TT_VALUE>(L:AttitudePlane,enum)</TT_VALUE>
				<TT_DESCRIPTION>(R:1:@TT_Package.INSTRUMENT_ATT_IND_PLANE_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>INSTRUMENT_attitude_plane</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>INSTRUMENT_attitude_plane</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_attitude_plane_indicator</ANIM_NAME>
				<ANIM_CODE>(L:AttitudePlane) 100 + 2 /</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>

	<Component ID="ALTITUDE_INDICATOR">
		<Component ID="ALTITUDE_INDICATOR_DIAL">
			<UseTemplate Name="A2A_Altimeter_Feet_A">
				<ID>1</ID>
				<NODE_NEEDLE_H>ALT1_needle_h</NODE_NEEDLE_H>
				<NODE_NEEDLE_T>ALT1_needle_t</NODE_NEEDLE_T>
				<NODE_NEEDLE_TT>ALT1_needle_tt</NODE_NEEDLE_TT>
				<NODE_DIAL_KOLLSMAN>ALT1_dial_kollsman_inhg</NODE_DIAL_KOLLSMAN>
				<NODE_DIAL_KOLLSMAN_HPA>ALT1_dial_kollsman_hpa</NODE_DIAL_KOLLSMAN_HPA>
				<NODE_TOOLTIP>GAUGE_Altimeter_TOOLTIP</NODE_TOOLTIP>
			</UseTemplate>
		</Component>
		<Component ID="INSTRUMENT_altitude_knob" Node="ALT1_knob_kohlsman">
			<UseInputEvent ID="INSTRUMENT_altitude_knob"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_KOHLSMAN_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>INSTRUMENT_altitude_knob_Drag</TOOLTIP_ENTRY_0>
					
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>

					<CALLBACKCODE>					
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(&gt;K:KOHLSMAN_INC)
							quit
						} 
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(&gt;K:KOHLSMAN_DEC)
							quit
						} 

						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							1 (&gt;L:AltPRessKnobDrag,bool)

							(L:AltPRessKnobPosition,position) (M:X) - (G:Var1) + -20 max 20 min (&gt;L:AltPRessKnob,number)
							
							(L:AltPRessKnob,number) 20 == 
							if{ 
								(&gt;K:KOHLSMAN_DEC)
								0 (&gt;L:AltPRessKnob,number)
							} 
							(L:AltPRessKnob,number) -20 == 
							if{ 
								(&gt;K:KOHLSMAN_INC)
								0 (&gt;L:AltPRessKnob,number)
							} 
						}
						(M:X) (&gt;L:AltPRessKnobPosition,position)
						(L:AltPRessKnob,number) (&gt;G:Var1)

						(M:Event) 'LeftRelease' scmp 0 ==
						if{
							0 (&gt;L:AltPRessKnobDrag,bool)
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="A2A_Anim_Code_Base">
					<ANIM_NAME>INSTRUMENT_ALT1_knob_kohlsman</ANIM_NAME>
					<ANIM_CODE>(A:KOHLSMAN SETTING MB,inHg) 28 - 300 * dnor 3.6 /</ANIM_CODE>
					<ANIM_LAG>0</ANIM_LAG>
				</UseTemplate>
		</Component>
	</Component>

	<Component ID="MANIFOLD_PRESSURE_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>35</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_manifold_pressure</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_ManifoldPressure,inHg)</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Manifold_Pressure_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.MANIFOLDPRESSURE (%((L:Eng1_ManifoldPressure,inHg))%!2.1f! inHg)</TOOLTIPID>
		</UseTemplate>
	</Component>
	
	<Component ID="RPM_INDICATOR">
		<Component ID="RPM_Needle">
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_NAME>INSTRUMENT_needle_rpm</ANIM_NAME>
				<ANIM_CODE>(L:Eng1_RPMGauge,RPM) 100 /</ANIM_CODE>
				<TOOLTIP_NODE_ID>GAUGE_RPM_TOOLTIP</TOOLTIP_NODE_ID>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.TACHOMETER (%((L:Eng1_RPM,RPM))%!d! RPM)</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="EngineHours0">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_Engine1_Hours0</ANIM_NAME>
				<ANIM_CODE>(L:e1HourFract1,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="EngineHours1">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_Engine1_Hours1</ANIM_NAME>
				<ANIM_CODE>(L:e1Hour1,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="EngineHours2">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_Engine1_Hours2</ANIM_NAME>
				<ANIM_CODE>(L:e1Hour2,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="EngineHours3">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_Engine1_Hours3</ANIM_NAME>
				<ANIM_CODE>(L:e1Hour3,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="EngineHours4">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_Engine1_Hours4</ANIM_NAME>
				<ANIM_CODE>(L:e1Hour4,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
	</Component>

	<Component ID="FUEL_FLOW_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_fuel_flow</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_GPH,gallons)</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Fuel_Flow_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELFLOW (%((L:Eng1_GPH,gallons) 28 min)%!2.1f! GPH, %((L:Eng1_GPH,gallons) 3.78541178 *)%!d! Liters per hour)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELFLOW</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="ADF_INDICATOR">
		<Component ID="GAUGE_ADF_Needle">
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>100</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_adf_needle</ANIM_NAME>
				<ANIM_CODE>(L:Adf1Needle,keyframe)</ANIM_CODE>
				<TOOLTIP_NODE_ID>GAUGE_ADF_TOOLTIP</TOOLTIP_NODE_ID>
				<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.ADFINDICATOR (Heading: %((A:ADF CARD,degrees))%!d!°, bearing: %((L:Adf1Radial,degrees))%!d!°)</TOOLTIPID> -->
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.ADFINDICATOR</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="GAUGE_ADF_Knob">
			<UseTemplate Name="INSTRUMENT_adf_knob_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>p0 0 &gt; if{ (&gt;K:ADF_CARD_INC) } els{ (&gt;K:ADF_CARD_DEC) }</SET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE><!-- 361 -> 1 & -1 -> 359 avoid setting an invalid value -->
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL><!-- 360 -> 100 VALUE_UNITS is defined as "percent" by default so we manually convert degrees to percent -->
				<ANIM_NAME>INSTRUMENT_adf_knob</ANIM_NAME>
				<NODE_ID>GAUGE_ADF_Knob</NODE_ID>

				<FORMAT_VALUE>'%d°' @sprintf</FORMAT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.ADF_INDICATOR_KNOB_TITLE)</TOOLTIP_TITLE>
				<TT_VALUE>(A:ADF CARD,degrees)</TT_VALUE>
				<TT_DESCRIPTION>(R:1:@TT_Package.ADF_INDICATOR_KNOB_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>INSTRUMENT_adf_knob</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>INSTRUMENT_adf_knob</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="GAUGE_ADF_Dial">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_adf_dial</ANIM_NAME>
				<ANIM_LENGTH>360</ANIM_LENGTH>
				<ANIM_CODE>(L:AdfHdgNeedle,degrees)</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>
	<Component ID="HOBBS_Meter">
		<Component ID="AirframeHours0">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_HOBBS_Hours0</ANIM_NAME>
				<ANIM_CODE>(L:a1HourFract1,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="AirframeHours1">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_HOBBS_Hours1</ANIM_NAME>
				<ANIM_CODE>(L:a1Hour1,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="AirframeHours2">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_HOBBS_Hours2</ANIM_NAME>
				<ANIM_CODE>(L:a1Hour2,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="AirframeHours3">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_HOBBS_Hours3</ANIM_NAME>
				<ANIM_CODE>(L:a1Hour3,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="AirframeHours4">
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>INSTRUMENT_HOBBS_Hours4</ANIM_NAME>
				<ANIM_CODE>(L:a1Hour4,number)</ANIM_CODE>
			</UseTemplate>
		</Component>	
	</Component>
	<Component ID="KNOB_autopilot_mode"  Node="KNOB_autopilot_mode"> 

		<UseInputEvent ID="AUTOPILOT_Event"/>			
		
		<UseTemplate Name="ASOBO_GT_MouseRect">
			<TOOLTIP_TITLE>(R:1:@TT_Package.KNOB_AP_MODE_TITLE)</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>Autopilot_Switch_Push</TOOLTIP_ENTRY_0>
			<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
			<MOUSEFLAGS>WheelUp+WheelDown+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
			<CURSOR>Hand</CURSOR>

			<CALLBACKCODE>					
						(M:Event) 'RightSingle' scmp 0 == if{
							0 (&gt;L:ApTurnKnob)
							quit
						}				
						(M:Event) 'LeftSingle' scmp 0 == if{
							1 (&gt;L:ApModePushSwitch)
							quit
						}
						(M:Event) 'LeftRelease' scmp 0 == if{
							0 (&gt;L:ApModePushSwitch)
							quit
						}
						(M:Event) 'WheelUp' scmp 0 == if{
							(L:ApTurnKnob) 5 + 50 min (&gt;L:ApTurnKnob)
							quit
						}
						(M:Event) 'WheelDown' scmp 0 == if{
							(L:ApTurnKnob) 5 - -50 max (&gt;L:ApTurnKnob)
							quit
						}
						(M:Event) 'MiddleSingle' scmp 0 == if{
							0 (&gt;L:ApTurnKnob)
							quit
						}
			</CALLBACKCODE>
		</UseTemplate>	
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>KNOB_autopilot_turn</ANIM_NAME>
			<ANIM_CODE>(L:ApTurnKnob) 50 +</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>KNOB_autopilot_mode</ANIM_NAME>
			<ANIM_CODE>(L:ApModePushSwitch) 50 *</ANIM_CODE>
		</UseTemplate>
	</Component>
			
	<Component ID="BUTTON_AP_Disc" Node="SWITCH_ap_disconnect">
		<UseInputEvent ID="SWITCH_ap_disconnect"/>			
		<UseTemplate Name="ASOBO_GT_MouseRect">
			<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AP_DISCONNECT_TITLE)</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>SWITCH_ap_disconnect_Push</TOOLTIP_ENTRY_0>
			<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
			<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
			<CURSOR>Hand</CURSOR>
			<CALLBACKCODE>					
				(M:Event) 'LeftSingle' scmp 0 == if{
					1 (&gt;L:ApDisconnectSwitch)
						quit
					}
				(M:Event) 'LeftRelease' scmp 0 == if{
					0 (&gt;L:ApDisconnectSwitch)
						quit
					}
			</CALLBACKCODE>
		</UseTemplate>	
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>SWITCH_ap_disconnect</ANIM_NAME>
			<ANIM_CODE>(L:ApDisconnectSwitch) 50 * </ANIM_CODE>
		</UseTemplate>
	</Component>
	<Component ID="BUTTON_AP_Alt" Node="SWITCH_ap_altitude">
			<UseInputEvent ID="SWITCH_ap_altitude"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AP_ALTHOLD_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_ap_altitude_Push</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == 
					if{ 
						1 (&gt;L:ApAltSwitch,bool)		
					} 

					(M:Event) 'LeftRelease' scmp 0 == 
					if{
						0 (&gt;L:ApAltSwitch,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>SWITCH_ap_alt</ANIM_NAME>
				<ANIM_CODE>(L:ApAltSwitch,bool) 50 *</ANIM_CODE>
			</UseTemplate>
	</Component>
	<Component ID="BUTTON_AP_Disc_2" Node="SWITCH_ap_disconnect_2">
		<UseInputEvent ID="SWITCH_ap_disconnect"/>			
		<UseTemplate Name="ASOBO_GT_MouseRect">
			<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AP_DISCONNECT_TITLE)</TOOLTIP_TITLE>
			<TOOLTIP_ENTRY_0>SWITCH_ap_disconnect_Push</TOOLTIP_ENTRY_0>
			<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
			<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
			<CURSOR>Hand</CURSOR>
			<CALLBACKCODE>					
				(M:Event) 'LeftSingle' scmp 0 == if{
					1 (&gt;L:ApDisconnectSwitch)
						quit
					}
				(M:Event) 'LeftRelease' scmp 0 == if{
					0 (&gt;L:ApDisconnectSwitch)
						quit
					}
			</CALLBACKCODE>
		</UseTemplate>	
	</Component>
	<Component ID="BUTTON_AP_Alt_2" Node="SWITCH_ap_altitude_2">
			<UseInputEvent ID="SWITCH_ap_altitude"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_AP_ALTHOLD_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>SWITCH_ap_altitude_Push</TOOLTIP_ENTRY_0>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Hand</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'LeftSingle' scmp 0 == 
					if{ 
						1 (&gt;L:ApAltSwitch,bool)		
					} 

					(M:Event) 'LeftRelease' scmp 0 == 
					if{
						0 (&gt;L:ApAltSwitch,bool)
					}
				</CALLBACKCODE>
			</UseTemplate>	
	</Component>
	
	<Component ID="TURN_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_NAME>INSTRUMENT_needle_turn_coordinator</ANIM_NAME>
			<ANIM_CODE>(L:TurnCoordNeedle,keyframe)</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Turn_Coord_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.TURN (%((A:DELTA HEADING RATE,degrees per second) 1.1 *)%!2.1f! Degrees per second), TT:COCKPIT.TOOLTIPS.SLIP (%((A:TURN COORDINATOR BALL,position))%!3.1f!))</TOOLTIPID> -->
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.TURN (%((A:DELTA HEADING RATE,degrees per second) 1.1 *)%!2.1f! Degrees per second), Slip: (%((A:TURN COORDINATOR BALL,position))%!3.1f!))</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.TURN</TOOLTIPID>
		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>50</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_inclinometer_ball</ANIM_NAME>
			<ANIM_CODE>(L:InclinometerBall,number) -1 max 1 min 1 + 25 *</ANIM_CODE>
		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>50</ANIM_LENGTH>
			<ANIM_LAG>400</ANIM_LAG>
			<ANIM_NAME>INSTRUMENT_needle_low_voltage</ANIM_NAME>
			<ANIM_CODE>(L:ApLowVoltageFlag,bool) 50 *</ANIM_CODE>
		</UseTemplate>
		<!-- AUTOPILOT LAMPS -->
		<Component ID="light_ap_rdy" Node="light_ap_rdy"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApRdyLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApRdyLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_alt" Node="light_ap_alt"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApAltLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApAltLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_st" Node="light_ap_st"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApStLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApStLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_hd" Node="light_ap_hd"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApHdLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApHdLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_lo" Node="light_ap_lo"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrkLoLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrkLoLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_hi" Node="light_ap_hi"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrkHiLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrkHiLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_trimUp" Node="light_ap_trimUp"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrimUpLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrimUpLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
		<Component ID="light_ap_trimDn" Node="light_ap_trimDn"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrimDnLight,bool) *</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Emissive_Gauge">
				<EMISSIVE_CODE>(L:AvionicsElecPower,bool) (L:BreakerAutopilot,bool) * (L:ApTrimDnLight,bool) * 15 *</EMISSIVE_CODE>
			</UseTemplate>
		</Component>
	</Component>

	<Component ID="HSI">
		<Component ID="HSI_Main">
			<UseTemplate Name="A2A_Hsi_Gauge_A">
					<NODE_HEADING_BUG>HSI_selected_hdg_bug</NODE_HEADING_BUG>		
					<NODE_HEADING>HSI_heading</NODE_HEADING>		
					<NODE_CDI>HSI_needle_cdi</NODE_CDI>            	
					<NODE_GSI>HSI_needle_gsi</NODE_GSI> 	
					<NODE_CRS>HSI_course</NODE_CRS> 	
					<NODE_FLAG_HDG>HSI_hdg_flag</NODE_FLAG_HDG>  	
					<NODE_FLAG_NAV>HSI_needle_nav_flag</NODE_FLAG_NAV>  	
					<NODE_FLAG_GS>HSI_gsi_flag</NODE_FLAG_GS>		
					<NODE_FLAG_TO>HSI_To</NODE_FLAG_TO>		
					<NODE_FLAG_FROM>HSI_From</NODE_FLAG_FROM>	
					<NODE_KNOB_COURSE></NODE_KNOB_COURSE>		
					<NODE_KNOB_HEADING></NODE_KNOB_HEADING>		
					<NODE_TOOLTIP>GAUGE_HSI_TOOLTIP</NODE_TOOLTIP>
					<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.HSI (Heading: %((L:HeadingGyro,degrees))%!d!, TT:COCKPIT.TOOLTIPS.HSICOURSE %((A:NAV1 OBS,degrees))%!d!, TT:COCKPIT.TOOLTIPS.HSISELECTEDHEADING %((L:AutopilotHeadingBug,number))%!d!)</TOOLTIPID> -->
					<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.HSI (Heading: %((L:HeadingGyro,degrees))%!d!°, Course: %((A:NAV1 OBS,degrees))%!d!°, selected heading: %((L:AutopilotHeadingBug,number))%!d!°)</TOOLTIPID> -->
					<TOOLTIPID>TT:COCKPIT.TOOLTIPS.HSI</TOOLTIPID>
			</UseTemplate>
		</Component>

		<Component ID="HSI_Heading_Knob_Push"> 
			<UseTemplate Name="A2A_HSI_Knob_Template">
				<IE_NAME>HSI_Knob</IE_NAME>
				<KNOB_ID>HSI_Knob</KNOB_ID>
				<NODE_ID>INSTRUMENT_HSI_knob_heading</NODE_ID>
				<PART_ID>INSTRUMENT_HSI_knob_heading</PART_ID>
				<PUSH/>
				<ANIM_NAME_KNOB></ANIM_NAME_KNOB>
				<ANIM_NAME_PUSH></ANIM_NAME_PUSH>
				
				<INPUT_EVENT_ID_SOURCE>Knob_Default</INPUT_EVENT_ID_SOURCE>
				
				<KNOB_VAR_TO_WATCH>GyroHeadingSet</KNOB_VAR_TO_WATCH>
				
				<PUSH_SET_STATE_EXTERNAL>(L:HeadingSelectorPush,bool) ! (&gt;L:HeadingSelectorPush,bool)</PUSH_SET_STATE_EXTERNAL>
				<KNOB_SET_STATE_EXTERNAL>p0 0 &gt; 
										if{ (L:HeadingSelectorPush,bool) 1 ==
											if{ (L:GyroControl,bool) 0 == if{ 1 (&gt;K:GYRO_DRIFT_INC) } els{ (L:GyroHeadingSet,degrees) ++ dnor (&gt;L:GyroHeadingSet,degrees) } }
											els{ 1 (&gt;K:HEADING_BUG_INC) } }
										els{ (L:HeadingSelectorPush,bool) 1 == if{ (L:GyroControl,bool) 0 == if{ 1 (&gt;K:GYRO_DRIFT_DEC) } els{ (L:GyroHeadingSet,degrees) -- dnor (&gt;L:GyroHeadingSet,degrees) } }
										els{ 1 (&gt;K:HEADING_BUG_DEC) } }
				</KNOB_SET_STATE_EXTERNAL>
				
				<FORMAT_VALUE>'%d°' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_ID_PUSH_IS_DYNAMIC>True</TT_DESCRIPTION_ID_PUSH_IS_DYNAMIC>
				<TT_DESCRIPTION_PUSH>(R:1:@TT_Package.INSTRUMENT_HSI_HDG_KNOB_DESCRIPTION_PUSH)</TT_DESCRIPTION_PUSH>
				<TT_TITLE_KNOB>(R:1:@TT_Package.INSTRUMENT_HSI_HDG_KNOB_TITLE)</TT_TITLE_KNOB>
				<TT_DESCRIPTION_KNOB>(R:1:@TT_Package.INSTRUMENT_HSI_HDG_KNOB_DESCRIPTION)</TT_DESCRIPTION_KNOB>
				<KNOB_VALUE_STATE>(L:HeadingSelectorPush,bool) if{ (L:GyroHeadingSet,degrees) } els{ (L:AutopilotHeadingBug,number) }</KNOB_VALUE_STATE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_HSI_knob_heading</ANIM_NAME>
				<!-- <ANIM_CODE>(L:GyroHeadingSet) (A:PLANE HEADING DEGREES TRUE,degrees) + 360 % 3.6 /</ANIM_CODE> -->
				<!-- <ANIM_CODE>(L:HeadingSelectorPush,bool) if{ (L:GyroHeadingSet,degrees) } els{ (L:AutopilotHeadingBug,number) } (A:PLANE HEADING DEGREES TRUE,degrees) 360 - abs + 360 % 3.6 / </ANIM_CODE> -->
				<ANIM_CODE>(L:HeadingGyro,degrees) 360 - abs (L:AutopilotHeadingBug,number) + 360 % 3.6 /</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_HSI_knob_heading_push</ANIM_NAME>
				<ANIM_CODE>(L:HeadingSelectorPush,bool) 100 * </ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="HSI_Course_Knob">
			<UseTemplate Name="A2A_INSTRUMENT_HSI_Knob_Course_Base_Template">
				<IE_NAME>Knob_Crs</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>p0 0 &gt; if{ (&gt;K:VOR1_OBI_INC) } els{ (&gt;K:VOR1_OBI_DEC) }</SET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE><!-- 361 -> 1 & -1 -> 359 avoid setting an invalid value -->
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL><!-- 360 -> 100 VALUE_UNITS is defined as "percent" by default so we manually convert degrees to percent -->
				<ANIM_NAME></ANIM_NAME>
				<NODE_ID>INSTRUMENT_HSI_knob_course</NODE_ID>

				<FORMAT_VALUE>'%d°' @sprintf</FORMAT_VALUE>
				<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.INSTRUMENT_HSI_CRS_KNOB_TITLE)</TOOLTIP_TITLE>
				<TT_VALUE>(A:NAV OBS:1,degrees)</TT_VALUE>
				<TT_DESCRIPTION>(R:1:@TT_Package.INSTRUMENT_HSI_CRS_KNOB_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>INSTRUMENT_HSI_knob_course</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>INSTRUMENT_HSI_knob_course</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>INSTRUMENT_HSI_knob_course</ANIM_NAME>
				<!-- <ANIM_CODE>(A:NAV OBS:1,degrees) (A:PLANE HEADING DEGREES TRUE,degrees) 360 - abs + 360 % 3.6 /</ANIM_CODE> -->
				<ANIM_CODE>(L:HeadingGyro,degrees) 360 - abs (A:NAV OBS:1,degrees) + 360 % 3.6 /</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>
	<Component ID="VERTICAL_SPEED_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>200</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_vertical_speed</ANIM_NAME>
			<ANIM_CODE>(L:VerticalSpeed,feet per minute) -4000 max 4000 min 2 / 0.05 * 100 +</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_VSI_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.VERTICALSPEEDINDICATOR (%((L:VerticalSpeed,feet per minute))%!d! ft%/min)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.VERTICALSPEEDINDICATOR</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="VOR2_INDICATOR">
		<UseTemplate Name="A2A_Vor_Gauge_A">
			<NAVID>2</NAVID>
			<NODE_HEADING>VOR2_Compass</NODE_HEADING>		
			<NODE_CDI>VOR2_needle_cdi</NODE_CDI>            	
			<NODE_GSI>VOR2_needle_gsi</NODE_GSI>             	
			<NODE_FLAG_NAV>VOR2_nav_flag</NODE_FLAG_NAV>  	
			<NODE_FLAG_GS>VOR2_gsi_flag</NODE_FLAG_GS>		
			<NODE_FLAG_TO>VOR2_To</NODE_FLAG_TO>		
			<NODE_FLAG_FROM>VOR2_From</NODE_FLAG_FROM>	
			<NODE_KNOB></NODE_KNOB>		
			<NODE_TOOLTIP>GAUGE_VOR2_TOOLTIP</NODE_TOOLTIP>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.VOR2 (%((A:NAV OBS:2,degrees))%!d!°)</TOOLTIPID>
		</UseTemplate>
		<UseTemplate Name="INSTRUMENT_Vor2_knob_Base_Template">
			<IE_NAME>Short_Name_Knob</IE_NAME>
			<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
			<IS_INFINITE>True</IS_INFINITE>
			<SET_STATE_EXTERNAL>p0 0 &gt; if{ (&gt;K:VOR2_OBI_INC) } els{ (&gt;K:VOR2_OBI_DEC) }</SET_STATE_EXTERNAL>
			<CLAMP_VALUE>dnor</CLAMP_VALUE><!-- 361 -> 1 & -1 -> 359 avoid setting an invalid value -->
			<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL><!-- 360 -> 100 VALUE_UNITS is defined as "percent" by default so we manually convert degrees to percent -->
			<ANIM_NAME>INSTRUMENT_VOR2_knob</ANIM_NAME>
			<NODE_ID>VOR2_knob</NODE_ID>

			<FORMAT_VALUE>'%d°' @sprintf</FORMAT_VALUE>
			<TT_VALUE_IS_DYNAMIC>True</TT_VALUE_IS_DYNAMIC>
			<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
			<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
			<TOOLTIP_TITLE>(R:1:@TT_Package.INSTRUMENT_VOR2_KNOB_TITLE)</TOOLTIP_TITLE>
			<TT_VALUE>(A:NAV OBS:2,degrees)</TT_VALUE>
			<TT_DESCRIPTION>(R:1:@TT_Package.INSTRUMENT_VOR2_KNOB_DESCRIPTION)</TT_DESCRIPTION>
			<USE_INPUT_EVENT_ID>INSTRUMENT_VOR2_knob</USE_INPUT_EVENT_ID>
			<INPUT_EVENT_ID_SOURCE>INSTRUMENT_VOR2_knob</INPUT_EVENT_ID_SOURCE>
		</UseTemplate>
	</Component>

	<Component ID="EXHAUST_GAS_TEMP_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>200</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_exhaust_gas_temp</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_EGTGauge,number) 850 max 800 - 10 /</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_EGT_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.EGT (%((L:Eng1_EGTGauge,number) 900 &gt;=)%{if}%((L:Eng1_EGTGauge,number))%!d!°F, %((L:Eng1_EGTGauge,number) 32 - 1.8 /)%!d!°C%{else}--%{end})</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="CLOCK">
		<Component ID="CLOCK_hour_needle">
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>60</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_clock_h</ANIM_NAME>
				<ANIM_CODE>(L:ClockLocalTimeHour,hours)</ANIM_CODE>
				<TOOLTIP_NODE_ID>GAUGE_Clock_TOOLTIP</TOOLTIP_NODE_ID>
				<TOOLTIPID>TT:COCKPIT.TOOLTIPS.CLOCK (%((L:ClockLocalTimeHour,hours) 5 / flr)%!d!%:%((L:ClockLocalTimeMinute,minutes) flr 59 min)%!02d!%:%((L:ClockLocalTimeSecond,seconds) flr 59 min)%!02d!%)</TOOLTIPID>
			</UseTemplate>
		</Component>
		<Component ID="CLOCK_minute_needle">
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>60</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_clock_m</ANIM_NAME>
				<ANIM_CODE>(L:ClockLocalTimeMinute,minutes)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="CLOCK_seconds_needle">
			<UseTemplate Name="A2A_Gauge_Code_Base">
				<ANIM_LENGTH>60</ANIM_LENGTH>
				<ANIM_NAME>INSTRUMENT_clock_s</ANIM_NAME>
				<ANIM_CODE>(L:ClockLocalTimeSecond,seconds)</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>
	<Component ID="EXHAUST_CYL_HEAD_TEMP_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_cyl_head_temp</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_CHTGauge,fahrenheit) 10 /</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_CHT_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.CHT (%((L:Eng1_CHT,fahrenheit))%!d!°F, %((L:Eng1_CHT,fahrenheit) 32 - 1.8 /)%!d!°C%)</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="SUCTION_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LAG>30</ANIM_LAG>
			<ANIM_NAME>INSTRUMENT_suction_pressure</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_SuctionPressure,number) 10 *</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Suction_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.SUCTION (%((L:Eng1_SuctionPressure,number))%!1.1f! inHg)</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="FUEL_INDICATORS">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_fuel_tank_left</ANIM_NAME>
			<ANIM_CODE>(L:FuelGauge1,number) 100 *</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_fuel_left_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYLEFTWING (%((L:FuelLeftWingTank,gallons))%!d! Gallons)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYLEFTWING</TOOLTIPID>
		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_fuel_tank_right</ANIM_NAME>
			<ANIM_CODE>(L:FuelGauge2,number) 100 *</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_fuel_right_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYRIGHTWING (%((L:FuelRightWingTank,gallons))%!d! Gallons)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYRIGHTWING</TOOLTIPID>
		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_fuel_tank_aux</ANIM_NAME>
			<ANIM_CODE>(L:FuelGauge3,number) 100 *</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Fuel_Aux_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYAUX (%((L:FuelIndicatorSwitch,bool) 0 ==)%{if}%((L:FuelTank3,percent))%!d!%%%{else}%((L:FuelTank4,percent))%!d!%%%{end})</TOOLTIPID>
		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>25</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_fuel_pressure</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_FuelPressureGauge,psi) 10 +</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_fuel_pressure_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELPRESSURE (%((L:Eng1_FuelPressure,psi))%!d! PSI)</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="OIL_INDICATORS">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>130</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_oil_temp</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_OilTempGauge,fahrenheit) 0.5 *</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_oil_temp_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.OILTEMP (%((L:Eng1_OilTemp,fahrenheit))%!d!°F, %((L:Eng1_OilTemp,celsius))%!d!°C%)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.OILTEMP (%((L:Eng1_OilTemp,fahrenheit))%!d!°F, %((L:Eng1_OilTemp,fahrenheit) 32 - 1.8 /)%!d!°C%)</TOOLTIPID>

		</UseTemplate>
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>110</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_oil_pressure</ANIM_NAME>
			<ANIM_CODE>(L:Eng1_OilPressureGauge,psi) 10 +</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_oil_pressure_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.OILPRESSURE (%((L:Eng1_OilPressure,psi))%!d! PSI)</TOOLTIPID>
		</UseTemplate>
	</Component>

	<Component ID="AMMETER_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>80</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_ammeter</ANIM_NAME>
			<ANIM_CODE>(L:Ammeter1,amps) 40 +</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_ammeter_TOOLTIP</TOOLTIP_NODE_ID>
			<!-- <TOOLTIPID>TT:COCKPIT.TOOLTIPS.AMMETER (%((L:Ammeter1,amps))%!d! Amps)</TOOLTIPID> -->
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.AMMETER</TOOLTIPID>
		</UseTemplate>
	</Component>
		
	<Component ID="OAT_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>200</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_oat</ANIM_NAME>
			<ANIM_CODE>(A:AMBIENT TEMPERATURE,fahrenheit) 2 / 35 +</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_oat_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.OAT (%((A:AMBIENT TEMPERATURE,fahrenheit))%!+d!°F, %((A:AMBIENT TEMPERATURE,celsius))%!+d!°C)</TOOLTIPID>
			
		</UseTemplate>
	</Component>
	
	<Component ID="AUX_FUEL_INDICATOR">
		<UseTemplate Name="A2A_Gauge_Code_Base">
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_NAME>INSTRUMENT_needle_fuel_aux</ANIM_NAME>
			<ANIM_CODE>(L:FuelTipTankPctNeedle,percent)</ANIM_CODE>
			<TOOLTIP_NODE_ID>GAUGE_Fuel_Aux_TOOLTIP</TOOLTIP_NODE_ID>
			<TOOLTIPID>TT:COCKPIT.TOOLTIPS.FUELQTYTIPTANKS</TOOLTIPID>
		</UseTemplate>
		<Component ID="TipTanksINOP" Node="DECAL_TipTanksRemoved"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTank,bool) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="DECAL_TipTanksRemoved_L" Node="DECAL_TipTanksRemoved_L"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTank,bool) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="DECAL_TipTanksRemoved_R" Node="DECAL_TipTanksRemoved_R"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTank,bool) !</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
	</Component>

	
	
</RootComponent>
	

	<RootComponent ID="VISIBILITY">
		<Component ID="LeftTipTank_Vis" Node="SKEL_LeftTipTank"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTanksPresent,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
					
		<Component ID="RightTipTank_Vis" Node="SKEL_RightTipTank"> 
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(L:TipTanksPresent,bool)</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
	</RootComponent>
	
	<RootComponent ID="MISC_OBJECTS">
	
		<Component ID="LEVER_Cabin_Vent_Ring_1" Node="LEVER_Cabin_Vent_Ring_1">
			<UseTemplate Name="A2A_Vent1Ring_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent1Rotary)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent1Rotary)</GET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE>
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL>

				<NODE_ID>LEVER_Cabin_Vent_Ring_1</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_RING_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_RING_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ring_1</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ring_1</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ring_1</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent1Rotary) 3.6 /</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ring_2" Node="LEVER_Cabin_Vent_Ring_2">
			<UseTemplate Name="A2A_Vent2Ring_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent2Rotary)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent2Rotary)</GET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE>
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL>

				<!-- <ANIM_NAME>LEVER_Cabin_Vent_Ring_2</ANIM_NAME> -->
				<NODE_ID>LEVER_Cabin_Vent_Ring_2</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_RING_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_RING_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ring_2</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ring_2</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ring_2</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent2Rotary) 3.6 /</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ring_3" Node="LEVER_Cabin_Vent_Ring_3">
			<UseTemplate Name="A2A_Vent3Ring_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent3Rotary)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent3Rotary)</GET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE>
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL>

				<NODE_ID>LEVER_Cabin_Vent_Ring_3</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_RING_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_RING_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ring_3</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ring_3</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ring_3</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent3Rotary) 3.6 /</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ring_4" Node="LEVER_Cabin_Vent_Ring_4">
			<UseTemplate Name="A2A_Vent4Ring_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<IS_INFINITE>True</IS_INFINITE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent4Rotary)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent4Rotary)</GET_STATE_EXTERNAL>
				<CLAMP_VALUE>dnor</CLAMP_VALUE>
				<STATE_TO_POS_EXTERNAL>3.6 /</STATE_TO_POS_EXTERNAL>

				<NODE_ID>LEVER_Cabin_Vent_Ring_4</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_RING_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_RING_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ring_4</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ring_4</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ring_4</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent4Rotary) 3.6 /</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ball_1" Node="LEVER_Cabin_Vent_Ball_1">
			<UseTemplate Name="A2A_Vent1Ball_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent1Nozzle)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent1Nozzle)</GET_STATE_EXTERNAL>
				<NODE_ID>LEVER_Cabin_Vent_Ball_1</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_BALL_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_BALL_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ball_1</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ball_1</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ball_1</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent1Nozzle)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ball_2" Node="LEVER_Cabin_Vent_Ball_2">
			<UseTemplate Name="A2A_Vent2Ball_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent2Nozzle)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent2Nozzle)</GET_STATE_EXTERNAL>
				<NODE_ID>LEVER_Cabin_Vent_Ball_2</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_BALL_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_BALL_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ball_2</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ball_2</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ball_2</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent2Nozzle)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ball_3" Node="LEVER_Cabin_Vent_Ball_3">
			<UseTemplate Name="A2A_Vent3Ball_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent3Nozzle)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent3Nozzle)</GET_STATE_EXTERNAL>
				<NODE_ID>LEVER_Cabin_Vent_Ball_3</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_BALL_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_BALL_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ball_3</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ball_3</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ball_3</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent3Nozzle)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="LEVER_Cabin_Vent_Ball_4" Node="LEVER_Cabin_Vent_Ball_4">
			<UseTemplate Name="A2A_Vent4Ball_Base_Template">
				<IE_NAME>Short_Name_Knob</IE_NAME>
				<INTERACTION_TYPE>Knob</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>(&gt;L:CabinBallVent4Nozzle)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinBallVent4Nozzle)</GET_STATE_EXTERNAL>
				<NODE_ID>LEVER_Cabin_Vent_Ball_4</NODE_ID>
				
				<FORMAT_VALUE>'%d' @sprintf</FORMAT_VALUE>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENT_BALL_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.LEVER_VENT_BALL_DESCRIPTION)</TT_DESCRIPTION>
				<USE_INPUT_EVENT_ID>LEVER_Cabin_Vent_Ball_4</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>LEVER_Cabin_Vent_Ball_4</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>LEVER_Cabin_Vent_Ball_4</ANIM_NAME>
				<ANIM_CODE>(L:CabinBallVent4Nozzle)</ANIM_CODE>
			</UseTemplate>
		</Component>
	
	
		<Component ID="SWITCH_CabinVent1Lock">
			<UseTemplate Name="A2A_Vent1Lock_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:CabinVent1LeverLock)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinVent1LeverLock) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>CabinVent1LeverLock</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_CabinVent1LeverLock</ANIM_NAME>
				<NODE_ID>CabinVent1LeverLock</NODE_ID>
				
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_VENTLOCK_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_VENTLOCK_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_0)</TT_VALUE_OFF>
				
				<USE_INPUT_EVENT_ID>SWITCH_CabinVent1Lock</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SWITCH_CabinVent1Lock</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>		
		<Component ID="SWITCH_CabinVent2Lock">
			<UseTemplate Name="A2A_Vent2Lock_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:CabinVent2LeverLock)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinVent2LeverLock) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>CabinVent2LeverLock</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_CabinVent2LeverLock</ANIM_NAME>
				<NODE_ID>CabinVent2LeverLock</NODE_ID>
				
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_VENTLOCK_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_VENTLOCK_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_0)</TT_VALUE_OFF>
				
				<USE_INPUT_EVENT_ID>SWITCH_CabinVent2Lock</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SWITCH_CabinVent2Lock</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>		
		<Component ID="SWITCH_CabinVent3Lock">
			<UseTemplate Name="A2A_Vent3Lock_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:CabinVent3LeverLock)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinVent3LeverLock) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>CabinVent3LeverLock</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_CabinVent3LeverLock</ANIM_NAME>
				<NODE_ID>CabinVent3LeverLock</NODE_ID>
				
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_VENTLOCK_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_VENTLOCK_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_0)</TT_VALUE_OFF>
				
				<USE_INPUT_EVENT_ID>SWITCH_CabinVent3Lock</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SWITCH_CabinVent3Lock</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>		
		<Component ID="SWITCH_CabinVent4Lock">
			<UseTemplate Name="A2A_Vent4Lock_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:CabinVent4LeverLock)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:CabinVent4LeverLock) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>CabinVent4LeverLock</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_CabinVent4LeverLock</ANIM_NAME>
				<NODE_ID>CabinVent4LeverLock</NODE_ID>
				
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_VENTLOCK_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.SWITCH_VENTLOCK_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.SWITCH_VENTLOCK_STATE_0)</TT_VALUE_OFF>
				
				<USE_INPUT_EVENT_ID>SWITCH_CabinVent4Lock</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SWITCH_CabinVent4Lock</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>	
		
		<Component ID="KNOB_CabinVent1Nozzle" Node="CabinVent1Nozzle">
			<UseInputEvent ID="KNOB_CabinVent1Nozzle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENTBALL_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent1Nozzle_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == (M:Event) 'WheelDown' scmp 0 == or
					if{
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(L:CabinVent1Nozzle,percent) 5 - (&gt;L:CabinVent1Nozzle,percent)
							(L:CabinVent1Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent1Nozzle,percent) }
						} 
				
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(L:CabinVent1Nozzle,percent) 5 + (&gt;L:CabinVent1Nozzle,percent)
							(L:CabinVent1Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent1Nozzle,percent) }
						} 
					}
					els{
						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							(M:Y) (L:CVN1Click,position) - 0.5 / (G:Var1) + (&gt;L:CabinVent1Nozzle,percent)
							(L:CabinVent1Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent1Nozzle,percent) }
							(L:CabinVent1Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent1Nozzle,percent) }
						}
						(M:Y) (&gt;L:CVN1Click,position)
						(L:CabinVent1Nozzle,percent) (&gt;G:Var1)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LENGTH>200</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>ANIM_CabinVent1Nozzle</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent1Nozzle,percent) 100 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent2Nozzle" Node="CabinVent2Nozzle">
			<UseInputEvent ID="KNOB_CabinVent2Nozzle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENTBALL_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent2Nozzle_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == (M:Event) 'WheelDown' scmp 0 == or
					if{
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(L:CabinVent2Nozzle,percent) 5 - (&gt;L:CabinVent2Nozzle,percent)
							(L:CabinVent2Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent2Nozzle,percent) }
						} 
				
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(L:CabinVent2Nozzle,percent) 5 + (&gt;L:CabinVent2Nozzle,percent)
							(L:CabinVent2Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent2Nozzle,percent) }
						} 
					}
					els{
						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							(M:Y) (L:CVN2Click,position) - 0.5 / (G:Var1) + (&gt;L:CabinVent2Nozzle,percent)
							(L:CabinVent2Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent2Nozzle,percent) }
							(L:CabinVent2Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent2Nozzle,percent) }
						}
						(M:Y) (&gt;L:CVN2Click,position)
						(L:CabinVent2Nozzle,percent) (&gt;G:Var1)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LENGTH>200</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>ANIM_CabinVent2Nozzle</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent2Nozzle,percent) 100 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent3Nozzle" Node="CabinVent3Nozzle">
			<UseInputEvent ID="KNOB_CabinVent1Nozzle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENTBALL_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent1Nozzle_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == (M:Event) 'WheelDown' scmp 0 == or
					if{
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(L:CabinVent3Nozzle,percent) 5 - (&gt;L:CabinVent3Nozzle,percent)
							(L:CabinVent3Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent3Nozzle,percent) }
						} 
				
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(L:CabinVent3Nozzle,percent) 5 + (&gt;L:CabinVent3Nozzle,percent)
							(L:CabinVent3Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent3Nozzle,percent) }
						} 
					}
					els{
						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							(M:Y) (L:CVN1Click,position) - 0.5 / (G:Var1) + (&gt;L:CabinVent3Nozzle,percent)
							(L:CabinVent3Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent3Nozzle,percent) }
							(L:CabinVent3Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent3Nozzle,percent) }
						}
						(M:Y) (&gt;L:CVN1Click,position)
						(L:CabinVent3Nozzle,percent) (&gt;G:Var1)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LENGTH>200</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>ANIM_CabinVent3Nozzle</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent3Nozzle,percent) 100 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent4Nozzle" Node="CabinVent4Nozzle">
			<UseInputEvent ID="KNOB_CabinVent1Nozzle"/>			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_VENTBALL_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent1Nozzle_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>
				<CALLBACKCODE>					
					(M:Event) 'WheelUp' scmp 0 == (M:Event) 'WheelDown' scmp 0 == or
					if{
						(M:Event) 'WheelUp' scmp 0 == 
						if{ 
							(L:CabinVent4Nozzle,percent) 5 - (&gt;L:CabinVent4Nozzle,percent)
							(L:CabinVent4Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent4Nozzle,percent) }
						} 
				
						(M:Event) 'WheelDown' scmp 0 == 
						if{ 
							(L:CabinVent4Nozzle,percent) 5 + (&gt;L:CabinVent4Nozzle,percent)
							(L:CabinVent4Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent4Nozzle,percent) }
						} 
					}
					els{
						(M:Event) 'LeftDrag' scmp 0 ==
						if{
							(M:Y) (L:CVN2Click,position) - 0.5 / (G:Var1) + (&gt;L:CabinVent4Nozzle,percent)
							(L:CabinVent4Nozzle,percent) 100 &gt; if{ -100 (&gt;L:CabinVent4Nozzle,percent) }
							(L:CabinVent4Nozzle,percent) -100 &lt; if{ 100 (&gt;L:CabinVent4Nozzle,percent) }
						}
						(M:Y) (&gt;L:CVN2Click,position)
						(L:CabinVent4Nozzle,percent) (&gt;G:Var1)
					}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_LENGTH>200</ANIM_LENGTH>
				<ANIM_LAG>0</ANIM_LAG>
				<ANIM_NAME>ANIM_CabinVent4Nozzle</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent4Nozzle,percent) 100 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="KNOB_CabinVent1" Node="KNOB_CabinVent1Lever">
			<UseInputEvent ID="KNOB_CabinVent1"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_SIDEVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent1_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>	
							(M:Event) 'WheelUp' scmp 0 == if{
								(L:CabinVent1Lever) ++ 100 min (&gt;L:CabinVent1Lever)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								(L:CabinVent1Lever) -- 0 max (&gt;L:CabinVent1Lever)
								quit
							}
							(M:Event) 'LeftDrag' scmp 0 == if{
								1 (&gt;L:CabinVent1LeverDrag)
								 (M:Y) (L:CabinVent1LeverClick) - (G:Var1) + 100 min 0 max (&gt;L:CabinVent1Lever)
							}
							
							(M:Y) (&gt;L:CabinVent1LeverClick)
							(L:CabinVent1Lever) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:CabinVent1LeverDrag)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_CabinVent1Lever</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent1Lever)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent2" Node="KNOB_CabinVent2Lever">
			<UseInputEvent ID="KNOB_CabinVent2"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_SIDEVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent2_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>	
							(M:Event) 'WheelUp' scmp 0 == if{
								(L:CabinVent2Lever) ++ 100 min (&gt;L:CabinVent2Lever)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								(L:CabinVent2Lever) -- 0 max (&gt;L:CabinVent2Lever)
								quit
							}
							(M:Event) 'LeftDrag' scmp 0 == if{
								1 (&gt;L:CabinVent2LeverDrag)
								 (L:CabinVent2LeverClick) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:CabinVent2Lever)
							}
							
							(M:Y) (&gt;L:CabinVent2LeverClick)
							(L:CabinVent2Lever) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:CabinVent2LeverDrag)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_CabinVent2Lever</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent2Lever)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent3" Node="KNOB_CabinVent3Lever">
			<UseInputEvent ID="KNOB_CabinVent3"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_SIDEVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent3_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>	
							(M:Event) 'WheelUp' scmp 0 == if{
								(L:CabinVent3Lever) ++ 100 min (&gt;L:CabinVent3Lever)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								(L:CabinVent3Lever) -- 0 max (&gt;L:CabinVent3Lever)
								quit
							}
							(M:Event) 'LeftDrag' scmp 0 == if{
								1 (&gt;L:CabinVent3LeverDrag)
								(M:Y) (L:CabinVent3LeverClick) - (G:Var1) + 100 min 0 max (&gt;L:CabinVent3Lever)
							}
							
							(M:Y) (&gt;L:CabinVent3LeverClick)
							(L:CabinVent3Lever) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:CabinVent3LeverDrag)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_CabinVent3Lever</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent3Lever)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="KNOB_CabinVent4" Node="KNOB_CabinVent4Lever">
			<UseInputEvent ID="KNOB_CabinVent4"/>			
			
			<UseTemplate Name="ASOBO_GT_MouseRect">
				<TOOLTIP_TITLE>(R:1:@TT_Package.LEVER_SIDEVENT_TITLE)</TOOLTIP_TITLE>
				<TOOLTIP_ENTRY_0>KNOB_CabinVent4_Drag</TOOLTIP_ENTRY_0>
				
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
				<CURSOR>Grab</CURSOR>

				<CALLBACKCODE>	
							(M:Event) 'WheelUp' scmp 0 == if{
								(L:CabinVent4Lever) ++ 100 min (&gt;L:CabinVent4Lever)
								quit
							}
							(M:Event) 'WheelDown' scmp 0 == if{
								(L:CabinVent4Lever) -- 0 max (&gt;L:CabinVent4Lever)
								quit
							}
							(M:Event) 'LeftDrag' scmp 0 == if{
								1 (&gt;L:CabinVent4LeverDrag)
								 (L:CabinVent4LeverClick) (M:Y) - (G:Var1) + 100 min 0 max (&gt;L:CabinVent4Lever)
							}
							
							(M:Y) (&gt;L:CabinVent4LeverClick)
							(L:CabinVent4Lever) (&gt;G:Var1)	
						
							(M:Event) 'LeftRelease' scmp 0 == if{
								0 (&gt;L:CabinVent4LeverDrag)
							}
				</CALLBACKCODE>
			</UseTemplate>	
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_CabinVent4Lever</ANIM_NAME>
				<ANIM_CODE>(L:CabinVent4Lever)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Ashtray1" Node="Ashtray1">
			<UseTemplate Name="Ashtray1_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:Ashtray1Lid)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:Ashtray1Lid) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>Ashtray1Lid</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_ashtray1_lid</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<NODE_ID>Ashtray1</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.MISC_ASHTRAY_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.MISC_ASHTRAY_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.MISC_ASHTRAY_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.MISC_ASHTRAY_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Ashtray1</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Ashtray1</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="Ashtray2" Node="Ashtray2">
			<UseTemplate Name="Ashtray1_Base_Template">
				<IE_NAME>2States</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:Ashtray2Lid)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:Ashtray2Lid) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>Ashtray2Lid</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_ashtray2_lid</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<NODE_ID>Ashtray2</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.MISC_ASHTRAY_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.MISC_ASHTRAY_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.MISC_ASHTRAY_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.MISC_ASHTRAY_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Ashtray2</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Ashtray2</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="GloveBox" Node="GloveBox">
			<UseTemplate Name="Ashtray1_Base_Template">
				<IE_NAME>GloveBox</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:GloveboxAnim)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:GloveboxAnim) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>GloveboxAnim</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>ANIM_GloveBox</ANIM_NAME>
				<ANIM_LAG>200</ANIM_LAG>
				<NODE_ID>gloves_box_door</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.MISC_GLOVEBOX_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.MISC_GLOVEBOX_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.MISC_GLOVEBOX_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.MISC_GLOVEBOX_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>Ashtray2</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>Ashtray2</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
		</Component>
		<Component ID="SmallWindowLatch">
			<UseTemplate Name="Ashtray1_Base_Template">
				<IE_NAME>WindowLeft</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:WindowLeft)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:WindowLeft) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>WindowLeft</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SmallWindowLatch</ANIM_NAME>
				<NODE_ID>SmallWindowL_Latch</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.MISC_SIDEWINDOW_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.MISC_SIDEWINDOW_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.MISC_SIDEWINDOW_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.MISC_SIDEWINDOW_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>SmallWindowLatch</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SmallWindowLatch</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_small_window</ANIM_NAME>
				<ANIM_CODE>(L:LittleWindow,percent)</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_small_window_bounce</ANIM_NAME>
				<ANIM_CODE>(L:LittleWindowBounce,percent)</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="SmallWindowRLatch">
			<UseTemplate Name="Ashtray1_Base_Template">
				<IE_NAME>WindowRight</IE_NAME>
				<INTERACTION_TYPE>Switch</INTERACTION_TYPE>
				<SET_STATE_EXTERNAL>p0 (&gt;L:WindowRight)</SET_STATE_EXTERNAL>
				<GET_STATE_EXTERNAL>(L:WindowRight) sp0</GET_STATE_EXTERNAL>
				<LOCAL_VAR_TO_WATCH_0>WindowRight</LOCAL_VAR_TO_WATCH_0>
				<ANIM_NAME>SmallWindowRLatch</ANIM_NAME>
				<NODE_ID>SmallWindowR_Latch</NODE_ID>
				<TT_DESCRIPTION_IS_DYNAMIC>True</TT_DESCRIPTION_IS_DYNAMIC>
				<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
				<TOOLTIP_TITLE>(R:1:@TT_Package.MISC_SIDEWINDOW_TITLE)</TOOLTIP_TITLE>
				<TT_DESCRIPTION>(R:1:@TT_Package.MISC_SIDEWINDOW_DESCRIPTION)</TT_DESCRIPTION>
				<TT_VALUE_ON>(R:1:@TT_Package.MISC_SIDEWINDOW_STATE_1)</TT_VALUE_ON>
				<TT_VALUE_OFF>(R:1:@TT_Package.MISC_SIDEWINDOW_STATE_0)</TT_VALUE_OFF>
				<USE_INPUT_EVENT_ID>SmallWindowLatch</USE_INPUT_EVENT_ID>
				<INPUT_EVENT_ID_SOURCE>SmallWindowLatch</INPUT_EVENT_ID_SOURCE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_small_window_r</ANIM_NAME>
				<ANIM_CODE>(L:LittleWindowR,percent)</ANIM_CODE>
			</UseTemplate>
			<UseTemplate Name="A2A_Anim_Code_Base">
				<ANIM_NAME>ANIM_small_window_r_bounce</ANIM_NAME>
				<ANIM_CODE>(L:LittleWindowRBounce,percent)</ANIM_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="Headphones">
			<Component ID="Headphones_Hider" Node="Headphones_Hider">
				<UseInputEvent ID="HeadphonesHider"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_HEADPHONES_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>HeadphonesHider_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:Headphones) ! (&gt;L:Headphones)
									}
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:Headphones)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:Headphones)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
			</Component>
			<Component ID="Headphones_Plugs" Node="Headphone_Plugs"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:Headphones,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NoiseCancellingSwitch" Node="NoiseCancellingSwitch"> 
				<UseInputEvent ID="NoiseCancellingSwitch"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.SWITCH_NOISE_CANCEL_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>NoiseCancellingSwitch_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Grab</CURSOR>
					<CALLBACKCODE>					
								(M:Event) 'LeftSingle' scmp 0 == if{
									(L:NoiseCancellingSwitch,bool) ! (&gt;L:NoiseCancellingSwitch,bool)
									
									(L:NoiseCancellingSwitch,bool) 1 == if{
										2 (&gt;L:Headphones)
									}
									(L:NoiseCancellingSwitch,bool) 0 == if{
										1 (&gt;L:Headphones)
									}
									quit
								}
								(M:Event) 'WheelUp' scmp 0 == if{
									1 (&gt;L:NoiseCancellingSwitch,bool)
									2 (&gt;L:Headphones)
									quit
								}
								(M:Event) 'WheelDown' scmp 0 == if{
									0 (&gt;L:NoiseCancellingSwitch,bool)
									1 (&gt;L:Headphones)
									quit
								}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_NAME>SWITCH_NoiseCancelling</ANIM_NAME>
					<ANIM_CODE>(L:NoiseCancellingSwitch) 100 *</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="NoiseCancellingLED" Node="NoiseCancellingLED"> 
			<UseTemplate Name="ASOBO_GT_Material_Emissive_Code">
				<EMISSIVE_CODE>(L:Headphones) 2 == if{ (L:ElecPower,bool) 100 * } els{ 0 }</EMISSIVE_CODE>
			</UseTemplate>
			</Component>
		</Component>
		
		<Component ID="MiscStuff">
			<Component ID="RegNumberBackground" Node="RegNumberBackground"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:VCRegNumber,bool) !</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="RegNumber_Toggle" Node="RegNumber_Toggle"> 
				<UseInputEvent ID="RegNumber"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.REGNUMBER_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>RegNumber_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>

					<CALLBACKCODE>	
						(M:Event) 'LeftSingle' scmp 0 == if{
							(L:VCRegNumber,bool) ! (&gt;L:VCRegNumber,bool)
						}
					</CALLBACKCODE>
				</UseTemplate>	
			</Component>
			
			<Component ID="LifeVest_1" Node="LifeVest_1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:LifeVest_1,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="LifeVest_2" Node="LifeVest_2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:LifeVest_2,bool)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="LifeVest_1_TOOLTIP" Node="LifeVest_1_TOOLTIP"> 
				<UseInputEvent ID="LifeVest_1"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.LIFEVEST_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>LifeVest_1_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>

					<CALLBACKCODE>	
						(M:Event) 'LeftSingle' scmp 0 == if{
							(L:LifeVest_1) 0 ==
							if{
								1 (&gt;L:LifeVest_1)
								quit
							}
							(L:LifeVest_1) 1 ==
							if{
								(L:LifeVest_2) 0 ==
								if{
									0 (&gt;L:LifeVest_1)
									quit
								}
							}
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>
					(L:TabletStation) 1 &gt;
					if{ 0 }
					els{ (L:LifeVest_2) ! }
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="LifeVest_2_TOOLTIP" Node="LifeVest_2_TOOLTIP"> 
				<UseInputEvent ID="LifeVest_2"/>			
				<UseTemplate Name="ASOBO_GT_MouseRect">
					<TOOLTIP_TITLE>(R:1:@TT_Package.LIFEVEST_TITLE)</TOOLTIP_TITLE>
					<TOOLTIP_ENTRY_0>LifeVest_2_Toggle</TOOLTIP_ENTRY_0>
					<TOOLTIP_TITLE_IS_DYNAMIC>True</TOOLTIP_TITLE_IS_DYNAMIC>
					<MOUSEFLAGS>Move+Leave+WheelUp+WheelDown+LeftDrag+LeftSingle+LeftRelease+RightSingle+RightRelease+MiddleSingle+MiddleRelease</MOUSEFLAGS>
					<CURSOR>Hand</CURSOR>

					<CALLBACKCODE>	
						(M:Event) 'LeftSingle' scmp 0 == if{
							(L:LifeVest_2) 1 ==
							if{
								0 (&gt;L:LifeVest_2)
								quit
							}
							(L:LifeVest_2) 0 ==
							if{
								(L:LifeVest_1) 1 ==
								if{
									1 (&gt;L:LifeVest_2)
									quit
								}
							}
						}
					</CALLBACKCODE>
				</UseTemplate>	
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>
					(L:TabletStation) 1 &gt;
					if{ 0 }
					els{ (L:LifeVest_1) }
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="SteamyWindows"> 
				<UseTemplate Name="A2A_SteamyWindow_Template">
					<NODE_ID>STEAMYGLASS_Door</NODE_ID>
				</UseTemplate>
				<UseTemplate Name="A2A_SteamyWindow_Template">
					<NODE_ID>STEAMYGLASS_Main</NODE_ID>
				</UseTemplate>
				<UseTemplate Name="A2A_SteamyWindow_Template">
					<NODE_ID>STEAMYGLASS_SmallWindowR</NODE_ID>
				</UseTemplate>
				<UseTemplate Name="A2A_SteamyWindow_Template">
					<NODE_ID>STEAMYGLASS_SmallWindowL</NODE_ID>
				</UseTemplate>
				<UseTemplate Name="A2A_SteamyWindow_Template">
					<NODE_ID>STEAMYGLASS_Windshield</NODE_ID>
				</UseTemplate>
			</Component>
		</Component>
		
		<Component ID="Pilots_VC">
			<Component ID="Pilot0_Vis" Node="VC_CREW_VIS_1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:VC_Crew_Visible) (L:Character1,enum) *</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="Pilot1_Vis" Node="VC_CREW_VIS_2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>
						(L:VC_Crew_Visible) (L:Character2,enum) *
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>
		<Component ID="Passengers_VC">
			<Component ID="Passenger_0_Vis" Node="VC_CREW_VIS_3"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:VC_Crew_Visible) (L:Character3,enum) *</VISIBILITY_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>400</ANIM_LAG>
					<ANIM_NAME>ANIM_Character3_Eyelids</ANIM_NAME>
					<ANIM_CODE>(L:Eyelids3) 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_NAME>ANIM_Character3HeadHoriz</ANIM_NAME>
					<ANIM_CODE>(L:BodyHead3Horizontal,degrees) 50 +</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_NAME>ANIM_Character3HeadVert</ANIM_NAME>
					<ANIM_CODE>(L:BodyHead3Vertical,degrees) 50 +</ANIM_CODE>
				</UseTemplate>
			</Component>
			<Component ID="Passenger_1_Vis" Node="VC_CREW_VIS_4"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:VC_Crew_Visible) (L:Character4,enum) *</VISIBILITY_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>400</ANIM_LAG>
					<ANIM_NAME>ANIM_Character4_Eyelids</ANIM_NAME>
					<ANIM_CODE>(L:Eyelids4) 100 *</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_NAME>ANIM_Character4HeadHoriz</ANIM_NAME>
					<ANIM_CODE>(L:BodyHead4Horizontal,degrees) 50 +</ANIM_CODE>
				</UseTemplate>
				<UseTemplate Name="ASOBO_GT_Anim_Code">
					<ANIM_LAG>0</ANIM_LAG>
					<ANIM_NAME>ANIM_Character4HeadVert</ANIM_NAME>
					<ANIM_CODE>(L:BodyHead4Vertical,degrees) 50 +</ANIM_CODE>
				</UseTemplate>
			</Component>
		</Component>
		<Component ID="Pilots_Ext">
			<Component ID="Pilot0_Vis_Ext" Node="Ext_CREW_VIS_1"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>
						(L:Character1,enum)
					</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="Pilot1_Vis_Ext" Node="Ext_CREW_VIS_2"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:Character2,enum)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>
		<Component ID="Passengers_Ext">
			<Component ID="Passenger_0_Vis_Ext" Node="Ext_CREW_VIS_3"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:Character3,enum)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="Passenger_1_Vis_Ext" Node="Ext_CREW_VIS_4"> 
				<UseTemplate Name="ASOBO_GT_Visibility">
					<VISIBILITY_CODE>(L:Character4,enum)</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>

	</RootComponent>
	
	<!-- ###########  WINGFLEX  ########### -->
	<Component ID="WingFlex"> 
		<Component ID="WingL_Twist"> 
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_WingL_Twist</ANIM_NAME>
				<ANIM_CODE>(L:WingL_Twist) 2 / 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="WingL_Bend"> 
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_WingL_Bend</ANIM_NAME>
				<ANIM_CODE>(L:WingL_Bend) 2 / 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="WingR_Twist"> 
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_WingR_Twist</ANIM_NAME>
				<ANIM_CODE>(L:WingR_Twist) 2 / 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
		<Component ID="WingR_Bend"> 
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>ANIM_WingR_Bend</ANIM_NAME>
				<ANIM_CODE>(L:WingR_Bend) 2 / 50 +</ANIM_CODE>
			</UseTemplate>
		</Component>
	</Component>
</ModelBehaviors>